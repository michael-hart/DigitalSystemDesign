
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00003a60 memsz 0x00003a60 flags r-x
    LOAD off    0x00004a80 vaddr 0x00803a80 paddr 0x00803d60 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00005040 vaddr 0x00804040 paddr 0x00804040 align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003840  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  008039f8  008039f8  000049f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00803a80  00803d60  00004a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  00804040  00804040  00005040  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000820  00000000  00000000  00004d88  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000b181  00000000  00000000  000055a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004428  00000000  00000000  00010729  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003eaa  00000000  00000000  00014b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000c14  00000000  00000000  000189fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001b4f  00000000  00000000  00019610  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003c8a  00000000  00000000  0001b15f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0001edec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003d0  00000000  00000000  0001ee10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000210ba  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000210bd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000210c1  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000210c2  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000210c6  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000210ca  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000210ce  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000210d7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000210e0  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  000210e9  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001a  00000000  00000000  000210fb  2**0
                  CONTENTS, READONLY
 28 .jdi          0000568f  00000000  00000000  00021115  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003dbf4  00000000  00000000  000267a4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
008039f8 l    d  .rodata	00000000 .rodata
00803a80 l    d  .rwdata	00000000 .rwdata
00804040 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
008001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00800094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
0080049c l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00800908 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00803a80 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00801e04 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00801f34 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_times.c
00802098 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0080216c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008022ac l     F .text	00000038 alt_dev_reg
00803b60 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008025b0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
008026ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
008027e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00802810 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00802cb0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00802e08 l     F .text	00000050 alt_get_errno
00802e58 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00802020 g     F .text	00000078 alt_main
0080146c g     F .text	00000044 __ashldi3
0080405c g     O .bss	00000100 alt_irq
00803d60 g       *ABS*	00000000 __flash_rwdata_start
008014ec g     F .text	0000004c printf
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
008020e8 g     F .text	00000084 times
00800020 g       *ABS*	00000000 __flash_exceptions_start
00804040 g     O .bss	00000004 errno
00800d10 g     F .text	00000038 __make_dp
008010ac g     F .text	0000002c __make_fp
00804048 g     O .bss	00000004 alt_argv
0080bd34 g       *ABS*	00000000 _gp
008006dc g     F .text	00000058 __subsf3
00803bb4 g     O .rwdata	00000180 alt_fd_list
008032dc g     F .text	00000090 alt_find_dev
00802d90 g     F .text	00000078 alt_io_redirect
008039f8 g       *ABS*	00000000 __DTOR_END__
00802424 g     F .text	000000f4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008014b0 g     F .text	0000003c _printf_r
00801f24 g     F .text	00000008 __udivsi3
00803554 g     F .text	0000008c alt_icache_flush
00803d4c g     O .rwdata	00000004 alt_max_fd
008012fc g     F .text	00000104 __unpack_d
008008c4 g     F .text	00000044 __extendsfdf2
00800c5c g     F .text	00000054 __adddf3
00803d34 g     O .rwdata	00000004 _global_impure_ptr
008041e8 g       *ABS*	00000000 __bss_end
00802bc0 g     F .text	000000f0 alt_iic_isr_register
008031b8 g     F .text	00000104 alt_tick
00802b74 g     F .text	0000004c alt_ic_irq_enabled
00803120 g     F .text	00000098 alt_alarm_stop
00804050 g     O .bss	00000004 alt_irq_active
01010000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000cc alt_irq_handler
00803b8c g     O .rwdata	00000028 alt_dev_null
00800fe4 g     F .text	000000c8 __unpack_f
008027c8 g     F .text	0000001c alt_dcache_flush_all
00803d60 g       *ABS*	00000000 __ram_rwdata_end
00803d44 g     O .rwdata	00000008 alt_dev_list
008021bc g     F .text	000000f0 write
00803a80 g       *ABS*	00000000 __ram_rodata_end
00801428 g     F .text	00000044 __lshrdi3
00801f2c g     F .text	00000008 __umodsi3
008041e8 g       *ABS*	00000000 end
00800eb8 g     F .text	0000012c __pack_f
008039f8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802624 g     F .text	00000088 alt_avalon_timer_sc_init
00802518 g     F .text	00000098 altera_avalon_jtag_uart_write
00801538 g     F .text	00000734 ___vfprintf_internal_r
008037e4 g     F .text	000001d8 __call_exitprocs
008001b8 g     F .text	0000003c _start
00804054 g     O .bss	00000004 _alt_tick_rate
00804058 g     O .bss	00000004 _alt_nticks
00802318 g     F .text	0000004c alt_sys_init
0080365c g     F .text	00000188 __register_exitproc
00801400 g     F .text	00000028 __mulsi3
00803a80 g       *ABS*	00000000 __ram_rwdata_start
008039f8 g       *ABS*	00000000 __ram_rodata_start
00802364 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00803480 g     F .text	000000d4 alt_get_fd
008001f4 g     F .text	000000e0 generateVector
00803614 g     F .text	00000048 memcmp
008041e8 g       *ABS*	00000000 __alt_stack_base
00803a30 g     O .rodata	00000010 __thenan_sf
0080336c g     F .text	00000114 alt_find_file
00802860 g     F .text	000000a0 alt_dev_llist_insert
00801c90 g     F .text	000000e0 __sfvwrite_small_dev
00804040 g       *ABS*	00000000 __bss_start
00800384 g     F .text	00000118 main
0080404c g     O .bss	00000004 alt_envp
008023c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00800d48 g     F .text	00000060 __truncdfsf2
0080415c g     O .bss	0000008c _atexit0
00803d50 g     O .rwdata	00000004 alt_errno
00801e78 g     F .text	00000050 __divsi3
00803a40 g     O .rodata	00000014 __thenan_df
008039f8 g       *ABS*	00000000 __CTOR_END__
00800734 g     F .text	00000190 __mulsf3
008039f8 g       *ABS*	00000000 __flash_rodata_start
008039f8 g       *ABS*	00000000 __DTOR_LIST__
008022e4 g     F .text	00000034 alt_irq_init
008030a0 g     F .text	00000080 alt_release_fd
008035e0 g     F .text	00000014 atexit
008002d4 g     F .text	000000b0 sumVector
00801d98 g     F .text	0000006c _write_r
00803d38 g     O .rwdata	00000004 _impure_ptr
00804044 g     O .bss	00000004 alt_argc
0080295c g     F .text	0000005c _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00803d3c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008029e8 g     F .text	00000050 alt_ic_isr_register
00803d60 g       *ABS*	00000000 _edata
008041e8 g       *ABS*	00000000 _end
008001b8 g       *ABS*	00000000 __ram_exceptions_end
00802ad4 g     F .text	000000a0 alt_ic_irq_disable
008032bc g     F .text	00000020 altera_nios2_qsys_irq_init
008035f4 g     F .text	00000020 exit
00801ec8 g     F .text	0000005c __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
008039bc g     F .text	0000003c _exit
00800da8 g     F .text	00000110 __muldi3
00801d70 g     F .text	00000028 strlen
00802f48 g     F .text	00000158 open
008029b8 g     F .text	00000030 alt_icache_flush_all
00803d54 g     O .rwdata	00000004 alt_priority_mask
00802a38 g     F .text	0000009c alt_ic_irq_enable
00801c6c g     F .text	00000024 __vfprintf_internal
00800cb0 g     F .text	00000060 __subdf3
00803d58 g     O .rwdata	00000008 alt_alarm_list
00802900 g     F .text	0000005c _do_ctors
008026fc g     F .text	000000cc close
00800690 g     F .text	0000004c __addsf3
00801fa0 g     F .text	00000080 alt_load
008010d8 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)

00800094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800100:	0005313a 	rdctl	r2,ipending
  800104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800114:	00800044 	movi	r2,1
  800118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	e0fffb17 	ldw	r3,-20(fp)
  800120:	e0bffc17 	ldw	r2,-16(fp)
  800124:	1884703a 	and	r2,r3,r2
  800128:	10001726 	beq	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	00c02034 	movhi	r3,128
  800130:	18d01704 	addi	r3,r3,16476
  800134:	e0bffd17 	ldw	r2,-12(fp)
  800138:	100490fa 	slli	r2,r2,3
  80013c:	1885883a 	add	r2,r3,r2
  800140:	10c00017 	ldw	r3,0(r2)
  800144:	01002034 	movhi	r4,128
  800148:	21101704 	addi	r4,r4,16476
  80014c:	e0bffd17 	ldw	r2,-12(fp)
  800150:	100490fa 	slli	r2,r2,3
  800154:	2085883a 	add	r2,r4,r2
  800158:	10800104 	addi	r2,r2,4
  80015c:	10800017 	ldw	r2,0(r2)
  800160:	1009883a 	mov	r4,r2
  800164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80016c:	0005313a 	rdctl	r2,ipending
  800170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  80017c:	e0bffb17 	ldw	r2,-20(fp)
  800180:	103fe31e 	bne	r2,zero,800110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffc17 	ldw	r2,-16(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fde06 	br	80011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  8001c0:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001c4:	d6af4d14 	ori	gp,gp,48436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c8:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001cc:	10901014 	ori	r2,r2,16448

    movhi r3, %hi(__bss_end)
  8001d0:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001d4:	18d07a14 	ori	r3,r3,16872

    beq r2, r3, 1f
  8001d8:	10c00326 	beq	r2,r3,8001e8 <_start+0x30>

0:
    stw zero, (r2)
  8001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e4:	10fffd36 	bltu	r2,r3,8001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e8:	0801fa00 	call	801fa0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001ec:	08020200 	call	802020 <alt_main>

008001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001f0:	003fff06 	br	8001f0 <alt_after_alt_main>

008001f4 <generateVector>:
#define step 0.001
#define N 255001

// Generates the vector x and stores it in memory
void generateVector(float x[N])
{
  8001f4:	defffb04 	addi	sp,sp,-20
  8001f8:	dfc00415 	stw	ra,16(sp)
  8001fc:	df000315 	stw	fp,12(sp)
  800200:	dc000215 	stw	r16,8(sp)
  800204:	df000204 	addi	fp,sp,8
  800208:	e13fff15 	stw	r4,-4(fp)
	int i;
	x[0] = 0;
  80020c:	e0bfff17 	ldw	r2,-4(fp)
  800210:	10000015 	stw	zero,0(r2)
	for (i=1; i<N; i++)
  800214:	00800044 	movi	r2,1
  800218:	e0bffe15 	stw	r2,-8(fp)
  80021c:	00002306 	br	8002ac <generateVector+0xb8>
	{
		x[i] = x[i-1] + step;
  800220:	e0bffe17 	ldw	r2,-8(fp)
  800224:	1085883a 	add	r2,r2,r2
  800228:	1085883a 	add	r2,r2,r2
  80022c:	e0ffff17 	ldw	r3,-4(fp)
  800230:	18a1883a 	add	r16,r3,r2
  800234:	e0bffe17 	ldw	r2,-8(fp)
  800238:	10bfffc4 	addi	r2,r2,-1
  80023c:	1085883a 	add	r2,r2,r2
  800240:	1085883a 	add	r2,r2,r2
  800244:	e0ffff17 	ldw	r3,-4(fp)
  800248:	1887883a 	add	r3,r3,r2
  80024c:	18800017 	ldw	r2,0(r3)
  800250:	1009883a 	mov	r4,r2
  800254:	08008c40 	call	8008c4 <__extendsfdf2>
  800258:	100b883a 	mov	r5,r2
  80025c:	180d883a 	mov	r6,r3
  800260:	2809883a 	mov	r4,r5
  800264:	300b883a 	mov	r5,r6
  800268:	01b4bcb4 	movhi	r6,54002
  80026c:	31aa7f04 	addi	r6,r6,-22020
  800270:	01cfd434 	movhi	r7,16208
  800274:	39d89344 	addi	r7,r7,25165
  800278:	0800c5c0 	call	800c5c <__adddf3>
  80027c:	1009883a 	mov	r4,r2
  800280:	180b883a 	mov	r5,r3
  800284:	2005883a 	mov	r2,r4
  800288:	2807883a 	mov	r3,r5
  80028c:	1009883a 	mov	r4,r2
  800290:	180b883a 	mov	r5,r3
  800294:	0800d480 	call	800d48 <__truncdfsf2>
  800298:	1007883a 	mov	r3,r2
  80029c:	80c00015 	stw	r3,0(r16)
// Generates the vector x and stores it in memory
void generateVector(float x[N])
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++)
  8002a0:	e0bffe17 	ldw	r2,-8(fp)
  8002a4:	10800044 	addi	r2,r2,1
  8002a8:	e0bffe15 	stw	r2,-8(fp)
  8002ac:	e0bffe17 	ldw	r2,-8(fp)
  8002b0:	00c00134 	movhi	r3,4
  8002b4:	18f90604 	addi	r3,r3,-7144
  8002b8:	18bfd90e 	bge	r3,r2,800220 <generateVector+0x2c>
	{
		x[i] = x[i-1] + step;
	}
}
  8002bc:	e037883a 	mov	sp,fp
  8002c0:	dfc00217 	ldw	ra,8(sp)
  8002c4:	df000117 	ldw	fp,4(sp)
  8002c8:	dc000017 	ldw	r16,0(sp)
  8002cc:	dec00304 	addi	sp,sp,12
  8002d0:	f800283a 	ret

008002d4 <sumVector>:

// Sums along the vector, with each element x -> x + x^2
float sumVector(float x[], int M)
{
  8002d4:	defff904 	addi	sp,sp,-28
  8002d8:	dfc00615 	stw	ra,24(sp)
  8002dc:	df000515 	stw	fp,20(sp)
  8002e0:	df000504 	addi	fp,sp,20
  8002e4:	e13ffe15 	stw	r4,-8(fp)
  8002e8:	e17fff15 	stw	r5,-4(fp)
	float y=0, current;
  8002ec:	e03ffb15 	stw	zero,-20(fp)
	int i;
	for (i=0; i<M; i++)
  8002f0:	e03ffc15 	stw	zero,-16(fp)
  8002f4:	00001906 	br	80035c <sumVector+0x88>
	{
		current = x[i];
  8002f8:	e0bffc17 	ldw	r2,-16(fp)
  8002fc:	1085883a 	add	r2,r2,r2
  800300:	1085883a 	add	r2,r2,r2
  800304:	e0fffe17 	ldw	r3,-8(fp)
  800308:	1885883a 	add	r2,r3,r2
  80030c:	10800017 	ldw	r2,0(r2)
  800310:	e0bffd15 	stw	r2,-12(fp)
		y += current + current*current;
  800314:	e13ffd17 	ldw	r4,-12(fp)
  800318:	e17ffd17 	ldw	r5,-12(fp)
  80031c:	08007340 	call	800734 <__mulsf3>
  800320:	1007883a 	mov	r3,r2
  800324:	1805883a 	mov	r2,r3
  800328:	1009883a 	mov	r4,r2
  80032c:	e17ffd17 	ldw	r5,-12(fp)
  800330:	08006900 	call	800690 <__addsf3>
  800334:	1007883a 	mov	r3,r2
  800338:	1805883a 	mov	r2,r3
  80033c:	e13ffb17 	ldw	r4,-20(fp)
  800340:	100b883a 	mov	r5,r2
  800344:	08006900 	call	800690 <__addsf3>
  800348:	1007883a 	mov	r3,r2
  80034c:	e0fffb15 	stw	r3,-20(fp)
// Sums along the vector, with each element x -> x + x^2
float sumVector(float x[], int M)
{
	float y=0, current;
	int i;
	for (i=0; i<M; i++)
  800350:	e0bffc17 	ldw	r2,-16(fp)
  800354:	10800044 	addi	r2,r2,1
  800358:	e0bffc15 	stw	r2,-16(fp)
  80035c:	e0fffc17 	ldw	r3,-16(fp)
  800360:	e0bfff17 	ldw	r2,-4(fp)
  800364:	18bfe416 	blt	r3,r2,8002f8 <sumVector+0x24>
	{
		current = x[i];
		y += current + current*current;
	}
	return y;
  800368:	e0fffb17 	ldw	r3,-20(fp)
  80036c:	1805883a 	mov	r2,r3
}
  800370:	e037883a 	mov	sp,fp
  800374:	dfc00117 	ldw	ra,4(sp)
  800378:	df000017 	ldw	fp,0(sp)
  80037c:	dec00204 	addi	sp,sp,8
  800380:	f800283a 	ret

00800384 <main>:

int main()
{
  800384:	defffe04 	addi	sp,sp,-8
  800388:	dfc00115 	stw	ra,4(sp)
  80038c:	df000015 	stw	fp,0(sp)
  800390:	d839883a 	mov	fp,sp
  800394:	023ffc34 	movhi	r8,65520
  800398:	421be404 	addi	r8,r8,28560
  80039c:	da37883a 	add	sp,sp,r8

	// The following is used for timing
	clock_t exec_t1, exec_t2;

	// Modify this line for each task in turn
	printf("Task %d!\n", (int)TASK);
  8003a0:	01002034 	movhi	r4,128
  8003a4:	210e7e04 	addi	r4,r4,14840
  8003a8:	014000c4 	movi	r5,3
  8003ac:	08014ec0 	call	8014ec <printf>

	generateVector(x);
  8003b0:	00fffc34 	movhi	r3,65520
  8003b4:	18dbe704 	addi	r3,r3,28572
  8003b8:	e0c5883a 	add	r2,fp,r3
  8003bc:	1009883a 	mov	r4,r2
  8003c0:	08001f40 	call	8001f4 <generateVector>

	exec_t1 = times(NULL); // get system time before starting the process
  8003c4:	0009883a 	mov	r4,zero
  8003c8:	08020e80 	call	8020e8 <times>
  8003cc:	013ffc34 	movhi	r4,65520
  8003d0:	211be404 	addi	r4,r4,28560
  8003d4:	2709883a 	add	r4,r4,fp
  8003d8:	20800015 	stw	r2,0(r4)

	// The code that you want to time goes here
	y = sumVector(x, N);
  8003dc:	00fffc34 	movhi	r3,65520
  8003e0:	18dbe704 	addi	r3,r3,28572
  8003e4:	e0c5883a 	add	r2,fp,r3
  8003e8:	1009883a 	mov	r4,r2
  8003ec:	01400134 	movhi	r5,4
  8003f0:	29790644 	addi	r5,r5,-7143
  8003f4:	08002d40 	call	8002d4 <sumVector>
  8003f8:	013ffc34 	movhi	r4,65520
  8003fc:	211be504 	addi	r4,r4,28564
  800400:	2709883a 	add	r4,r4,fp
  800404:	20800015 	stw	r2,0(r4)

	// till here
	exec_t2 = times(NULL); // get system time after finishing the process
  800408:	0009883a 	mov	r4,zero
  80040c:	08020e80 	call	8020e8 <times>
  800410:	00fffc34 	movhi	r3,65520
  800414:	18dbe604 	addi	r3,r3,28568
  800418:	1f07883a 	add	r3,r3,fp
  80041c:	18800015 	stw	r2,0(r3)

	// Print output to stdout
	printf("Procedure time = %d ticks\n", (int)(exec_t2 - exec_t1));
  800420:	013ffc34 	movhi	r4,65520
  800424:	211be604 	addi	r4,r4,28568
  800428:	2709883a 	add	r4,r4,fp
  80042c:	20c00017 	ldw	r3,0(r4)
  800430:	013ffc34 	movhi	r4,65520
  800434:	211be404 	addi	r4,r4,28560
  800438:	2709883a 	add	r4,r4,fp
  80043c:	20800017 	ldw	r2,0(r4)
  800440:	1885c83a 	sub	r2,r3,r2
  800444:	01002034 	movhi	r4,128
  800448:	210e8104 	addi	r4,r4,14852
  80044c:	100b883a 	mov	r5,r2
  800450:	08014ec0 	call	8014ec <printf>
	printf("Result = %f\n", y);
  800454:	00bffc34 	movhi	r2,65520
  800458:	109be504 	addi	r2,r2,28564
  80045c:	1705883a 	add	r2,r2,fp
  800460:	11000017 	ldw	r4,0(r2)
  800464:	08008c40 	call	8008c4 <__extendsfdf2>
  800468:	100d883a 	mov	r6,r2
  80046c:	180f883a 	mov	r7,r3
  800470:	01002034 	movhi	r4,128
  800474:	210e8804 	addi	r4,r4,14880
  800478:	300b883a 	mov	r5,r6
  80047c:	380d883a 	mov	r6,r7
  800480:	08014ec0 	call	8014ec <printf>

	return 0;
  800484:	0005883a 	mov	r2,zero
}
  800488:	e037883a 	mov	sp,fp
  80048c:	dfc00117 	ldw	ra,4(sp)
  800490:	df000017 	ldw	fp,0(sp)
  800494:	dec00204 	addi	sp,sp,8
  800498:	f800283a 	ret

0080049c <_fpadd_parts>:
  80049c:	2005883a 	mov	r2,r4
  8004a0:	21000017 	ldw	r4,0(r4)
  8004a4:	01c00044 	movi	r7,1
  8004a8:	3900332e 	bgeu	r7,r4,800578 <_fpadd_parts+0xdc>
  8004ac:	28c00017 	ldw	r3,0(r5)
  8004b0:	38c0642e 	bgeu	r7,r3,800644 <_fpadd_parts+0x1a8>
  8004b4:	01c00104 	movi	r7,4
  8004b8:	21c06e26 	beq	r4,r7,800674 <_fpadd_parts+0x1d8>
  8004bc:	19c06126 	beq	r3,r7,800644 <_fpadd_parts+0x1a8>
  8004c0:	01c00084 	movi	r7,2
  8004c4:	19c04226 	beq	r3,r7,8005d0 <_fpadd_parts+0x134>
  8004c8:	21c05e26 	beq	r4,r7,800644 <_fpadd_parts+0x1a8>
  8004cc:	11000217 	ldw	r4,8(r2)
  8004d0:	2a400217 	ldw	r9,8(r5)
  8004d4:	12800317 	ldw	r10,12(r2)
  8004d8:	29c00317 	ldw	r7,12(r5)
  8004dc:	2247c83a 	sub	r3,r4,r9
  8004e0:	1811883a 	mov	r8,r3
  8004e4:	18005316 	blt	r3,zero,800634 <_fpadd_parts+0x198>
  8004e8:	02c007c4 	movi	r11,31
  8004ec:	5a002316 	blt	r11,r8,80057c <_fpadd_parts+0xe0>
  8004f0:	00c0560e 	bge	zero,r3,80064c <_fpadd_parts+0x1b0>
  8004f4:	00c00044 	movi	r3,1
  8004f8:	1a06983a 	sll	r3,r3,r8
  8004fc:	3a10d83a 	srl	r8,r7,r8
  800500:	18ffffc4 	addi	r3,r3,-1
  800504:	19ce703a 	and	r7,r3,r7
  800508:	380ec03a 	cmpne	r7,r7,zero
  80050c:	3a0eb03a 	or	r7,r7,r8
  800510:	10c00117 	ldw	r3,4(r2)
  800514:	28800117 	ldw	r2,4(r5)
  800518:	18801d26 	beq	r3,r2,800590 <_fpadd_parts+0xf4>
  80051c:	18003a26 	beq	r3,zero,800608 <_fpadd_parts+0x16c>
  800520:	3a85c83a 	sub	r2,r7,r10
  800524:	10003a16 	blt	r2,zero,800610 <_fpadd_parts+0x174>
  800528:	30000115 	stw	zero,4(r6)
  80052c:	31000215 	stw	r4,8(r6)
  800530:	30800315 	stw	r2,12(r6)
  800534:	10ffffc4 	addi	r3,r2,-1
  800538:	01d00034 	movhi	r7,16384
  80053c:	39ffff84 	addi	r7,r7,-2
  800540:	38c00936 	bltu	r7,r3,800568 <_fpadd_parts+0xcc>
  800544:	30c00217 	ldw	r3,8(r6)
  800548:	18ffffc4 	addi	r3,r3,-1
  80054c:	1085883a 	add	r2,r2,r2
  800550:	113fffc4 	addi	r4,r2,-1
  800554:	180b883a 	mov	r5,r3
  800558:	18ffffc4 	addi	r3,r3,-1
  80055c:	393ffb2e 	bgeu	r7,r4,80054c <_fpadd_parts+0xb0>
  800560:	30800315 	stw	r2,12(r6)
  800564:	31400215 	stw	r5,8(r6)
  800568:	00c000c4 	movi	r3,3
  80056c:	30c00015 	stw	r3,0(r6)
  800570:	10000e16 	blt	r2,zero,8005ac <_fpadd_parts+0x110>
  800574:	3005883a 	mov	r2,r6
  800578:	f800283a 	ret
  80057c:	49002a0e 	bge	r9,r4,800628 <_fpadd_parts+0x18c>
  800580:	10c00117 	ldw	r3,4(r2)
  800584:	28800117 	ldw	r2,4(r5)
  800588:	000f883a 	mov	r7,zero
  80058c:	18bfe31e 	bne	r3,r2,80051c <_fpadd_parts+0x80>
  800590:	3a85883a 	add	r2,r7,r10
  800594:	30c00115 	stw	r3,4(r6)
  800598:	00c000c4 	movi	r3,3
  80059c:	31000215 	stw	r4,8(r6)
  8005a0:	30800315 	stw	r2,12(r6)
  8005a4:	30c00015 	stw	r3,0(r6)
  8005a8:	103ff20e 	bge	r2,zero,800574 <_fpadd_parts+0xd8>
  8005ac:	30c00217 	ldw	r3,8(r6)
  8005b0:	1008d07a 	srli	r4,r2,1
  8005b4:	1080004c 	andi	r2,r2,1
  8005b8:	18c00044 	addi	r3,r3,1
  8005bc:	1104b03a 	or	r2,r2,r4
  8005c0:	30800315 	stw	r2,12(r6)
  8005c4:	30c00215 	stw	r3,8(r6)
  8005c8:	3005883a 	mov	r2,r6
  8005cc:	f800283a 	ret
  8005d0:	20ffe91e 	bne	r4,r3,800578 <_fpadd_parts+0xdc>
  8005d4:	31000015 	stw	r4,0(r6)
  8005d8:	10c00117 	ldw	r3,4(r2)
  8005dc:	30c00115 	stw	r3,4(r6)
  8005e0:	11c00217 	ldw	r7,8(r2)
  8005e4:	10c00117 	ldw	r3,4(r2)
  8005e8:	29000117 	ldw	r4,4(r5)
  8005ec:	31c00215 	stw	r7,8(r6)
  8005f0:	10800317 	ldw	r2,12(r2)
  8005f4:	20c6703a 	and	r3,r4,r3
  8005f8:	30c00115 	stw	r3,4(r6)
  8005fc:	30800315 	stw	r2,12(r6)
  800600:	3005883a 	mov	r2,r6
  800604:	f800283a 	ret
  800608:	51c5c83a 	sub	r2,r10,r7
  80060c:	103fc60e 	bge	r2,zero,800528 <_fpadd_parts+0x8c>
  800610:	0085c83a 	sub	r2,zero,r2
  800614:	00c00044 	movi	r3,1
  800618:	30c00115 	stw	r3,4(r6)
  80061c:	31000215 	stw	r4,8(r6)
  800620:	30800315 	stw	r2,12(r6)
  800624:	003fc306 	br	800534 <_fpadd_parts+0x98>
  800628:	4809883a 	mov	r4,r9
  80062c:	0015883a 	mov	r10,zero
  800630:	003fb706 	br	800510 <_fpadd_parts+0x74>
  800634:	00d1c83a 	sub	r8,zero,r3
  800638:	02c007c4 	movi	r11,31
  80063c:	5a3fcf16 	blt	r11,r8,80057c <_fpadd_parts+0xe0>
  800640:	003fab06 	br	8004f0 <_fpadd_parts+0x54>
  800644:	2805883a 	mov	r2,r5
  800648:	f800283a 	ret
  80064c:	183fb026 	beq	r3,zero,800510 <_fpadd_parts+0x74>
  800650:	02400044 	movi	r9,1
  800654:	4a12983a 	sll	r9,r9,r8
  800658:	5206d83a 	srl	r3,r10,r8
  80065c:	2209883a 	add	r4,r4,r8
  800660:	4a3fffc4 	addi	r8,r9,-1
  800664:	4294703a 	and	r10,r8,r10
  800668:	5014c03a 	cmpne	r10,r10,zero
  80066c:	50d4b03a 	or	r10,r10,r3
  800670:	003fa706 	br	800510 <_fpadd_parts+0x74>
  800674:	193fc01e 	bne	r3,r4,800578 <_fpadd_parts+0xdc>
  800678:	11000117 	ldw	r4,4(r2)
  80067c:	28c00117 	ldw	r3,4(r5)
  800680:	20ffbd26 	beq	r4,r3,800578 <_fpadd_parts+0xdc>
  800684:	00802034 	movhi	r2,128
  800688:	108e8c04 	addi	r2,r2,14896
  80068c:	f800283a 	ret

00800690 <__addsf3>:
  800690:	defff104 	addi	sp,sp,-60
  800694:	d9000d15 	stw	r4,52(sp)
  800698:	d9400c15 	stw	r5,48(sp)
  80069c:	d9000d04 	addi	r4,sp,52
  8006a0:	d9400804 	addi	r5,sp,32
  8006a4:	dfc00e15 	stw	ra,56(sp)
  8006a8:	0800fe40 	call	800fe4 <__unpack_f>
  8006ac:	d9000c04 	addi	r4,sp,48
  8006b0:	d9400404 	addi	r5,sp,16
  8006b4:	0800fe40 	call	800fe4 <__unpack_f>
  8006b8:	d9000804 	addi	r4,sp,32
  8006bc:	d9400404 	addi	r5,sp,16
  8006c0:	d80d883a 	mov	r6,sp
  8006c4:	080049c0 	call	80049c <_fpadd_parts>
  8006c8:	1009883a 	mov	r4,r2
  8006cc:	0800eb80 	call	800eb8 <__pack_f>
  8006d0:	dfc00e17 	ldw	ra,56(sp)
  8006d4:	dec00f04 	addi	sp,sp,60
  8006d8:	f800283a 	ret

008006dc <__subsf3>:
  8006dc:	defff104 	addi	sp,sp,-60
  8006e0:	d9000d15 	stw	r4,52(sp)
  8006e4:	d9400c15 	stw	r5,48(sp)
  8006e8:	d9000d04 	addi	r4,sp,52
  8006ec:	d9400804 	addi	r5,sp,32
  8006f0:	dfc00e15 	stw	ra,56(sp)
  8006f4:	0800fe40 	call	800fe4 <__unpack_f>
  8006f8:	d9000c04 	addi	r4,sp,48
  8006fc:	d9400404 	addi	r5,sp,16
  800700:	0800fe40 	call	800fe4 <__unpack_f>
  800704:	d8800517 	ldw	r2,20(sp)
  800708:	d9000804 	addi	r4,sp,32
  80070c:	d9400404 	addi	r5,sp,16
  800710:	d80d883a 	mov	r6,sp
  800714:	1080005c 	xori	r2,r2,1
  800718:	d8800515 	stw	r2,20(sp)
  80071c:	080049c0 	call	80049c <_fpadd_parts>
  800720:	1009883a 	mov	r4,r2
  800724:	0800eb80 	call	800eb8 <__pack_f>
  800728:	dfc00e17 	ldw	ra,56(sp)
  80072c:	dec00f04 	addi	sp,sp,60
  800730:	f800283a 	ret

00800734 <__mulsf3>:
  800734:	defff104 	addi	sp,sp,-60
  800738:	d9000d15 	stw	r4,52(sp)
  80073c:	d9400c15 	stw	r5,48(sp)
  800740:	d9000d04 	addi	r4,sp,52
  800744:	d9400804 	addi	r5,sp,32
  800748:	dfc00e15 	stw	ra,56(sp)
  80074c:	0800fe40 	call	800fe4 <__unpack_f>
  800750:	d9000c04 	addi	r4,sp,48
  800754:	d9400404 	addi	r5,sp,16
  800758:	0800fe40 	call	800fe4 <__unpack_f>
  80075c:	d8c00817 	ldw	r3,32(sp)
  800760:	00800044 	movi	r2,1
  800764:	10c00936 	bltu	r2,r3,80078c <__mulsf3+0x58>
  800768:	d8c00917 	ldw	r3,36(sp)
  80076c:	d8800517 	ldw	r2,20(sp)
  800770:	d9000804 	addi	r4,sp,32
  800774:	1884c03a 	cmpne	r2,r3,r2
  800778:	d8800915 	stw	r2,36(sp)
  80077c:	0800eb80 	call	800eb8 <__pack_f>
  800780:	dfc00e17 	ldw	ra,56(sp)
  800784:	dec00f04 	addi	sp,sp,60
  800788:	f800283a 	ret
  80078c:	d9000417 	ldw	r4,16(sp)
  800790:	11000936 	bltu	r2,r4,8007b8 <__mulsf3+0x84>
  800794:	d8800517 	ldw	r2,20(sp)
  800798:	d8c00917 	ldw	r3,36(sp)
  80079c:	d9000404 	addi	r4,sp,16
  8007a0:	1884c03a 	cmpne	r2,r3,r2
  8007a4:	d8800515 	stw	r2,20(sp)
  8007a8:	0800eb80 	call	800eb8 <__pack_f>
  8007ac:	dfc00e17 	ldw	ra,56(sp)
  8007b0:	dec00f04 	addi	sp,sp,60
  8007b4:	f800283a 	ret
  8007b8:	00800104 	movi	r2,4
  8007bc:	1880051e 	bne	r3,r2,8007d4 <__mulsf3+0xa0>
  8007c0:	00800084 	movi	r2,2
  8007c4:	20bfe81e 	bne	r4,r2,800768 <__mulsf3+0x34>
  8007c8:	01002034 	movhi	r4,128
  8007cc:	210e8c04 	addi	r4,r4,14896
  8007d0:	003fea06 	br	80077c <__mulsf3+0x48>
  8007d4:	2080031e 	bne	r4,r2,8007e4 <__mulsf3+0xb0>
  8007d8:	00800084 	movi	r2,2
  8007dc:	18bffa26 	beq	r3,r2,8007c8 <__mulsf3+0x94>
  8007e0:	003fec06 	br	800794 <__mulsf3+0x60>
  8007e4:	00800084 	movi	r2,2
  8007e8:	18bfdf26 	beq	r3,r2,800768 <__mulsf3+0x34>
  8007ec:	20bfe926 	beq	r4,r2,800794 <__mulsf3+0x60>
  8007f0:	d9000717 	ldw	r4,28(sp)
  8007f4:	d9800b17 	ldw	r6,44(sp)
  8007f8:	000b883a 	mov	r5,zero
  8007fc:	000f883a 	mov	r7,zero
  800800:	0800da80 	call	800da8 <__muldi3>
  800804:	d9000617 	ldw	r4,24(sp)
  800808:	d9400a17 	ldw	r5,40(sp)
  80080c:	d9c00917 	ldw	r7,36(sp)
  800810:	290b883a 	add	r5,r5,r4
  800814:	d9000517 	ldw	r4,20(sp)
  800818:	29800084 	addi	r6,r5,2
  80081c:	d9800215 	stw	r6,8(sp)
  800820:	3908c03a 	cmpne	r4,r7,r4
  800824:	d9000115 	stw	r4,4(sp)
  800828:	1809883a 	mov	r4,r3
  80082c:	1800070e 	bge	r3,zero,80084c <__mulsf3+0x118>
  800830:	1900004c 	andi	r4,r3,1
  800834:	294000c4 	addi	r5,r5,3
  800838:	20000226 	beq	r4,zero,800844 <__mulsf3+0x110>
  80083c:	1004d07a 	srli	r2,r2,1
  800840:	10a00034 	orhi	r2,r2,32768
  800844:	1808d07a 	srli	r4,r3,1
  800848:	d9400215 	stw	r5,8(sp)
  80084c:	01900034 	movhi	r6,16384
  800850:	31bfffc4 	addi	r6,r6,-1
  800854:	31000c36 	bltu	r6,r4,800888 <__mulsf3+0x154>
  800858:	d8c00217 	ldw	r3,8(sp)
  80085c:	18ffffc4 	addi	r3,r3,-1
  800860:	00000306 	br	800870 <__mulsf3+0x13c>
  800864:	1085883a 	add	r2,r2,r2
  800868:	18ffffc4 	addi	r3,r3,-1
  80086c:	31000536 	bltu	r6,r4,800884 <__mulsf3+0x150>
  800870:	2109883a 	add	r4,r4,r4
  800874:	180b883a 	mov	r5,r3
  800878:	103ffa0e 	bge	r2,zero,800864 <__mulsf3+0x130>
  80087c:	21000054 	ori	r4,r4,1
  800880:	003ff806 	br	800864 <__mulsf3+0x130>
  800884:	d9400215 	stw	r5,8(sp)
  800888:	21401fcc 	andi	r5,r4,127
  80088c:	00c01004 	movi	r3,64
  800890:	28c00526 	beq	r5,r3,8008a8 <__mulsf3+0x174>
  800894:	008000c4 	movi	r2,3
  800898:	d9000315 	stw	r4,12(sp)
  80089c:	d8800015 	stw	r2,0(sp)
  8008a0:	d809883a 	mov	r4,sp
  8008a4:	003fb506 	br	80077c <__mulsf3+0x48>
  8008a8:	20c0200c 	andi	r3,r4,128
  8008ac:	183ff91e 	bne	r3,zero,800894 <__mulsf3+0x160>
  8008b0:	103ff826 	beq	r2,zero,800894 <__mulsf3+0x160>
  8008b4:	21001004 	addi	r4,r4,64
  8008b8:	00bfe004 	movi	r2,-128
  8008bc:	2088703a 	and	r4,r4,r2
  8008c0:	003ff406 	br	800894 <__mulsf3+0x160>

008008c4 <__extendsfdf2>:
  8008c4:	defff904 	addi	sp,sp,-28
  8008c8:	d9000515 	stw	r4,20(sp)
  8008cc:	d9400104 	addi	r5,sp,4
  8008d0:	d9000504 	addi	r4,sp,20
  8008d4:	dfc00615 	stw	ra,24(sp)
  8008d8:	0800fe40 	call	800fe4 <__unpack_f>
  8008dc:	d9c00417 	ldw	r7,16(sp)
  8008e0:	d9000117 	ldw	r4,4(sp)
  8008e4:	d9400217 	ldw	r5,8(sp)
  8008e8:	3804d0ba 	srli	r2,r7,2
  8008ec:	d9800317 	ldw	r6,12(sp)
  8008f0:	380e97ba 	slli	r7,r7,30
  8008f4:	d8800015 	stw	r2,0(sp)
  8008f8:	0800d100 	call	800d10 <__make_dp>
  8008fc:	dfc00617 	ldw	ra,24(sp)
  800900:	dec00704 	addi	sp,sp,28
  800904:	f800283a 	ret

00800908 <_fpadd_parts>:
  800908:	2005883a 	mov	r2,r4
  80090c:	21000017 	ldw	r4,0(r4)
  800910:	01c00044 	movi	r7,1
  800914:	3900622e 	bgeu	r7,r4,800aa0 <_fpadd_parts+0x198>
  800918:	28c00017 	ldw	r3,0(r5)
  80091c:	38c05f2e 	bgeu	r7,r3,800a9c <_fpadd_parts+0x194>
  800920:	01c00104 	movi	r7,4
  800924:	21c0c626 	beq	r4,r7,800c40 <_fpadd_parts+0x338>
  800928:	19c05c26 	beq	r3,r7,800a9c <_fpadd_parts+0x194>
  80092c:	01c00084 	movi	r7,2
  800930:	19c06b26 	beq	r3,r7,800ae0 <_fpadd_parts+0x1d8>
  800934:	21c05926 	beq	r4,r7,800a9c <_fpadd_parts+0x194>
  800938:	11c00217 	ldw	r7,8(r2)
  80093c:	2ac00217 	ldw	r11,8(r5)
  800940:	13000317 	ldw	r12,12(r2)
  800944:	13400417 	ldw	r13,16(r2)
  800948:	3ac9c83a 	sub	r4,r7,r11
  80094c:	2a000317 	ldw	r8,12(r5)
  800950:	2a400417 	ldw	r9,16(r5)
  800954:	2015883a 	mov	r10,r4
  800958:	20007516 	blt	r4,zero,800b30 <_fpadd_parts+0x228>
  80095c:	00c00fc4 	movi	r3,63
  800960:	1a805016 	blt	r3,r10,800aa4 <_fpadd_parts+0x19c>
  800964:	0100870e 	bge	zero,r4,800b84 <_fpadd_parts+0x27c>
  800968:	50fff804 	addi	r3,r10,-32
  80096c:	18009916 	blt	r3,zero,800bd4 <_fpadd_parts+0x2cc>
  800970:	48d6d83a 	srl	r11,r9,r3
  800974:	001d883a 	mov	r14,zero
  800978:	18009e16 	blt	r3,zero,800bf4 <_fpadd_parts+0x2ec>
  80097c:	01000044 	movi	r4,1
  800980:	20c6983a 	sll	r3,r4,r3
  800984:	0015883a 	mov	r10,zero
  800988:	513fffc4 	addi	r4,r10,-1
  80098c:	2295403a 	cmpgeu	r10,r4,r10
  800990:	1a87c83a 	sub	r3,r3,r10
  800994:	1a52703a 	and	r9,r3,r9
  800998:	2210703a 	and	r8,r4,r8
  80099c:	4250b03a 	or	r8,r8,r9
  8009a0:	4010c03a 	cmpne	r8,r8,zero
  8009a4:	42d0b03a 	or	r8,r8,r11
  8009a8:	7013883a 	mov	r9,r14
  8009ac:	11000117 	ldw	r4,4(r2)
  8009b0:	28800117 	ldw	r2,4(r5)
  8009b4:	20804126 	beq	r4,r2,800abc <_fpadd_parts+0x1b4>
  8009b8:	20006326 	beq	r4,zero,800b48 <_fpadd_parts+0x240>
  8009bc:	4305c83a 	sub	r2,r8,r12
  8009c0:	4091803a 	cmpltu	r8,r8,r2
  8009c4:	4b47c83a 	sub	r3,r9,r13
  8009c8:	1a07c83a 	sub	r3,r3,r8
  8009cc:	18006316 	blt	r3,zero,800b5c <_fpadd_parts+0x254>
  8009d0:	30000115 	stw	zero,4(r6)
  8009d4:	31c00215 	stw	r7,8(r6)
  8009d8:	30800315 	stw	r2,12(r6)
  8009dc:	30c00415 	stw	r3,16(r6)
  8009e0:	11ffffc4 	addi	r7,r2,-1
  8009e4:	388b403a 	cmpgeu	r5,r7,r2
  8009e8:	194bc83a 	sub	r5,r3,r5
  8009ec:	01040034 	movhi	r4,4096
  8009f0:	213fffc4 	addi	r4,r4,-1
  8009f4:	21401736 	bltu	r4,r5,800a54 <_fpadd_parts+0x14c>
  8009f8:	29008226 	beq	r5,r4,800c04 <_fpadd_parts+0x2fc>
  8009fc:	31400217 	ldw	r5,8(r6)
  800a00:	02840034 	movhi	r10,4096
  800a04:	52bfffc4 	addi	r10,r10,-1
  800a08:	033fff84 	movi	r12,-2
  800a0c:	297fffc4 	addi	r5,r5,-1
  800a10:	00000106 	br	800a18 <_fpadd_parts+0x110>
  800a14:	3a804a26 	beq	r7,r10,800b40 <_fpadd_parts+0x238>
  800a18:	1089883a 	add	r4,r2,r2
  800a1c:	2091803a 	cmpltu	r8,r4,r2
  800a20:	18c7883a 	add	r3,r3,r3
  800a24:	227fffc4 	addi	r9,r4,-1
  800a28:	40d1883a 	add	r8,r8,r3
  800a2c:	490f403a 	cmpgeu	r7,r9,r4
  800a30:	41cfc83a 	sub	r7,r8,r7
  800a34:	2817883a 	mov	r11,r5
  800a38:	2005883a 	mov	r2,r4
  800a3c:	4007883a 	mov	r3,r8
  800a40:	297fffc4 	addi	r5,r5,-1
  800a44:	51fff32e 	bgeu	r10,r7,800a14 <_fpadd_parts+0x10c>
  800a48:	31000315 	stw	r4,12(r6)
  800a4c:	32000415 	stw	r8,16(r6)
  800a50:	32c00215 	stw	r11,8(r6)
  800a54:	010000c4 	movi	r4,3
  800a58:	31000015 	stw	r4,0(r6)
  800a5c:	01080034 	movhi	r4,8192
  800a60:	213fffc4 	addi	r4,r4,-1
  800a64:	20c00b2e 	bgeu	r4,r3,800a94 <_fpadd_parts+0x18c>
  800a68:	180e97fa 	slli	r7,r3,31
  800a6c:	1008d07a 	srli	r4,r2,1
  800a70:	31400217 	ldw	r5,8(r6)
  800a74:	1806d07a 	srli	r3,r3,1
  800a78:	1080004c 	andi	r2,r2,1
  800a7c:	3908b03a 	or	r4,r7,r4
  800a80:	1108b03a 	or	r4,r2,r4
  800a84:	29400044 	addi	r5,r5,1
  800a88:	31000315 	stw	r4,12(r6)
  800a8c:	30c00415 	stw	r3,16(r6)
  800a90:	31400215 	stw	r5,8(r6)
  800a94:	3005883a 	mov	r2,r6
  800a98:	f800283a 	ret
  800a9c:	2805883a 	mov	r2,r5
  800aa0:	f800283a 	ret
  800aa4:	59c01e0e 	bge	r11,r7,800b20 <_fpadd_parts+0x218>
  800aa8:	11000117 	ldw	r4,4(r2)
  800aac:	28800117 	ldw	r2,4(r5)
  800ab0:	0011883a 	mov	r8,zero
  800ab4:	0013883a 	mov	r9,zero
  800ab8:	20bfbf1e 	bne	r4,r2,8009b8 <_fpadd_parts+0xb0>
  800abc:	4305883a 	add	r2,r8,r12
  800ac0:	1207803a 	cmpltu	r3,r2,r8
  800ac4:	4b53883a 	add	r9,r9,r13
  800ac8:	1a47883a 	add	r3,r3,r9
  800acc:	31000115 	stw	r4,4(r6)
  800ad0:	31c00215 	stw	r7,8(r6)
  800ad4:	30800315 	stw	r2,12(r6)
  800ad8:	30c00415 	stw	r3,16(r6)
  800adc:	003fdd06 	br	800a54 <_fpadd_parts+0x14c>
  800ae0:	20ffef1e 	bne	r4,r3,800aa0 <_fpadd_parts+0x198>
  800ae4:	31000015 	stw	r4,0(r6)
  800ae8:	10c00117 	ldw	r3,4(r2)
  800aec:	30c00115 	stw	r3,4(r6)
  800af0:	10c00217 	ldw	r3,8(r2)
  800af4:	11000117 	ldw	r4,4(r2)
  800af8:	29400117 	ldw	r5,4(r5)
  800afc:	30c00215 	stw	r3,8(r6)
  800b00:	10c00317 	ldw	r3,12(r2)
  800b04:	2908703a 	and	r4,r5,r4
  800b08:	30c00315 	stw	r3,12(r6)
  800b0c:	10c00417 	ldw	r3,16(r2)
  800b10:	31000115 	stw	r4,4(r6)
  800b14:	3005883a 	mov	r2,r6
  800b18:	30c00415 	stw	r3,16(r6)
  800b1c:	f800283a 	ret
  800b20:	580f883a 	mov	r7,r11
  800b24:	0019883a 	mov	r12,zero
  800b28:	001b883a 	mov	r13,zero
  800b2c:	003f9f06 	br	8009ac <_fpadd_parts+0xa4>
  800b30:	0115c83a 	sub	r10,zero,r4
  800b34:	00c00fc4 	movi	r3,63
  800b38:	1abfda16 	blt	r3,r10,800aa4 <_fpadd_parts+0x19c>
  800b3c:	003f8906 	br	800964 <_fpadd_parts+0x5c>
  800b40:	627fb52e 	bgeu	r12,r9,800a18 <_fpadd_parts+0x110>
  800b44:	003fc006 	br	800a48 <_fpadd_parts+0x140>
  800b48:	6205c83a 	sub	r2,r12,r8
  800b4c:	6099803a 	cmpltu	r12,r12,r2
  800b50:	6a47c83a 	sub	r3,r13,r9
  800b54:	1b07c83a 	sub	r3,r3,r12
  800b58:	183f9d0e 	bge	r3,zero,8009d0 <_fpadd_parts+0xc8>
  800b5c:	0085c83a 	sub	r2,zero,r2
  800b60:	1008c03a 	cmpne	r4,r2,zero
  800b64:	00c7c83a 	sub	r3,zero,r3
  800b68:	1907c83a 	sub	r3,r3,r4
  800b6c:	01000044 	movi	r4,1
  800b70:	31000115 	stw	r4,4(r6)
  800b74:	31c00215 	stw	r7,8(r6)
  800b78:	30800315 	stw	r2,12(r6)
  800b7c:	30c00415 	stw	r3,16(r6)
  800b80:	003f9706 	br	8009e0 <_fpadd_parts+0xd8>
  800b84:	203f8926 	beq	r4,zero,8009ac <_fpadd_parts+0xa4>
  800b88:	50fff804 	addi	r3,r10,-32
  800b8c:	3a8f883a 	add	r7,r7,r10
  800b90:	18002316 	blt	r3,zero,800c20 <_fpadd_parts+0x318>
  800b94:	68d6d83a 	srl	r11,r13,r3
  800b98:	001d883a 	mov	r14,zero
  800b9c:	18001c16 	blt	r3,zero,800c10 <_fpadd_parts+0x308>
  800ba0:	01000044 	movi	r4,1
  800ba4:	20c6983a 	sll	r3,r4,r3
  800ba8:	0015883a 	mov	r10,zero
  800bac:	513fffc4 	addi	r4,r10,-1
  800bb0:	2295403a 	cmpgeu	r10,r4,r10
  800bb4:	1a87c83a 	sub	r3,r3,r10
  800bb8:	1b5a703a 	and	r13,r3,r13
  800bbc:	2318703a 	and	r12,r4,r12
  800bc0:	6358b03a 	or	r12,r12,r13
  800bc4:	6018c03a 	cmpne	r12,r12,zero
  800bc8:	62d8b03a 	or	r12,r12,r11
  800bcc:	701b883a 	mov	r13,r14
  800bd0:	003f7606 	br	8009ac <_fpadd_parts+0xa4>
  800bd4:	4808907a 	slli	r4,r9,1
  800bd8:	02c007c4 	movi	r11,31
  800bdc:	5a97c83a 	sub	r11,r11,r10
  800be0:	22c8983a 	sll	r4,r4,r11
  800be4:	4296d83a 	srl	r11,r8,r10
  800be8:	4a9cd83a 	srl	r14,r9,r10
  800bec:	22d6b03a 	or	r11,r4,r11
  800bf0:	003f6106 	br	800978 <_fpadd_parts+0x70>
  800bf4:	00c00044 	movi	r3,1
  800bf8:	1a94983a 	sll	r10,r3,r10
  800bfc:	0007883a 	mov	r3,zero
  800c00:	003f6106 	br	800988 <_fpadd_parts+0x80>
  800c04:	013fff84 	movi	r4,-2
  800c08:	21ff7c2e 	bgeu	r4,r7,8009fc <_fpadd_parts+0xf4>
  800c0c:	003f9106 	br	800a54 <_fpadd_parts+0x14c>
  800c10:	00c00044 	movi	r3,1
  800c14:	1a94983a 	sll	r10,r3,r10
  800c18:	0007883a 	mov	r3,zero
  800c1c:	003fe306 	br	800bac <_fpadd_parts+0x2a4>
  800c20:	6816907a 	slli	r11,r13,1
  800c24:	010007c4 	movi	r4,31
  800c28:	2289c83a 	sub	r4,r4,r10
  800c2c:	5908983a 	sll	r4,r11,r4
  800c30:	6296d83a 	srl	r11,r12,r10
  800c34:	6a9cd83a 	srl	r14,r13,r10
  800c38:	22d6b03a 	or	r11,r4,r11
  800c3c:	003fd706 	br	800b9c <_fpadd_parts+0x294>
  800c40:	193f971e 	bne	r3,r4,800aa0 <_fpadd_parts+0x198>
  800c44:	11000117 	ldw	r4,4(r2)
  800c48:	28c00117 	ldw	r3,4(r5)
  800c4c:	20ff9426 	beq	r4,r3,800aa0 <_fpadd_parts+0x198>
  800c50:	00802034 	movhi	r2,128
  800c54:	108e9004 	addi	r2,r2,14912
  800c58:	f800283a 	ret

00800c5c <__adddf3>:
  800c5c:	deffec04 	addi	sp,sp,-80
  800c60:	d9001115 	stw	r4,68(sp)
  800c64:	d9401215 	stw	r5,72(sp)
  800c68:	d9001104 	addi	r4,sp,68
  800c6c:	d9400a04 	addi	r5,sp,40
  800c70:	dfc01315 	stw	ra,76(sp)
  800c74:	d9c01015 	stw	r7,64(sp)
  800c78:	d9800f15 	stw	r6,60(sp)
  800c7c:	08012fc0 	call	8012fc <__unpack_d>
  800c80:	d9000f04 	addi	r4,sp,60
  800c84:	d9400504 	addi	r5,sp,20
  800c88:	08012fc0 	call	8012fc <__unpack_d>
  800c8c:	d9000a04 	addi	r4,sp,40
  800c90:	d9400504 	addi	r5,sp,20
  800c94:	d80d883a 	mov	r6,sp
  800c98:	08009080 	call	800908 <_fpadd_parts>
  800c9c:	1009883a 	mov	r4,r2
  800ca0:	08010d80 	call	8010d8 <__pack_d>
  800ca4:	dfc01317 	ldw	ra,76(sp)
  800ca8:	dec01404 	addi	sp,sp,80
  800cac:	f800283a 	ret

00800cb0 <__subdf3>:
  800cb0:	deffec04 	addi	sp,sp,-80
  800cb4:	d9001115 	stw	r4,68(sp)
  800cb8:	d9401215 	stw	r5,72(sp)
  800cbc:	d9001104 	addi	r4,sp,68
  800cc0:	d9400a04 	addi	r5,sp,40
  800cc4:	dfc01315 	stw	ra,76(sp)
  800cc8:	d9c01015 	stw	r7,64(sp)
  800ccc:	d9800f15 	stw	r6,60(sp)
  800cd0:	08012fc0 	call	8012fc <__unpack_d>
  800cd4:	d9000f04 	addi	r4,sp,60
  800cd8:	d9400504 	addi	r5,sp,20
  800cdc:	08012fc0 	call	8012fc <__unpack_d>
  800ce0:	d8800617 	ldw	r2,24(sp)
  800ce4:	d9000a04 	addi	r4,sp,40
  800ce8:	d9400504 	addi	r5,sp,20
  800cec:	d80d883a 	mov	r6,sp
  800cf0:	1080005c 	xori	r2,r2,1
  800cf4:	d8800615 	stw	r2,24(sp)
  800cf8:	08009080 	call	800908 <_fpadd_parts>
  800cfc:	1009883a 	mov	r4,r2
  800d00:	08010d80 	call	8010d8 <__pack_d>
  800d04:	dfc01317 	ldw	ra,76(sp)
  800d08:	dec01404 	addi	sp,sp,80
  800d0c:	f800283a 	ret

00800d10 <__make_dp>:
  800d10:	defff904 	addi	sp,sp,-28
  800d14:	d8800717 	ldw	r2,28(sp)
  800d18:	d9000015 	stw	r4,0(sp)
  800d1c:	d809883a 	mov	r4,sp
  800d20:	dfc00515 	stw	ra,20(sp)
  800d24:	d9c00615 	stw	r7,24(sp)
  800d28:	d9400115 	stw	r5,4(sp)
  800d2c:	d9800215 	stw	r6,8(sp)
  800d30:	d9c00315 	stw	r7,12(sp)
  800d34:	d8800415 	stw	r2,16(sp)
  800d38:	08010d80 	call	8010d8 <__pack_d>
  800d3c:	dfc00517 	ldw	ra,20(sp)
  800d40:	dec00704 	addi	sp,sp,28
  800d44:	f800283a 	ret

00800d48 <__truncdfsf2>:
  800d48:	defff804 	addi	sp,sp,-32
  800d4c:	d9000515 	stw	r4,20(sp)
  800d50:	d9400615 	stw	r5,24(sp)
  800d54:	d9000504 	addi	r4,sp,20
  800d58:	d80b883a 	mov	r5,sp
  800d5c:	dfc00715 	stw	ra,28(sp)
  800d60:	08012fc0 	call	8012fc <__unpack_d>
  800d64:	d8800317 	ldw	r2,12(sp)
  800d68:	d8c00417 	ldw	r3,16(sp)
  800d6c:	01100034 	movhi	r4,16384
  800d70:	213fffc4 	addi	r4,r4,-1
  800d74:	100ed7ba 	srli	r7,r2,30
  800d78:	180690ba 	slli	r3,r3,2
  800d7c:	1104703a 	and	r2,r2,r4
  800d80:	19ceb03a 	or	r7,r3,r7
  800d84:	10000126 	beq	r2,zero,800d8c <__truncdfsf2+0x44>
  800d88:	39c00054 	ori	r7,r7,1
  800d8c:	d9000017 	ldw	r4,0(sp)
  800d90:	d9400117 	ldw	r5,4(sp)
  800d94:	d9800217 	ldw	r6,8(sp)
  800d98:	08010ac0 	call	8010ac <__make_fp>
  800d9c:	dfc00717 	ldw	ra,28(sp)
  800da0:	dec00804 	addi	sp,sp,32
  800da4:	f800283a 	ret

00800da8 <__muldi3>:
  800da8:	defff604 	addi	sp,sp,-40
  800dac:	dd400515 	stw	r21,20(sp)
  800db0:	dd000415 	stw	r20,16(sp)
  800db4:	257fffcc 	andi	r21,r4,65535
  800db8:	353fffcc 	andi	r20,r6,65535
  800dbc:	dcc00315 	stw	r19,12(sp)
  800dc0:	3026d43a 	srli	r19,r6,16
  800dc4:	dd800615 	stw	r22,24(sp)
  800dc8:	dc800215 	stw	r18,8(sp)
  800dcc:	dc400115 	stw	r17,4(sp)
  800dd0:	2024d43a 	srli	r18,r4,16
  800dd4:	2023883a 	mov	r17,r4
  800dd8:	282d883a 	mov	r22,r5
  800ddc:	a009883a 	mov	r4,r20
  800de0:	a80b883a 	mov	r5,r21
  800de4:	dfc00915 	stw	ra,36(sp)
  800de8:	df000815 	stw	fp,32(sp)
  800dec:	ddc00715 	stw	r23,28(sp)
  800df0:	3839883a 	mov	fp,r7
  800df4:	dc000015 	stw	r16,0(sp)
  800df8:	3021883a 	mov	r16,r6
  800dfc:	08014000 	call	801400 <__mulsi3>
  800e00:	a80b883a 	mov	r5,r21
  800e04:	9809883a 	mov	r4,r19
  800e08:	102f883a 	mov	r23,r2
  800e0c:	08014000 	call	801400 <__mulsi3>
  800e10:	a009883a 	mov	r4,r20
  800e14:	900b883a 	mov	r5,r18
  800e18:	102b883a 	mov	r21,r2
  800e1c:	08014000 	call	801400 <__mulsi3>
  800e20:	9809883a 	mov	r4,r19
  800e24:	900b883a 	mov	r5,r18
  800e28:	1029883a 	mov	r20,r2
  800e2c:	08014000 	call	801400 <__mulsi3>
  800e30:	1007883a 	mov	r3,r2
  800e34:	b804d43a 	srli	r2,r23,16
  800e38:	a549883a 	add	r4,r20,r21
  800e3c:	2089883a 	add	r4,r4,r2
  800e40:	2500022e 	bgeu	r4,r20,800e4c <__muldi3+0xa4>
  800e44:	00800074 	movhi	r2,1
  800e48:	1887883a 	add	r3,r3,r2
  800e4c:	200cd43a 	srli	r6,r4,16
  800e50:	2004943a 	slli	r2,r4,16
  800e54:	e00b883a 	mov	r5,fp
  800e58:	8809883a 	mov	r4,r17
  800e5c:	bdffffcc 	andi	r23,r23,65535
  800e60:	19a3883a 	add	r17,r3,r6
  800e64:	15ef883a 	add	r23,r2,r23
  800e68:	08014000 	call	801400 <__mulsi3>
  800e6c:	8009883a 	mov	r4,r16
  800e70:	b00b883a 	mov	r5,r22
  800e74:	1025883a 	mov	r18,r2
  800e78:	08014000 	call	801400 <__mulsi3>
  800e7c:	9085883a 	add	r2,r18,r2
  800e80:	1447883a 	add	r3,r2,r17
  800e84:	b805883a 	mov	r2,r23
  800e88:	dfc00917 	ldw	ra,36(sp)
  800e8c:	df000817 	ldw	fp,32(sp)
  800e90:	ddc00717 	ldw	r23,28(sp)
  800e94:	dd800617 	ldw	r22,24(sp)
  800e98:	dd400517 	ldw	r21,20(sp)
  800e9c:	dd000417 	ldw	r20,16(sp)
  800ea0:	dcc00317 	ldw	r19,12(sp)
  800ea4:	dc800217 	ldw	r18,8(sp)
  800ea8:	dc400117 	ldw	r17,4(sp)
  800eac:	dc000017 	ldw	r16,0(sp)
  800eb0:	dec00a04 	addi	sp,sp,40
  800eb4:	f800283a 	ret

00800eb8 <__pack_f>:
  800eb8:	21400017 	ldw	r5,0(r4)
  800ebc:	01800044 	movi	r6,1
  800ec0:	20c00317 	ldw	r3,12(r4)
  800ec4:	21c00117 	ldw	r7,4(r4)
  800ec8:	3140282e 	bgeu	r6,r5,800f6c <__pack_f+0xb4>
  800ecc:	00800104 	movi	r2,4
  800ed0:	28802326 	beq	r5,r2,800f60 <__pack_f+0xa8>
  800ed4:	00800084 	movi	r2,2
  800ed8:	28800f26 	beq	r5,r2,800f18 <__pack_f+0x60>
  800edc:	18000e26 	beq	r3,zero,800f18 <__pack_f+0x60>
  800ee0:	21000217 	ldw	r4,8(r4)
  800ee4:	00bfe084 	movi	r2,-126
  800ee8:	20802616 	blt	r4,r2,800f84 <__pack_f+0xcc>
  800eec:	00801fc4 	movi	r2,127
  800ef0:	11001b16 	blt	r2,r4,800f60 <__pack_f+0xa8>
  800ef4:	188a703a 	and	r5,r3,r2
  800ef8:	00801004 	movi	r2,64
  800efc:	28801126 	beq	r5,r2,800f44 <__pack_f+0x8c>
  800f00:	18c00fc4 	addi	r3,r3,63
  800f04:	18001316 	blt	r3,zero,800f54 <__pack_f+0x9c>
  800f08:	21001fc4 	addi	r4,r4,127
  800f0c:	180690ba 	slli	r3,r3,2
  800f10:	1806d27a 	srli	r3,r3,9
  800f14:	00000206 	br	800f20 <__pack_f+0x68>
  800f18:	0009883a 	mov	r4,zero
  800f1c:	0007883a 	mov	r3,zero
  800f20:	21003fcc 	andi	r4,r4,255
  800f24:	200895fa 	slli	r4,r4,23
  800f28:	380a97fa 	slli	r5,r7,31
  800f2c:	00802034 	movhi	r2,128
  800f30:	10bfffc4 	addi	r2,r2,-1
  800f34:	1886703a 	and	r3,r3,r2
  800f38:	1904b03a 	or	r2,r3,r4
  800f3c:	1144b03a 	or	r2,r2,r5
  800f40:	f800283a 	ret
  800f44:	1880200c 	andi	r2,r3,128
  800f48:	103fee26 	beq	r2,zero,800f04 <__pack_f+0x4c>
  800f4c:	18c01004 	addi	r3,r3,64
  800f50:	183fed0e 	bge	r3,zero,800f08 <__pack_f+0x50>
  800f54:	1806d07a 	srli	r3,r3,1
  800f58:	21002004 	addi	r4,r4,128
  800f5c:	003feb06 	br	800f0c <__pack_f+0x54>
  800f60:	013fffc4 	movi	r4,-1
  800f64:	0007883a 	mov	r3,zero
  800f68:	003fed06 	br	800f20 <__pack_f+0x68>
  800f6c:	18c00434 	orhi	r3,r3,16
  800f70:	00802034 	movhi	r2,128
  800f74:	10bfffc4 	addi	r2,r2,-1
  800f78:	1886703a 	and	r3,r3,r2
  800f7c:	013fffc4 	movi	r4,-1
  800f80:	003fe706 	br	800f20 <__pack_f+0x68>
  800f84:	1105c83a 	sub	r2,r2,r4
  800f88:	01000644 	movi	r4,25
  800f8c:	20801216 	blt	r4,r2,800fd8 <__pack_f+0x120>
  800f90:	3088983a 	sll	r4,r6,r2
  800f94:	1884d83a 	srl	r2,r3,r2
  800f98:	213fffc4 	addi	r4,r4,-1
  800f9c:	20c6703a 	and	r3,r4,r3
  800fa0:	1806c03a 	cmpne	r3,r3,zero
  800fa4:	1884b03a 	or	r2,r3,r2
  800fa8:	11001fcc 	andi	r4,r2,127
  800fac:	00c01004 	movi	r3,64
  800fb0:	20c00a1e 	bne	r4,r3,800fdc <__pack_f+0x124>
  800fb4:	10c0200c 	andi	r3,r2,128
  800fb8:	18000126 	beq	r3,zero,800fc0 <__pack_f+0x108>
  800fbc:	10801004 	addi	r2,r2,64
  800fc0:	100690ba 	slli	r3,r2,2
  800fc4:	01100034 	movhi	r4,16384
  800fc8:	1105403a 	cmpgeu	r2,r2,r4
  800fcc:	1806d27a 	srli	r3,r3,9
  800fd0:	1009883a 	mov	r4,r2
  800fd4:	003fd206 	br	800f20 <__pack_f+0x68>
  800fd8:	0005883a 	mov	r2,zero
  800fdc:	10800fc4 	addi	r2,r2,63
  800fe0:	003ff706 	br	800fc0 <__pack_f+0x108>

00800fe4 <__unpack_f>:
  800fe4:	20c00017 	ldw	r3,0(r4)
  800fe8:	00802034 	movhi	r2,128
  800fec:	10bfffc4 	addi	r2,r2,-1
  800ff0:	1808d5fa 	srli	r4,r3,23
  800ff4:	180cd7fa 	srli	r6,r3,31
  800ff8:	1884703a 	and	r2,r3,r2
  800ffc:	21003fcc 	andi	r4,r4,255
  801000:	29800115 	stw	r6,4(r5)
  801004:	2000111e 	bne	r4,zero,80104c <__unpack_f+0x68>
  801008:	10001a26 	beq	r2,zero,801074 <__unpack_f+0x90>
  80100c:	00ffe084 	movi	r3,-126
  801010:	100491fa 	slli	r2,r2,7
  801014:	28c00215 	stw	r3,8(r5)
  801018:	00c000c4 	movi	r3,3
  80101c:	28c00015 	stw	r3,0(r5)
  801020:	01900034 	movhi	r6,16384
  801024:	31bfffc4 	addi	r6,r6,-1
  801028:	30801036 	bltu	r6,r2,80106c <__unpack_f+0x88>
  80102c:	00ffe044 	movi	r3,-127
  801030:	1085883a 	add	r2,r2,r2
  801034:	1809883a 	mov	r4,r3
  801038:	18ffffc4 	addi	r3,r3,-1
  80103c:	30bffc2e 	bgeu	r6,r2,801030 <__unpack_f+0x4c>
  801040:	29000215 	stw	r4,8(r5)
  801044:	28800315 	stw	r2,12(r5)
  801048:	f800283a 	ret
  80104c:	01803fc4 	movi	r6,255
  801050:	21800b26 	beq	r4,r6,801080 <__unpack_f+0x9c>
  801054:	100491fa 	slli	r2,r2,7
  801058:	213fe044 	addi	r4,r4,-127
  80105c:	00c000c4 	movi	r3,3
  801060:	10900034 	orhi	r2,r2,16384
  801064:	29000215 	stw	r4,8(r5)
  801068:	28c00015 	stw	r3,0(r5)
  80106c:	28800315 	stw	r2,12(r5)
  801070:	f800283a 	ret
  801074:	00800084 	movi	r2,2
  801078:	28800015 	stw	r2,0(r5)
  80107c:	f800283a 	ret
  801080:	10000526 	beq	r2,zero,801098 <__unpack_f+0xb4>
  801084:	18c0042c 	andhi	r3,r3,16
  801088:	18000626 	beq	r3,zero,8010a4 <__unpack_f+0xc0>
  80108c:	00c00044 	movi	r3,1
  801090:	28c00015 	stw	r3,0(r5)
  801094:	003ff506 	br	80106c <__unpack_f+0x88>
  801098:	00800104 	movi	r2,4
  80109c:	28800015 	stw	r2,0(r5)
  8010a0:	f800283a 	ret
  8010a4:	28000015 	stw	zero,0(r5)
  8010a8:	003ff006 	br	80106c <__unpack_f+0x88>

008010ac <__make_fp>:
  8010ac:	defffb04 	addi	sp,sp,-20
  8010b0:	d9000015 	stw	r4,0(sp)
  8010b4:	d809883a 	mov	r4,sp
  8010b8:	dfc00415 	stw	ra,16(sp)
  8010bc:	d9400115 	stw	r5,4(sp)
  8010c0:	d9800215 	stw	r6,8(sp)
  8010c4:	d9c00315 	stw	r7,12(sp)
  8010c8:	0800eb80 	call	800eb8 <__pack_f>
  8010cc:	dfc00417 	ldw	ra,16(sp)
  8010d0:	dec00504 	addi	sp,sp,20
  8010d4:	f800283a 	ret

008010d8 <__pack_d>:
  8010d8:	20800017 	ldw	r2,0(r4)
  8010dc:	defff804 	addi	sp,sp,-32
  8010e0:	dcc00315 	stw	r19,12(sp)
  8010e4:	dc800215 	stw	r18,8(sp)
  8010e8:	dfc00715 	stw	ra,28(sp)
  8010ec:	dd800615 	stw	r22,24(sp)
  8010f0:	dd400515 	stw	r21,20(sp)
  8010f4:	dd000415 	stw	r20,16(sp)
  8010f8:	dc400115 	stw	r17,4(sp)
  8010fc:	dc000015 	stw	r16,0(sp)
  801100:	04800044 	movi	r18,1
  801104:	24400317 	ldw	r17,12(r4)
  801108:	24000417 	ldw	r16,16(r4)
  80110c:	24c00117 	ldw	r19,4(r4)
  801110:	9080422e 	bgeu	r18,r2,80121c <__pack_d+0x144>
  801114:	00c00104 	movi	r3,4
  801118:	10c03c26 	beq	r2,r3,80120c <__pack_d+0x134>
  80111c:	00c00084 	movi	r3,2
  801120:	10c01926 	beq	r2,r3,801188 <__pack_d+0xb0>
  801124:	8c04b03a 	or	r2,r17,r16
  801128:	10001726 	beq	r2,zero,801188 <__pack_d+0xb0>
  80112c:	21000217 	ldw	r4,8(r4)
  801130:	00bf0084 	movi	r2,-1022
  801134:	20804016 	blt	r4,r2,801238 <__pack_d+0x160>
  801138:	0080ffc4 	movi	r2,1023
  80113c:	11003316 	blt	r2,r4,80120c <__pack_d+0x134>
  801140:	88803fcc 	andi	r2,r17,255
  801144:	00c02004 	movi	r3,128
  801148:	10c02926 	beq	r2,r3,8011f0 <__pack_d+0x118>
  80114c:	88801fc4 	addi	r2,r17,127
  801150:	1463803a 	cmpltu	r17,r2,r17
  801154:	8c21883a 	add	r16,r17,r16
  801158:	1023883a 	mov	r17,r2
  80115c:	00880034 	movhi	r2,8192
  801160:	10bfffc4 	addi	r2,r2,-1
  801164:	14001c36 	bltu	r2,r16,8011d8 <__pack_d+0x100>
  801168:	2100ffc4 	addi	r4,r4,1023
  80116c:	8006963a 	slli	r3,r16,24
  801170:	8804d23a 	srli	r2,r17,8
  801174:	8020913a 	slli	r16,r16,4
  801178:	2101ffcc 	andi	r4,r4,2047
  80117c:	1884b03a 	or	r2,r3,r2
  801180:	8020d33a 	srli	r16,r16,12
  801184:	00000306 	br	801194 <__pack_d+0xbc>
  801188:	0009883a 	mov	r4,zero
  80118c:	0005883a 	mov	r2,zero
  801190:	0021883a 	mov	r16,zero
  801194:	2008953a 	slli	r4,r4,20
  801198:	982697fa 	slli	r19,r19,31
  80119c:	00c00434 	movhi	r3,16
  8011a0:	18ffffc4 	addi	r3,r3,-1
  8011a4:	80e0703a 	and	r16,r16,r3
  8011a8:	8106b03a 	or	r3,r16,r4
  8011ac:	1cc6b03a 	or	r3,r3,r19
  8011b0:	dfc00717 	ldw	ra,28(sp)
  8011b4:	dd800617 	ldw	r22,24(sp)
  8011b8:	dd400517 	ldw	r21,20(sp)
  8011bc:	dd000417 	ldw	r20,16(sp)
  8011c0:	dcc00317 	ldw	r19,12(sp)
  8011c4:	dc800217 	ldw	r18,8(sp)
  8011c8:	dc400117 	ldw	r17,4(sp)
  8011cc:	dc000017 	ldw	r16,0(sp)
  8011d0:	dec00804 	addi	sp,sp,32
  8011d4:	f800283a 	ret
  8011d8:	800697fa 	slli	r3,r16,31
  8011dc:	8804d07a 	srli	r2,r17,1
  8011e0:	21010004 	addi	r4,r4,1024
  8011e4:	8020d07a 	srli	r16,r16,1
  8011e8:	18a2b03a 	or	r17,r3,r2
  8011ec:	003fdf06 	br	80116c <__pack_d+0x94>
  8011f0:	88c0400c 	andi	r3,r17,256
  8011f4:	183fd926 	beq	r3,zero,80115c <__pack_d+0x84>
  8011f8:	8885883a 	add	r2,r17,r2
  8011fc:	1463803a 	cmpltu	r17,r2,r17
  801200:	8c21883a 	add	r16,r17,r16
  801204:	1023883a 	mov	r17,r2
  801208:	003fd406 	br	80115c <__pack_d+0x84>
  80120c:	0101ffc4 	movi	r4,2047
  801210:	0005883a 	mov	r2,zero
  801214:	0021883a 	mov	r16,zero
  801218:	003fde06 	br	801194 <__pack_d+0xbc>
  80121c:	84000234 	orhi	r16,r16,8
  801220:	00c00434 	movhi	r3,16
  801224:	18ffffc4 	addi	r3,r3,-1
  801228:	8805883a 	mov	r2,r17
  80122c:	80e0703a 	and	r16,r16,r3
  801230:	0101ffc4 	movi	r4,2047
  801234:	003fd706 	br	801194 <__pack_d+0xbc>
  801238:	1129c83a 	sub	r20,r2,r4
  80123c:	00800e04 	movi	r2,56
  801240:	15002716 	blt	r2,r20,8012e0 <__pack_d+0x208>
  801244:	800b883a 	mov	r5,r16
  801248:	a00d883a 	mov	r6,r20
  80124c:	8809883a 	mov	r4,r17
  801250:	08014280 	call	801428 <__lshrdi3>
  801254:	9009883a 	mov	r4,r18
  801258:	000b883a 	mov	r5,zero
  80125c:	a00d883a 	mov	r6,r20
  801260:	102d883a 	mov	r22,r2
  801264:	182b883a 	mov	r21,r3
  801268:	080146c0 	call	80146c <__ashldi3>
  80126c:	1009003a 	cmpeq	r4,r2,zero
  801270:	1907c83a 	sub	r3,r3,r4
  801274:	10bfffc4 	addi	r2,r2,-1
  801278:	1c20703a 	and	r16,r3,r16
  80127c:	1444703a 	and	r2,r2,r17
  801280:	1404b03a 	or	r2,r2,r16
  801284:	1004c03a 	cmpne	r2,r2,zero
  801288:	1584b03a 	or	r2,r2,r22
  80128c:	11003fcc 	andi	r4,r2,255
  801290:	01402004 	movi	r5,128
  801294:	a807883a 	mov	r3,r21
  801298:	2140131e 	bne	r4,r5,8012e8 <__pack_d+0x210>
  80129c:	1140400c 	andi	r5,r2,256
  8012a0:	28000426 	beq	r5,zero,8012b4 <__pack_d+0x1dc>
  8012a4:	1109883a 	add	r4,r2,r4
  8012a8:	2085803a 	cmpltu	r2,r4,r2
  8012ac:	1547883a 	add	r3,r2,r21
  8012b0:	2005883a 	mov	r2,r4
  8012b4:	1808963a 	slli	r4,r3,24
  8012b8:	1004d23a 	srli	r2,r2,8
  8012bc:	1820913a 	slli	r16,r3,4
  8012c0:	01440034 	movhi	r5,4096
  8012c4:	297fffc4 	addi	r5,r5,-1
  8012c8:	2084b03a 	or	r2,r4,r2
  8012cc:	8020d33a 	srli	r16,r16,12
  8012d0:	01000044 	movi	r4,1
  8012d4:	28ffaf36 	bltu	r5,r3,801194 <__pack_d+0xbc>
  8012d8:	0009883a 	mov	r4,zero
  8012dc:	003fad06 	br	801194 <__pack_d+0xbc>
  8012e0:	0005883a 	mov	r2,zero
  8012e4:	0007883a 	mov	r3,zero
  8012e8:	11001fc4 	addi	r4,r2,127
  8012ec:	2085803a 	cmpltu	r2,r4,r2
  8012f0:	10c7883a 	add	r3,r2,r3
  8012f4:	2005883a 	mov	r2,r4
  8012f8:	003fee06 	br	8012b4 <__pack_d+0x1dc>

008012fc <__unpack_d>:
  8012fc:	21800117 	ldw	r6,4(r4)
  801300:	20c00017 	ldw	r3,0(r4)
  801304:	3004d7fa 	srli	r2,r6,31
  801308:	3008d53a 	srli	r4,r6,20
  80130c:	28800115 	stw	r2,4(r5)
  801310:	2101ffcc 	andi	r4,r4,2047
  801314:	00800434 	movhi	r2,16
  801318:	10bfffc4 	addi	r2,r2,-1
  80131c:	3084703a 	and	r2,r6,r2
  801320:	20001a1e 	bne	r4,zero,80138c <__unpack_d+0x90>
  801324:	1888b03a 	or	r4,r3,r2
  801328:	20002626 	beq	r4,zero,8013c4 <__unpack_d+0xc8>
  80132c:	1808d63a 	srli	r4,r3,24
  801330:	1004923a 	slli	r2,r2,8
  801334:	01bf0084 	movi	r6,-1022
  801338:	29800215 	stw	r6,8(r5)
  80133c:	2084b03a 	or	r2,r4,r2
  801340:	010000c4 	movi	r4,3
  801344:	29000015 	stw	r4,0(r5)
  801348:	02040034 	movhi	r8,4096
  80134c:	423fffc4 	addi	r8,r8,-1
  801350:	1806923a 	slli	r3,r3,8
  801354:	40801836 	bltu	r8,r2,8013b8 <__unpack_d+0xbc>
  801358:	013f0044 	movi	r4,-1023
  80135c:	18cd883a 	add	r6,r3,r3
  801360:	30c7803a 	cmpltu	r3,r6,r3
  801364:	1085883a 	add	r2,r2,r2
  801368:	1885883a 	add	r2,r3,r2
  80136c:	200f883a 	mov	r7,r4
  801370:	3007883a 	mov	r3,r6
  801374:	213fffc4 	addi	r4,r4,-1
  801378:	40bff82e 	bgeu	r8,r2,80135c <__unpack_d+0x60>
  80137c:	29c00215 	stw	r7,8(r5)
  801380:	28c00315 	stw	r3,12(r5)
  801384:	28800415 	stw	r2,16(r5)
  801388:	f800283a 	ret
  80138c:	01c1ffc4 	movi	r7,2047
  801390:	21c00f26 	beq	r4,r7,8013d0 <__unpack_d+0xd4>
  801394:	180cd63a 	srli	r6,r3,24
  801398:	1004923a 	slli	r2,r2,8
  80139c:	213f0044 	addi	r4,r4,-1023
  8013a0:	1806923a 	slli	r3,r3,8
  8013a4:	3084b03a 	or	r2,r6,r2
  8013a8:	29000215 	stw	r4,8(r5)
  8013ac:	010000c4 	movi	r4,3
  8013b0:	10840034 	orhi	r2,r2,4096
  8013b4:	29000015 	stw	r4,0(r5)
  8013b8:	28c00315 	stw	r3,12(r5)
  8013bc:	28800415 	stw	r2,16(r5)
  8013c0:	f800283a 	ret
  8013c4:	00800084 	movi	r2,2
  8013c8:	28800015 	stw	r2,0(r5)
  8013cc:	f800283a 	ret
  8013d0:	1888b03a 	or	r4,r3,r2
  8013d4:	20000526 	beq	r4,zero,8013ec <__unpack_d+0xf0>
  8013d8:	3180022c 	andhi	r6,r6,8
  8013dc:	30000626 	beq	r6,zero,8013f8 <__unpack_d+0xfc>
  8013e0:	01000044 	movi	r4,1
  8013e4:	29000015 	stw	r4,0(r5)
  8013e8:	003ff306 	br	8013b8 <__unpack_d+0xbc>
  8013ec:	00800104 	movi	r2,4
  8013f0:	28800015 	stw	r2,0(r5)
  8013f4:	f800283a 	ret
  8013f8:	28000015 	stw	zero,0(r5)
  8013fc:	003fee06 	br	8013b8 <__unpack_d+0xbc>

00801400 <__mulsi3>:
  801400:	0005883a 	mov	r2,zero
  801404:	20000726 	beq	r4,zero,801424 <__mulsi3+0x24>
  801408:	20c0004c 	andi	r3,r4,1
  80140c:	2008d07a 	srli	r4,r4,1
  801410:	18000126 	beq	r3,zero,801418 <__mulsi3+0x18>
  801414:	1145883a 	add	r2,r2,r5
  801418:	294b883a 	add	r5,r5,r5
  80141c:	203ffa1e 	bne	r4,zero,801408 <__mulsi3+0x8>
  801420:	f800283a 	ret
  801424:	f800283a 	ret

00801428 <__lshrdi3>:
  801428:	2005883a 	mov	r2,r4
  80142c:	2807883a 	mov	r3,r5
  801430:	30000826 	beq	r6,zero,801454 <__lshrdi3+0x2c>
  801434:	01000804 	movi	r4,32
  801438:	2189c83a 	sub	r4,r4,r6
  80143c:	0100060e 	bge	zero,r4,801458 <__lshrdi3+0x30>
  801440:	1184d83a 	srl	r2,r2,r6
  801444:	2908983a 	sll	r4,r5,r4
  801448:	298cd83a 	srl	r6,r5,r6
  80144c:	2084b03a 	or	r2,r4,r2
  801450:	3007883a 	mov	r3,r6
  801454:	f800283a 	ret
  801458:	0105c83a 	sub	r2,zero,r4
  80145c:	000d883a 	mov	r6,zero
  801460:	2884d83a 	srl	r2,r5,r2
  801464:	3007883a 	mov	r3,r6
  801468:	003ffa06 	br	801454 <__lshrdi3+0x2c>

0080146c <__ashldi3>:
  80146c:	2005883a 	mov	r2,r4
  801470:	2807883a 	mov	r3,r5
  801474:	30000826 	beq	r6,zero,801498 <__ashldi3+0x2c>
  801478:	01000804 	movi	r4,32
  80147c:	2189c83a 	sub	r4,r4,r6
  801480:	0100060e 	bge	zero,r4,80149c <__ashldi3+0x30>
  801484:	1108d83a 	srl	r4,r2,r4
  801488:	2986983a 	sll	r3,r5,r6
  80148c:	118c983a 	sll	r6,r2,r6
  801490:	20c6b03a 	or	r3,r4,r3
  801494:	3005883a 	mov	r2,r6
  801498:	f800283a 	ret
  80149c:	0107c83a 	sub	r3,zero,r4
  8014a0:	000d883a 	mov	r6,zero
  8014a4:	10c6983a 	sll	r3,r2,r3
  8014a8:	3005883a 	mov	r2,r6
  8014ac:	003ffa06 	br	801498 <__ashldi3+0x2c>

008014b0 <_printf_r>:
  8014b0:	defffd04 	addi	sp,sp,-12
  8014b4:	dfc00015 	stw	ra,0(sp)
  8014b8:	d9800115 	stw	r6,4(sp)
  8014bc:	d9c00215 	stw	r7,8(sp)
  8014c0:	20800217 	ldw	r2,8(r4)
  8014c4:	00c02034 	movhi	r3,128
  8014c8:	18c72404 	addi	r3,r3,7312
  8014cc:	280d883a 	mov	r6,r5
  8014d0:	10c00115 	stw	r3,4(r2)
  8014d4:	100b883a 	mov	r5,r2
  8014d8:	d9c00104 	addi	r7,sp,4
  8014dc:	08015380 	call	801538 <___vfprintf_internal_r>
  8014e0:	dfc00017 	ldw	ra,0(sp)
  8014e4:	dec00304 	addi	sp,sp,12
  8014e8:	f800283a 	ret

008014ec <printf>:
  8014ec:	defffc04 	addi	sp,sp,-16
  8014f0:	dfc00015 	stw	ra,0(sp)
  8014f4:	d9400115 	stw	r5,4(sp)
  8014f8:	d9800215 	stw	r6,8(sp)
  8014fc:	d9c00315 	stw	r7,12(sp)
  801500:	00802034 	movhi	r2,128
  801504:	108f4e04 	addi	r2,r2,15672
  801508:	10800017 	ldw	r2,0(r2)
  80150c:	00c02034 	movhi	r3,128
  801510:	18c72404 	addi	r3,r3,7312
  801514:	200b883a 	mov	r5,r4
  801518:	10800217 	ldw	r2,8(r2)
  80151c:	d9800104 	addi	r6,sp,4
  801520:	10c00115 	stw	r3,4(r2)
  801524:	1009883a 	mov	r4,r2
  801528:	0801c6c0 	call	801c6c <__vfprintf_internal>
  80152c:	dfc00017 	ldw	ra,0(sp)
  801530:	dec00404 	addi	sp,sp,16
  801534:	f800283a 	ret

00801538 <___vfprintf_internal_r>:
  801538:	deffe004 	addi	sp,sp,-128
  80153c:	d8c00804 	addi	r3,sp,32
  801540:	ddc01d15 	stw	r23,116(sp)
  801544:	dd401b15 	stw	r21,108(sp)
  801548:	dd001a15 	stw	r20,104(sp)
  80154c:	dcc01915 	stw	r19,100(sp)
  801550:	dc801815 	stw	r18,96(sp)
  801554:	dc001615 	stw	r16,88(sp)
  801558:	dfc01f15 	stw	ra,124(sp)
  80155c:	df001e15 	stw	fp,120(sp)
  801560:	dd801c15 	stw	r22,112(sp)
  801564:	dc401715 	stw	r17,92(sp)
  801568:	d9000f15 	stw	r4,60(sp)
  80156c:	d9c00e15 	stw	r7,56(sp)
  801570:	3021883a 	mov	r16,r6
  801574:	0025883a 	mov	r18,zero
  801578:	d8001415 	stw	zero,80(sp)
  80157c:	d8000d15 	stw	zero,52(sp)
  801580:	0029883a 	mov	r20,zero
  801584:	d8000b15 	stw	zero,44(sp)
  801588:	d8000c15 	stw	zero,48(sp)
  80158c:	d8001315 	stw	zero,76(sp)
  801590:	d8001015 	stw	zero,64(sp)
  801594:	002b883a 	mov	r21,zero
  801598:	04c00044 	movi	r19,1
  80159c:	d8c00a15 	stw	r3,40(sp)
  8015a0:	282f883a 	mov	r23,r5
  8015a4:	80c00003 	ldbu	r3,0(r16)
  8015a8:	84000044 	addi	r16,r16,1
  8015ac:	18803fcc 	andi	r2,r3,255
  8015b0:	1080201c 	xori	r2,r2,128
  8015b4:	10bfe004 	addi	r2,r2,-128
  8015b8:	10001426 	beq	r2,zero,80160c <___vfprintf_internal_r+0xd4>
  8015bc:	acc03026 	beq	r21,r19,801680 <___vfprintf_internal_r+0x148>
  8015c0:	9d401f16 	blt	r19,r21,801640 <___vfprintf_internal_r+0x108>
  8015c4:	a83ff71e 	bne	r21,zero,8015a4 <___vfprintf_internal_r+0x6c>
  8015c8:	01000944 	movi	r4,37
  8015cc:	1100d926 	beq	r2,r4,801934 <___vfprintf_internal_r+0x3fc>
  8015d0:	b8800117 	ldw	r2,4(r23)
  8015d4:	d9000f17 	ldw	r4,60(sp)
  8015d8:	d8c00905 	stb	r3,36(sp)
  8015dc:	b80b883a 	mov	r5,r23
  8015e0:	d9800904 	addi	r6,sp,36
  8015e4:	01c00044 	movi	r7,1
  8015e8:	103ee83a 	callr	r2
  8015ec:	1000a31e 	bne	r2,zero,80187c <___vfprintf_internal_r+0x344>
  8015f0:	80c00003 	ldbu	r3,0(r16)
  8015f4:	94800044 	addi	r18,r18,1
  8015f8:	84000044 	addi	r16,r16,1
  8015fc:	18803fcc 	andi	r2,r3,255
  801600:	1080201c 	xori	r2,r2,128
  801604:	10bfe004 	addi	r2,r2,-128
  801608:	103fec1e 	bne	r2,zero,8015bc <___vfprintf_internal_r+0x84>
  80160c:	9005883a 	mov	r2,r18
  801610:	dfc01f17 	ldw	ra,124(sp)
  801614:	df001e17 	ldw	fp,120(sp)
  801618:	ddc01d17 	ldw	r23,116(sp)
  80161c:	dd801c17 	ldw	r22,112(sp)
  801620:	dd401b17 	ldw	r21,108(sp)
  801624:	dd001a17 	ldw	r20,104(sp)
  801628:	dcc01917 	ldw	r19,100(sp)
  80162c:	dc801817 	ldw	r18,96(sp)
  801630:	dc401717 	ldw	r17,92(sp)
  801634:	dc001617 	ldw	r16,88(sp)
  801638:	dec02004 	addi	sp,sp,128
  80163c:	f800283a 	ret
  801640:	01000084 	movi	r4,2
  801644:	a9001226 	beq	r21,r4,801690 <___vfprintf_internal_r+0x158>
  801648:	010000c4 	movi	r4,3
  80164c:	a93fd51e 	bne	r21,r4,8015a4 <___vfprintf_internal_r+0x6c>
  801650:	1c7ff404 	addi	r17,r3,-48
  801654:	8c403fcc 	andi	r17,r17,255
  801658:	01000244 	movi	r4,9
  80165c:	24401b36 	bltu	r4,r17,8016cc <___vfprintf_internal_r+0x194>
  801660:	d9000b17 	ldw	r4,44(sp)
  801664:	00bfffc4 	movi	r2,-1
  801668:	2080ea26 	beq	r4,r2,801a14 <___vfprintf_internal_r+0x4dc>
  80166c:	01400284 	movi	r5,10
  801670:	08014000 	call	801400 <__mulsi3>
  801674:	88a3883a 	add	r17,r17,r2
  801678:	dc400b15 	stw	r17,44(sp)
  80167c:	003fc906 	br	8015a4 <___vfprintf_internal_r+0x6c>
  801680:	01000c04 	movi	r4,48
  801684:	1100de26 	beq	r2,r4,801a00 <___vfprintf_internal_r+0x4c8>
  801688:	01000944 	movi	r4,37
  80168c:	1100fd26 	beq	r2,r4,801a84 <___vfprintf_internal_r+0x54c>
  801690:	1c7ff404 	addi	r17,r3,-48
  801694:	8c403fcc 	andi	r17,r17,255
  801698:	01000244 	movi	r4,9
  80169c:	24400936 	bltu	r4,r17,8016c4 <___vfprintf_internal_r+0x18c>
  8016a0:	d9000c17 	ldw	r4,48(sp)
  8016a4:	00bfffc4 	movi	r2,-1
  8016a8:	2080d826 	beq	r4,r2,801a0c <___vfprintf_internal_r+0x4d4>
  8016ac:	01400284 	movi	r5,10
  8016b0:	08014000 	call	801400 <__mulsi3>
  8016b4:	88a3883a 	add	r17,r17,r2
  8016b8:	dc400c15 	stw	r17,48(sp)
  8016bc:	05400084 	movi	r21,2
  8016c0:	003fb806 	br	8015a4 <___vfprintf_internal_r+0x6c>
  8016c4:	01000b84 	movi	r4,46
  8016c8:	1100a726 	beq	r2,r4,801968 <___vfprintf_internal_r+0x430>
  8016cc:	01401b04 	movi	r5,108
  8016d0:	1140a326 	beq	r2,r5,801960 <___vfprintf_internal_r+0x428>
  8016d4:	d9000b17 	ldw	r4,44(sp)
  8016d8:	00bfffc4 	movi	r2,-1
  8016dc:	2080e626 	beq	r4,r2,801a78 <___vfprintf_internal_r+0x540>
  8016e0:	d8001015 	stw	zero,64(sp)
  8016e4:	18ffea04 	addi	r3,r3,-88
  8016e8:	18c03fcc 	andi	r3,r3,255
  8016ec:	00800804 	movi	r2,32
  8016f0:	10c0022e 	bgeu	r2,r3,8016fc <___vfprintf_internal_r+0x1c4>
  8016f4:	002b883a 	mov	r21,zero
  8016f8:	003faa06 	br	8015a4 <___vfprintf_internal_r+0x6c>
  8016fc:	18c7883a 	add	r3,r3,r3
  801700:	18c7883a 	add	r3,r3,r3
  801704:	01402034 	movhi	r5,128
  801708:	2945c604 	addi	r5,r5,5912
  80170c:	1947883a 	add	r3,r3,r5
  801710:	18800017 	ldw	r2,0(r3)
  801714:	1000683a 	jmp	r2
  801718:	00801ab0 	cmpltui	r2,zero,106
  80171c:	008016f4 	movhi	r2,91
  801720:	008016f4 	movhi	r2,91
  801724:	008016f4 	movhi	r2,91
  801728:	008016f4 	movhi	r2,91
  80172c:	008016f4 	movhi	r2,91
  801730:	008016f4 	movhi	r2,91
  801734:	008016f4 	movhi	r2,91
  801738:	008016f4 	movhi	r2,91
  80173c:	008016f4 	movhi	r2,91
  801740:	008016f4 	movhi	r2,91
  801744:	00801ac0 	call	801ac <__alt_mem_sdram-0x77fe54>
  801748:	0080179c 	xori	r2,zero,94
  80174c:	008016f4 	movhi	r2,91
  801750:	008016f4 	movhi	r2,91
  801754:	008016f4 	movhi	r2,91
  801758:	008016f4 	movhi	r2,91
  80175c:	0080179c 	xori	r2,zero,94
  801760:	008016f4 	movhi	r2,91
  801764:	008016f4 	movhi	r2,91
  801768:	008016f4 	movhi	r2,91
  80176c:	008016f4 	movhi	r2,91
  801770:	008016f4 	movhi	r2,91
  801774:	00801884 	movi	r2,98
  801778:	008016f4 	movhi	r2,91
  80177c:	008016f4 	movhi	r2,91
  801780:	008016f4 	movhi	r2,91
  801784:	00801b0c 	andi	r2,zero,108
  801788:	008016f4 	movhi	r2,91
  80178c:	00801888 	cmpgei	r2,zero,98
  801790:	008016f4 	movhi	r2,91
  801794:	008016f4 	movhi	r2,91
  801798:	00801ab8 	rdprs	r2,zero,106
  80179c:	d8c00d17 	ldw	r3,52(sp)
  8017a0:	18003926 	beq	r3,zero,801888 <___vfprintf_internal_r+0x350>
  8017a4:	d9000e17 	ldw	r4,56(sp)
  8017a8:	00c00044 	movi	r3,1
  8017ac:	25400017 	ldw	r21,0(r4)
  8017b0:	21000104 	addi	r4,r4,4
  8017b4:	d9000e15 	stw	r4,56(sp)
  8017b8:	d8c00d15 	stw	r3,52(sp)
  8017bc:	a8012116 	blt	r21,zero,801c44 <___vfprintf_internal_r+0x70c>
  8017c0:	d8001215 	stw	zero,72(sp)
  8017c4:	d823883a 	mov	r17,sp
  8017c8:	a800371e 	bne	r21,zero,8018a8 <___vfprintf_internal_r+0x370>
  8017cc:	d9400b17 	ldw	r5,44(sp)
  8017d0:	d809883a 	mov	r4,sp
  8017d4:	01400b0e 	bge	zero,r5,801804 <___vfprintf_internal_r+0x2cc>
  8017d8:	d8800b17 	ldw	r2,44(sp)
  8017dc:	d823883a 	mov	r17,sp
  8017e0:	00c00c04 	movi	r3,48
  8017e4:	00000206 	br	8017f0 <___vfprintf_internal_r+0x2b8>
  8017e8:	d9400a17 	ldw	r5,40(sp)
  8017ec:	89400426 	beq	r17,r5,801800 <___vfprintf_internal_r+0x2c8>
  8017f0:	88c00005 	stb	r3,0(r17)
  8017f4:	10bfffc4 	addi	r2,r2,-1
  8017f8:	8c400044 	addi	r17,r17,1
  8017fc:	103ffa1e 	bne	r2,zero,8017e8 <___vfprintf_internal_r+0x2b0>
  801800:	892bc83a 	sub	r21,r17,r4
  801804:	d8c01217 	ldw	r3,72(sp)
  801808:	d9000c17 	ldw	r4,48(sp)
  80180c:	a8c5883a 	add	r2,r21,r3
  801810:	d8c01017 	ldw	r3,64(sp)
  801814:	2085c83a 	sub	r2,r4,r2
  801818:	d8801115 	stw	r2,68(sp)
  80181c:	18007f26 	beq	r3,zero,801a1c <___vfprintf_internal_r+0x4e4>
  801820:	d8c01217 	ldw	r3,72(sp)
  801824:	1800fa1e 	bne	r3,zero,801c10 <___vfprintf_internal_r+0x6d8>
  801828:	d8c01117 	ldw	r3,68(sp)
  80182c:	00c0620e 	bge	zero,r3,8019b8 <___vfprintf_internal_r+0x480>
  801830:	00800c04 	movi	r2,48
  801834:	d88008c5 	stb	r2,35(sp)
  801838:	b805883a 	mov	r2,r23
  80183c:	dc001215 	stw	r16,72(sp)
  801840:	882f883a 	mov	r23,r17
  801844:	1f3fffc4 	addi	fp,r3,-1
  801848:	05bfffc4 	movi	r22,-1
  80184c:	dc000f17 	ldw	r16,60(sp)
  801850:	1023883a 	mov	r17,r2
  801854:	00000206 	br	801860 <___vfprintf_internal_r+0x328>
  801858:	e73fffc4 	addi	fp,fp,-1
  80185c:	e580fc26 	beq	fp,r22,801c50 <___vfprintf_internal_r+0x718>
  801860:	88800117 	ldw	r2,4(r17)
  801864:	8009883a 	mov	r4,r16
  801868:	880b883a 	mov	r5,r17
  80186c:	d98008c4 	addi	r6,sp,35
  801870:	01c00044 	movi	r7,1
  801874:	103ee83a 	callr	r2
  801878:	103ff726 	beq	r2,zero,801858 <___vfprintf_internal_r+0x320>
  80187c:	04bfffc4 	movi	r18,-1
  801880:	003f6206 	br	80160c <___vfprintf_internal_r+0xd4>
  801884:	05000204 	movi	r20,8
  801888:	d9400e17 	ldw	r5,56(sp)
  80188c:	2d400017 	ldw	r21,0(r5)
  801890:	29400104 	addi	r5,r5,4
  801894:	d9400e15 	stw	r5,56(sp)
  801898:	d8000d15 	stw	zero,52(sp)
  80189c:	d8001215 	stw	zero,72(sp)
  8018a0:	d823883a 	mov	r17,sp
  8018a4:	a83fc926 	beq	r21,zero,8017cc <___vfprintf_internal_r+0x294>
  8018a8:	05800244 	movi	r22,9
  8018ac:	dc001115 	stw	r16,68(sp)
  8018b0:	df001417 	ldw	fp,80(sp)
  8018b4:	00000506 	br	8018cc <___vfprintf_internal_r+0x394>
  8018b8:	15400c04 	addi	r21,r2,48
  8018bc:	8d400005 	stb	r21,0(r17)
  8018c0:	802b883a 	mov	r21,r16
  8018c4:	8c400044 	addi	r17,r17,1
  8018c8:	80000f26 	beq	r16,zero,801908 <___vfprintf_internal_r+0x3d0>
  8018cc:	a809883a 	mov	r4,r21
  8018d0:	a00b883a 	mov	r5,r20
  8018d4:	0801f240 	call	801f24 <__udivsi3>
  8018d8:	a009883a 	mov	r4,r20
  8018dc:	100b883a 	mov	r5,r2
  8018e0:	1021883a 	mov	r16,r2
  8018e4:	08014000 	call	801400 <__mulsi3>
  8018e8:	a885c83a 	sub	r2,r21,r2
  8018ec:	b0bff20e 	bge	r22,r2,8018b8 <___vfprintf_internal_r+0x380>
  8018f0:	e0000e26 	beq	fp,zero,80192c <___vfprintf_internal_r+0x3f4>
  8018f4:	15400dc4 	addi	r21,r2,55
  8018f8:	8d400005 	stb	r21,0(r17)
  8018fc:	802b883a 	mov	r21,r16
  801900:	8c400044 	addi	r17,r17,1
  801904:	803ff11e 	bne	r16,zero,8018cc <___vfprintf_internal_r+0x394>
  801908:	d9000b17 	ldw	r4,44(sp)
  80190c:	8eebc83a 	sub	r21,r17,sp
  801910:	dc001117 	ldw	r16,68(sp)
  801914:	2545c83a 	sub	r2,r4,r21
  801918:	d809883a 	mov	r4,sp
  80191c:	00bfb90e 	bge	zero,r2,801804 <___vfprintf_internal_r+0x2cc>
  801920:	d8c00a17 	ldw	r3,40(sp)
  801924:	88ffae36 	bltu	r17,r3,8017e0 <___vfprintf_internal_r+0x2a8>
  801928:	003fb606 	br	801804 <___vfprintf_internal_r+0x2cc>
  80192c:	154015c4 	addi	r21,r2,87
  801930:	003fe206 	br	8018bc <___vfprintf_internal_r+0x384>
  801934:	00c00044 	movi	r3,1
  801938:	013fffc4 	movi	r4,-1
  80193c:	d8c00d15 	stw	r3,52(sp)
  801940:	d9000b15 	stw	r4,44(sp)
  801944:	d8001415 	stw	zero,80(sp)
  801948:	05000284 	movi	r20,10
  80194c:	d9000c15 	stw	r4,48(sp)
  801950:	d8001315 	stw	zero,76(sp)
  801954:	d8001015 	stw	zero,64(sp)
  801958:	182b883a 	mov	r21,r3
  80195c:	003f1106 	br	8015a4 <___vfprintf_internal_r+0x6c>
  801960:	00c00044 	movi	r3,1
  801964:	d8c01315 	stw	r3,76(sp)
  801968:	054000c4 	movi	r21,3
  80196c:	003f0d06 	br	8015a4 <___vfprintf_internal_r+0x6c>
  801970:	d8c01117 	ldw	r3,68(sp)
  801974:	dc001517 	ldw	r16,84(sp)
  801978:	8805883a 	mov	r2,r17
  80197c:	90e5883a 	add	r18,r18,r3
  801980:	b823883a 	mov	r17,r23
  801984:	102f883a 	mov	r23,r2
  801988:	d8c01217 	ldw	r3,72(sp)
  80198c:	18000a26 	beq	r3,zero,8019b8 <___vfprintf_internal_r+0x480>
  801990:	b8800117 	ldw	r2,4(r23)
  801994:	d9000f17 	ldw	r4,60(sp)
  801998:	00c00b44 	movi	r3,45
  80199c:	d8c00905 	stb	r3,36(sp)
  8019a0:	b80b883a 	mov	r5,r23
  8019a4:	d9800904 	addi	r6,sp,36
  8019a8:	01c00044 	movi	r7,1
  8019ac:	103ee83a 	callr	r2
  8019b0:	103fb21e 	bne	r2,zero,80187c <___vfprintf_internal_r+0x344>
  8019b4:	94800044 	addi	r18,r18,1
  8019b8:	8d6dc83a 	sub	r22,r17,r21
  8019bc:	057f4d0e 	bge	zero,r21,8016f4 <___vfprintf_internal_r+0x1bc>
  8019c0:	dd400f17 	ldw	r21,60(sp)
  8019c4:	00000206 	br	8019d0 <___vfprintf_internal_r+0x498>
  8019c8:	94800044 	addi	r18,r18,1
  8019cc:	8dbf4926 	beq	r17,r22,8016f4 <___vfprintf_internal_r+0x1bc>
  8019d0:	8c7fffc4 	addi	r17,r17,-1
  8019d4:	88c00003 	ldbu	r3,0(r17)
  8019d8:	b8800117 	ldw	r2,4(r23)
  8019dc:	a809883a 	mov	r4,r21
  8019e0:	d8c00905 	stb	r3,36(sp)
  8019e4:	b80b883a 	mov	r5,r23
  8019e8:	d9800904 	addi	r6,sp,36
  8019ec:	01c00044 	movi	r7,1
  8019f0:	103ee83a 	callr	r2
  8019f4:	103ff426 	beq	r2,zero,8019c8 <___vfprintf_internal_r+0x490>
  8019f8:	04bfffc4 	movi	r18,-1
  8019fc:	003f0306 	br	80160c <___vfprintf_internal_r+0xd4>
  801a00:	dd401015 	stw	r21,64(sp)
  801a04:	05400084 	movi	r21,2
  801a08:	003ee606 	br	8015a4 <___vfprintf_internal_r+0x6c>
  801a0c:	0005883a 	mov	r2,zero
  801a10:	003f2806 	br	8016b4 <___vfprintf_internal_r+0x17c>
  801a14:	0005883a 	mov	r2,zero
  801a18:	003f1606 	br	801674 <___vfprintf_internal_r+0x13c>
  801a1c:	d8c01117 	ldw	r3,68(sp)
  801a20:	00ffd90e 	bge	zero,r3,801988 <___vfprintf_internal_r+0x450>
  801a24:	00800804 	movi	r2,32
  801a28:	d8800885 	stb	r2,34(sp)
  801a2c:	b805883a 	mov	r2,r23
  801a30:	dc001515 	stw	r16,84(sp)
  801a34:	882f883a 	mov	r23,r17
  801a38:	1f3fffc4 	addi	fp,r3,-1
  801a3c:	05bfffc4 	movi	r22,-1
  801a40:	dc000f17 	ldw	r16,60(sp)
  801a44:	1023883a 	mov	r17,r2
  801a48:	00000206 	br	801a54 <___vfprintf_internal_r+0x51c>
  801a4c:	e73fffc4 	addi	fp,fp,-1
  801a50:	e5bfc726 	beq	fp,r22,801970 <___vfprintf_internal_r+0x438>
  801a54:	88800117 	ldw	r2,4(r17)
  801a58:	8009883a 	mov	r4,r16
  801a5c:	880b883a 	mov	r5,r17
  801a60:	d9800884 	addi	r6,sp,34
  801a64:	01c00044 	movi	r7,1
  801a68:	103ee83a 	callr	r2
  801a6c:	103ff726 	beq	r2,zero,801a4c <___vfprintf_internal_r+0x514>
  801a70:	04bfffc4 	movi	r18,-1
  801a74:	003ee506 	br	80160c <___vfprintf_internal_r+0xd4>
  801a78:	01000044 	movi	r4,1
  801a7c:	d9000b15 	stw	r4,44(sp)
  801a80:	003f1806 	br	8016e4 <___vfprintf_internal_r+0x1ac>
  801a84:	b8c00117 	ldw	r3,4(r23)
  801a88:	d9000f17 	ldw	r4,60(sp)
  801a8c:	d8800905 	stb	r2,36(sp)
  801a90:	b80b883a 	mov	r5,r23
  801a94:	d9800904 	addi	r6,sp,36
  801a98:	a80f883a 	mov	r7,r21
  801a9c:	183ee83a 	callr	r3
  801aa0:	103f761e 	bne	r2,zero,80187c <___vfprintf_internal_r+0x344>
  801aa4:	94800044 	addi	r18,r18,1
  801aa8:	002b883a 	mov	r21,zero
  801aac:	003ebd06 	br	8015a4 <___vfprintf_internal_r+0x6c>
  801ab0:	00c00044 	movi	r3,1
  801ab4:	d8c01415 	stw	r3,80(sp)
  801ab8:	05000404 	movi	r20,16
  801abc:	003f7206 	br	801888 <___vfprintf_internal_r+0x350>
  801ac0:	d9000c17 	ldw	r4,48(sp)
  801ac4:	9900420e 	bge	r19,r4,801bd0 <___vfprintf_internal_r+0x698>
  801ac8:	df000f17 	ldw	fp,60(sp)
  801acc:	25bfffc4 	addi	r22,r4,-1
  801ad0:	00800804 	movi	r2,32
  801ad4:	d8800845 	stb	r2,33(sp)
  801ad8:	b023883a 	mov	r17,r22
  801adc:	057fffc4 	movi	r21,-1
  801ae0:	8c7fffc4 	addi	r17,r17,-1
  801ae4:	8d403926 	beq	r17,r21,801bcc <___vfprintf_internal_r+0x694>
  801ae8:	b8800117 	ldw	r2,4(r23)
  801aec:	e009883a 	mov	r4,fp
  801af0:	b80b883a 	mov	r5,r23
  801af4:	d9800844 	addi	r6,sp,33
  801af8:	01c00044 	movi	r7,1
  801afc:	103ee83a 	callr	r2
  801b00:	103ff726 	beq	r2,zero,801ae0 <___vfprintf_internal_r+0x5a8>
  801b04:	04bfffc4 	movi	r18,-1
  801b08:	003ec006 	br	80160c <___vfprintf_internal_r+0xd4>
  801b0c:	d9000e17 	ldw	r4,56(sp)
  801b10:	d8c00e17 	ldw	r3,56(sp)
  801b14:	21000017 	ldw	r4,0(r4)
  801b18:	18c00104 	addi	r3,r3,4
  801b1c:	d8c00e15 	stw	r3,56(sp)
  801b20:	d9001215 	stw	r4,72(sp)
  801b24:	0801d700 	call	801d70 <strlen>
  801b28:	d9000c17 	ldw	r4,48(sp)
  801b2c:	102d883a 	mov	r22,r2
  801b30:	20b9c83a 	sub	fp,r4,r2
  801b34:	07001b0e 	bge	zero,fp,801ba4 <___vfprintf_internal_r+0x66c>
  801b38:	00800804 	movi	r2,32
  801b3c:	d8800805 	stb	r2,32(sp)
  801b40:	b805883a 	mov	r2,r23
  801b44:	dc001115 	stw	r16,68(sp)
  801b48:	b02f883a 	mov	r23,r22
  801b4c:	e47fffc4 	addi	r17,fp,-1
  801b50:	902d883a 	mov	r22,r18
  801b54:	057fffc4 	movi	r21,-1
  801b58:	dc000f17 	ldw	r16,60(sp)
  801b5c:	1025883a 	mov	r18,r2
  801b60:	00000206 	br	801b6c <___vfprintf_internal_r+0x634>
  801b64:	8c7fffc4 	addi	r17,r17,-1
  801b68:	8d400826 	beq	r17,r21,801b8c <___vfprintf_internal_r+0x654>
  801b6c:	90800117 	ldw	r2,4(r18)
  801b70:	8009883a 	mov	r4,r16
  801b74:	900b883a 	mov	r5,r18
  801b78:	d9800804 	addi	r6,sp,32
  801b7c:	01c00044 	movi	r7,1
  801b80:	103ee83a 	callr	r2
  801b84:	103ff726 	beq	r2,zero,801b64 <___vfprintf_internal_r+0x62c>
  801b88:	003f3c06 	br	80187c <___vfprintf_internal_r+0x344>
  801b8c:	dc001117 	ldw	r16,68(sp)
  801b90:	9005883a 	mov	r2,r18
  801b94:	b025883a 	mov	r18,r22
  801b98:	9725883a 	add	r18,r18,fp
  801b9c:	b82d883a 	mov	r22,r23
  801ba0:	102f883a 	mov	r23,r2
  801ba4:	b8800117 	ldw	r2,4(r23)
  801ba8:	d9000f17 	ldw	r4,60(sp)
  801bac:	d9801217 	ldw	r6,72(sp)
  801bb0:	b80b883a 	mov	r5,r23
  801bb4:	b00f883a 	mov	r7,r22
  801bb8:	103ee83a 	callr	r2
  801bbc:	103f2f1e 	bne	r2,zero,80187c <___vfprintf_internal_r+0x344>
  801bc0:	95a5883a 	add	r18,r18,r22
  801bc4:	002b883a 	mov	r21,zero
  801bc8:	003e7606 	br	8015a4 <___vfprintf_internal_r+0x6c>
  801bcc:	95a5883a 	add	r18,r18,r22
  801bd0:	d9400e17 	ldw	r5,56(sp)
  801bd4:	b8800117 	ldw	r2,4(r23)
  801bd8:	d9000f17 	ldw	r4,60(sp)
  801bdc:	28c00017 	ldw	r3,0(r5)
  801be0:	d9800904 	addi	r6,sp,36
  801be4:	b80b883a 	mov	r5,r23
  801be8:	d8c00905 	stb	r3,36(sp)
  801bec:	d8c00e17 	ldw	r3,56(sp)
  801bf0:	01c00044 	movi	r7,1
  801bf4:	1c400104 	addi	r17,r3,4
  801bf8:	103ee83a 	callr	r2
  801bfc:	103f1f1e 	bne	r2,zero,80187c <___vfprintf_internal_r+0x344>
  801c00:	94800044 	addi	r18,r18,1
  801c04:	dc400e15 	stw	r17,56(sp)
  801c08:	002b883a 	mov	r21,zero
  801c0c:	003e6506 	br	8015a4 <___vfprintf_internal_r+0x6c>
  801c10:	b8800117 	ldw	r2,4(r23)
  801c14:	d9000f17 	ldw	r4,60(sp)
  801c18:	00c00b44 	movi	r3,45
  801c1c:	d8c00905 	stb	r3,36(sp)
  801c20:	b80b883a 	mov	r5,r23
  801c24:	d9800904 	addi	r6,sp,36
  801c28:	01c00044 	movi	r7,1
  801c2c:	103ee83a 	callr	r2
  801c30:	103f121e 	bne	r2,zero,80187c <___vfprintf_internal_r+0x344>
  801c34:	d8c01117 	ldw	r3,68(sp)
  801c38:	94800044 	addi	r18,r18,1
  801c3c:	00fefc16 	blt	zero,r3,801830 <___vfprintf_internal_r+0x2f8>
  801c40:	003f5d06 	br	8019b8 <___vfprintf_internal_r+0x480>
  801c44:	056bc83a 	sub	r21,zero,r21
  801c48:	d8c01215 	stw	r3,72(sp)
  801c4c:	003f1406 	br	8018a0 <___vfprintf_internal_r+0x368>
  801c50:	d8c01117 	ldw	r3,68(sp)
  801c54:	8805883a 	mov	r2,r17
  801c58:	dc001217 	ldw	r16,72(sp)
  801c5c:	b823883a 	mov	r17,r23
  801c60:	90e5883a 	add	r18,r18,r3
  801c64:	102f883a 	mov	r23,r2
  801c68:	003f5306 	br	8019b8 <___vfprintf_internal_r+0x480>

00801c6c <__vfprintf_internal>:
  801c6c:	00802034 	movhi	r2,128
  801c70:	108f4e04 	addi	r2,r2,15672
  801c74:	2007883a 	mov	r3,r4
  801c78:	11000017 	ldw	r4,0(r2)
  801c7c:	2805883a 	mov	r2,r5
  801c80:	300f883a 	mov	r7,r6
  801c84:	180b883a 	mov	r5,r3
  801c88:	100d883a 	mov	r6,r2
  801c8c:	08015381 	jmpi	801538 <___vfprintf_internal_r>

00801c90 <__sfvwrite_small_dev>:
  801c90:	2880000b 	ldhu	r2,0(r5)
  801c94:	defffa04 	addi	sp,sp,-24
  801c98:	dcc00315 	stw	r19,12(sp)
  801c9c:	10c0020c 	andi	r3,r2,8
  801ca0:	18ffffcc 	andi	r3,r3,65535
  801ca4:	18e0001c 	xori	r3,r3,32768
  801ca8:	dc800215 	stw	r18,8(sp)
  801cac:	dc400115 	stw	r17,4(sp)
  801cb0:	dfc00515 	stw	ra,20(sp)
  801cb4:	dd000415 	stw	r20,16(sp)
  801cb8:	dc000015 	stw	r16,0(sp)
  801cbc:	18e00004 	addi	r3,r3,-32768
  801cc0:	2825883a 	mov	r18,r5
  801cc4:	2027883a 	mov	r19,r4
  801cc8:	3023883a 	mov	r17,r6
  801ccc:	18002626 	beq	r3,zero,801d68 <__sfvwrite_small_dev+0xd8>
  801cd0:	2940008f 	ldh	r5,2(r5)
  801cd4:	28001016 	blt	r5,zero,801d18 <__sfvwrite_small_dev+0x88>
  801cd8:	01c01a0e 	bge	zero,r7,801d44 <__sfvwrite_small_dev+0xb4>
  801cdc:	3821883a 	mov	r16,r7
  801ce0:	05010004 	movi	r20,1024
  801ce4:	00000306 	br	801cf4 <__sfvwrite_small_dev+0x64>
  801ce8:	88a3883a 	add	r17,r17,r2
  801cec:	0400150e 	bge	zero,r16,801d44 <__sfvwrite_small_dev+0xb4>
  801cf0:	9140008f 	ldh	r5,2(r18)
  801cf4:	880d883a 	mov	r6,r17
  801cf8:	9809883a 	mov	r4,r19
  801cfc:	800f883a 	mov	r7,r16
  801d00:	a400010e 	bge	r20,r16,801d08 <__sfvwrite_small_dev+0x78>
  801d04:	01c10004 	movi	r7,1024
  801d08:	0801d980 	call	801d98 <_write_r>
  801d0c:	80a1c83a 	sub	r16,r16,r2
  801d10:	00bff516 	blt	zero,r2,801ce8 <__sfvwrite_small_dev+0x58>
  801d14:	9080000b 	ldhu	r2,0(r18)
  801d18:	10801014 	ori	r2,r2,64
  801d1c:	9080000d 	sth	r2,0(r18)
  801d20:	00bfffc4 	movi	r2,-1
  801d24:	dfc00517 	ldw	ra,20(sp)
  801d28:	dd000417 	ldw	r20,16(sp)
  801d2c:	dcc00317 	ldw	r19,12(sp)
  801d30:	dc800217 	ldw	r18,8(sp)
  801d34:	dc400117 	ldw	r17,4(sp)
  801d38:	dc000017 	ldw	r16,0(sp)
  801d3c:	dec00604 	addi	sp,sp,24
  801d40:	f800283a 	ret
  801d44:	0005883a 	mov	r2,zero
  801d48:	dfc00517 	ldw	ra,20(sp)
  801d4c:	dd000417 	ldw	r20,16(sp)
  801d50:	dcc00317 	ldw	r19,12(sp)
  801d54:	dc800217 	ldw	r18,8(sp)
  801d58:	dc400117 	ldw	r17,4(sp)
  801d5c:	dc000017 	ldw	r16,0(sp)
  801d60:	dec00604 	addi	sp,sp,24
  801d64:	f800283a 	ret
  801d68:	00bfffc4 	movi	r2,-1
  801d6c:	003fed06 	br	801d24 <__sfvwrite_small_dev+0x94>

00801d70 <strlen>:
  801d70:	20800007 	ldb	r2,0(r4)
  801d74:	10000626 	beq	r2,zero,801d90 <strlen+0x20>
  801d78:	2005883a 	mov	r2,r4
  801d7c:	10800044 	addi	r2,r2,1
  801d80:	10c00007 	ldb	r3,0(r2)
  801d84:	183ffd1e 	bne	r3,zero,801d7c <strlen+0xc>
  801d88:	1105c83a 	sub	r2,r2,r4
  801d8c:	f800283a 	ret
  801d90:	0005883a 	mov	r2,zero
  801d94:	f800283a 	ret

00801d98 <_write_r>:
  801d98:	defffd04 	addi	sp,sp,-12
  801d9c:	dc400115 	stw	r17,4(sp)
  801da0:	dc000015 	stw	r16,0(sp)
  801da4:	2023883a 	mov	r17,r4
  801da8:	04002034 	movhi	r16,128
  801dac:	84101004 	addi	r16,r16,16448
  801db0:	2809883a 	mov	r4,r5
  801db4:	300b883a 	mov	r5,r6
  801db8:	380d883a 	mov	r6,r7
  801dbc:	dfc00215 	stw	ra,8(sp)
  801dc0:	80000015 	stw	zero,0(r16)
  801dc4:	08021bc0 	call	8021bc <write>
  801dc8:	00ffffc4 	movi	r3,-1
  801dcc:	10c00526 	beq	r2,r3,801de4 <_write_r+0x4c>
  801dd0:	dfc00217 	ldw	ra,8(sp)
  801dd4:	dc400117 	ldw	r17,4(sp)
  801dd8:	dc000017 	ldw	r16,0(sp)
  801ddc:	dec00304 	addi	sp,sp,12
  801de0:	f800283a 	ret
  801de4:	80c00017 	ldw	r3,0(r16)
  801de8:	183ff926 	beq	r3,zero,801dd0 <_write_r+0x38>
  801dec:	88c00015 	stw	r3,0(r17)
  801df0:	dfc00217 	ldw	ra,8(sp)
  801df4:	dc400117 	ldw	r17,4(sp)
  801df8:	dc000017 	ldw	r16,0(sp)
  801dfc:	dec00304 	addi	sp,sp,12
  801e00:	f800283a 	ret

00801e04 <udivmodsi4>:
  801e04:	2005883a 	mov	r2,r4
  801e08:	2900182e 	bgeu	r5,r4,801e6c <udivmodsi4+0x68>
  801e0c:	28001716 	blt	r5,zero,801e6c <udivmodsi4+0x68>
  801e10:	01000804 	movi	r4,32
  801e14:	00c00044 	movi	r3,1
  801e18:	00000206 	br	801e24 <udivmodsi4+0x20>
  801e1c:	20001126 	beq	r4,zero,801e64 <udivmodsi4+0x60>
  801e20:	28000516 	blt	r5,zero,801e38 <udivmodsi4+0x34>
  801e24:	294b883a 	add	r5,r5,r5
  801e28:	213fffc4 	addi	r4,r4,-1
  801e2c:	18c7883a 	add	r3,r3,r3
  801e30:	28bffa36 	bltu	r5,r2,801e1c <udivmodsi4+0x18>
  801e34:	18000b26 	beq	r3,zero,801e64 <udivmodsi4+0x60>
  801e38:	0009883a 	mov	r4,zero
  801e3c:	11400236 	bltu	r2,r5,801e48 <udivmodsi4+0x44>
  801e40:	1145c83a 	sub	r2,r2,r5
  801e44:	20c8b03a 	or	r4,r4,r3
  801e48:	1806d07a 	srli	r3,r3,1
  801e4c:	280ad07a 	srli	r5,r5,1
  801e50:	183ffa1e 	bne	r3,zero,801e3c <udivmodsi4+0x38>
  801e54:	3000021e 	bne	r6,zero,801e60 <udivmodsi4+0x5c>
  801e58:	2005883a 	mov	r2,r4
  801e5c:	f800283a 	ret
  801e60:	f800283a 	ret
  801e64:	0009883a 	mov	r4,zero
  801e68:	003ffa06 	br	801e54 <udivmodsi4+0x50>
  801e6c:	00c00044 	movi	r3,1
  801e70:	0009883a 	mov	r4,zero
  801e74:	003ff106 	br	801e3c <udivmodsi4+0x38>

00801e78 <__divsi3>:
  801e78:	defffe04 	addi	sp,sp,-8
  801e7c:	dfc00115 	stw	ra,4(sp)
  801e80:	dc000015 	stw	r16,0(sp)
  801e84:	20000a16 	blt	r4,zero,801eb0 <__divsi3+0x38>
  801e88:	0021883a 	mov	r16,zero
  801e8c:	28000b16 	blt	r5,zero,801ebc <__divsi3+0x44>
  801e90:	000d883a 	mov	r6,zero
  801e94:	0801e040 	call	801e04 <udivmodsi4>
  801e98:	80000126 	beq	r16,zero,801ea0 <__divsi3+0x28>
  801e9c:	0085c83a 	sub	r2,zero,r2
  801ea0:	dfc00117 	ldw	ra,4(sp)
  801ea4:	dc000017 	ldw	r16,0(sp)
  801ea8:	dec00204 	addi	sp,sp,8
  801eac:	f800283a 	ret
  801eb0:	0109c83a 	sub	r4,zero,r4
  801eb4:	04000044 	movi	r16,1
  801eb8:	283ff50e 	bge	r5,zero,801e90 <__divsi3+0x18>
  801ebc:	014bc83a 	sub	r5,zero,r5
  801ec0:	8400005c 	xori	r16,r16,1
  801ec4:	003ff206 	br	801e90 <__divsi3+0x18>

00801ec8 <__modsi3>:
  801ec8:	deffff04 	addi	sp,sp,-4
  801ecc:	dfc00015 	stw	ra,0(sp)
  801ed0:	20000516 	blt	r4,zero,801ee8 <__modsi3+0x20>
  801ed4:	28000c16 	blt	r5,zero,801f08 <__modsi3+0x40>
  801ed8:	01800044 	movi	r6,1
  801edc:	dfc00017 	ldw	ra,0(sp)
  801ee0:	dec00104 	addi	sp,sp,4
  801ee4:	0801e041 	jmpi	801e04 <udivmodsi4>
  801ee8:	0109c83a 	sub	r4,zero,r4
  801eec:	28000b16 	blt	r5,zero,801f1c <__modsi3+0x54>
  801ef0:	01800044 	movi	r6,1
  801ef4:	0801e040 	call	801e04 <udivmodsi4>
  801ef8:	0085c83a 	sub	r2,zero,r2
  801efc:	dfc00017 	ldw	ra,0(sp)
  801f00:	dec00104 	addi	sp,sp,4
  801f04:	f800283a 	ret
  801f08:	014bc83a 	sub	r5,zero,r5
  801f0c:	01800044 	movi	r6,1
  801f10:	dfc00017 	ldw	ra,0(sp)
  801f14:	dec00104 	addi	sp,sp,4
  801f18:	0801e041 	jmpi	801e04 <udivmodsi4>
  801f1c:	014bc83a 	sub	r5,zero,r5
  801f20:	003ff306 	br	801ef0 <__modsi3+0x28>

00801f24 <__udivsi3>:
  801f24:	000d883a 	mov	r6,zero
  801f28:	0801e041 	jmpi	801e04 <udivmodsi4>

00801f2c <__umodsi3>:
  801f2c:	01800044 	movi	r6,1
  801f30:	0801e041 	jmpi	801e04 <udivmodsi4>

00801f34 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  801f34:	defffc04 	addi	sp,sp,-16
  801f38:	df000315 	stw	fp,12(sp)
  801f3c:	df000304 	addi	fp,sp,12
  801f40:	e13ffd15 	stw	r4,-12(fp)
  801f44:	e17ffe15 	stw	r5,-8(fp)
  801f48:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  801f4c:	e0fffe17 	ldw	r3,-8(fp)
  801f50:	e0bffd17 	ldw	r2,-12(fp)
  801f54:	18800e26 	beq	r3,r2,801f90 <alt_load_section+0x5c>
  {
    while( to != end )
  801f58:	00000a06 	br	801f84 <alt_load_section+0x50>
    {
      *to++ = *from++;
  801f5c:	e0bffd17 	ldw	r2,-12(fp)
  801f60:	10c00017 	ldw	r3,0(r2)
  801f64:	e0bffe17 	ldw	r2,-8(fp)
  801f68:	10c00015 	stw	r3,0(r2)
  801f6c:	e0bffe17 	ldw	r2,-8(fp)
  801f70:	10800104 	addi	r2,r2,4
  801f74:	e0bffe15 	stw	r2,-8(fp)
  801f78:	e0bffd17 	ldw	r2,-12(fp)
  801f7c:	10800104 	addi	r2,r2,4
  801f80:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  801f84:	e0fffe17 	ldw	r3,-8(fp)
  801f88:	e0bfff17 	ldw	r2,-4(fp)
  801f8c:	18bff31e 	bne	r3,r2,801f5c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  801f90:	e037883a 	mov	sp,fp
  801f94:	df000017 	ldw	fp,0(sp)
  801f98:	dec00104 	addi	sp,sp,4
  801f9c:	f800283a 	ret

00801fa0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  801fa0:	defffe04 	addi	sp,sp,-8
  801fa4:	dfc00115 	stw	ra,4(sp)
  801fa8:	df000015 	stw	fp,0(sp)
  801fac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  801fb0:	01002034 	movhi	r4,128
  801fb4:	210f5804 	addi	r4,r4,15712
  801fb8:	01402034 	movhi	r5,128
  801fbc:	294ea004 	addi	r5,r5,14976
  801fc0:	01802034 	movhi	r6,128
  801fc4:	318f5804 	addi	r6,r6,15712
  801fc8:	0801f340 	call	801f34 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  801fcc:	01002034 	movhi	r4,128
  801fd0:	21000804 	addi	r4,r4,32
  801fd4:	01402034 	movhi	r5,128
  801fd8:	29400804 	addi	r5,r5,32
  801fdc:	01802034 	movhi	r6,128
  801fe0:	31806e04 	addi	r6,r6,440
  801fe4:	0801f340 	call	801f34 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  801fe8:	01002034 	movhi	r4,128
  801fec:	210e7e04 	addi	r4,r4,14840
  801ff0:	01402034 	movhi	r5,128
  801ff4:	294e7e04 	addi	r5,r5,14840
  801ff8:	01802034 	movhi	r6,128
  801ffc:	318ea004 	addi	r6,r6,14976
  802000:	0801f340 	call	801f34 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  802004:	08027c80 	call	8027c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  802008:	08029b80 	call	8029b8 <alt_icache_flush_all>
}
  80200c:	e037883a 	mov	sp,fp
  802010:	dfc00117 	ldw	ra,4(sp)
  802014:	df000017 	ldw	fp,0(sp)
  802018:	dec00204 	addi	sp,sp,8
  80201c:	f800283a 	ret

00802020 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  802020:	defffd04 	addi	sp,sp,-12
  802024:	dfc00215 	stw	ra,8(sp)
  802028:	df000115 	stw	fp,4(sp)
  80202c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  802030:	0009883a 	mov	r4,zero
  802034:	08022e40 	call	8022e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  802038:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80203c:	08023180 	call	802318 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  802040:	01002034 	movhi	r4,128
  802044:	210e9504 	addi	r4,r4,14932
  802048:	01402034 	movhi	r5,128
  80204c:	294e9504 	addi	r5,r5,14932
  802050:	01802034 	movhi	r6,128
  802054:	318e9504 	addi	r6,r6,14932
  802058:	0802d900 	call	802d90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80205c:	08029000 	call	802900 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  802060:	01002034 	movhi	r4,128
  802064:	210a5704 	addi	r4,r4,10588
  802068:	08035e00 	call	8035e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80206c:	d120c417 	ldw	r4,-31984(gp)
  802070:	d0e0c517 	ldw	r3,-31980(gp)
  802074:	d0a0c617 	ldw	r2,-31976(gp)
  802078:	180b883a 	mov	r5,r3
  80207c:	100d883a 	mov	r6,r2
  802080:	08003840 	call	800384 <main>
  802084:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  802088:	01000044 	movi	r4,1
  80208c:	08026fc0 	call	8026fc <close>
  exit (result);
  802090:	e13fff17 	ldw	r4,-4(fp)
  802094:	08035f40 	call	8035f4 <exit>

00802098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802098:	defffe04 	addi	sp,sp,-8
  80209c:	dfc00115 	stw	ra,4(sp)
  8020a0:	df000015 	stw	fp,0(sp)
  8020a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8020a8:	00802034 	movhi	r2,128
  8020ac:	108f5404 	addi	r2,r2,15696
  8020b0:	10800017 	ldw	r2,0(r2)
  8020b4:	10000526 	beq	r2,zero,8020cc <alt_get_errno+0x34>
  8020b8:	00802034 	movhi	r2,128
  8020bc:	108f5404 	addi	r2,r2,15696
  8020c0:	10800017 	ldw	r2,0(r2)
  8020c4:	103ee83a 	callr	r2
  8020c8:	00000206 	br	8020d4 <alt_get_errno+0x3c>
  8020cc:	00802034 	movhi	r2,128
  8020d0:	10901004 	addi	r2,r2,16448
}
  8020d4:	e037883a 	mov	sp,fp
  8020d8:	dfc00117 	ldw	ra,4(sp)
  8020dc:	df000017 	ldw	fp,0(sp)
  8020e0:	dec00204 	addi	sp,sp,8
  8020e4:	f800283a 	ret

008020e8 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  8020e8:	defffc04 	addi	sp,sp,-16
  8020ec:	dfc00315 	stw	ra,12(sp)
  8020f0:	df000215 	stw	fp,8(sp)
  8020f4:	df000204 	addi	fp,sp,8
  8020f8:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8020fc:	00802034 	movhi	r2,128
  802100:	10901604 	addi	r2,r2,16472
  802104:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
  802108:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80210c:	00802034 	movhi	r2,128
  802110:	10901504 	addi	r2,r2,16468
  802114:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  802118:	1000051e 	bne	r2,zero,802130 <times+0x48>
  {
    ALT_ERRNO = ENOSYS;
  80211c:	08020980 	call	802098 <alt_get_errno>
  802120:	00c01604 	movi	r3,88
  802124:	10c00015 	stw	r3,0(r2)
    return 0;
  802128:	0005883a 	mov	r2,zero
  80212c:	00000a06 	br	802158 <times+0x70>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  802130:	e0bfff17 	ldw	r2,-4(fp)
  802134:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  802138:	e0bfff17 	ldw	r2,-4(fp)
  80213c:	e0fffe17 	ldw	r3,-8(fp)
  802140:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  802144:	e0bfff17 	ldw	r2,-4(fp)
  802148:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  80214c:	e0bfff17 	ldw	r2,-4(fp)
  802150:	10000315 	stw	zero,12(r2)

  return ticks;
  802154:	e0bffe17 	ldw	r2,-8(fp)
}
  802158:	e037883a 	mov	sp,fp
  80215c:	dfc00117 	ldw	ra,4(sp)
  802160:	df000017 	ldw	fp,0(sp)
  802164:	dec00204 	addi	sp,sp,8
  802168:	f800283a 	ret

0080216c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80216c:	defffe04 	addi	sp,sp,-8
  802170:	dfc00115 	stw	ra,4(sp)
  802174:	df000015 	stw	fp,0(sp)
  802178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80217c:	00802034 	movhi	r2,128
  802180:	108f5404 	addi	r2,r2,15696
  802184:	10800017 	ldw	r2,0(r2)
  802188:	10000526 	beq	r2,zero,8021a0 <alt_get_errno+0x34>
  80218c:	00802034 	movhi	r2,128
  802190:	108f5404 	addi	r2,r2,15696
  802194:	10800017 	ldw	r2,0(r2)
  802198:	103ee83a 	callr	r2
  80219c:	00000206 	br	8021a8 <alt_get_errno+0x3c>
  8021a0:	00802034 	movhi	r2,128
  8021a4:	10901004 	addi	r2,r2,16448
}
  8021a8:	e037883a 	mov	sp,fp
  8021ac:	dfc00117 	ldw	ra,4(sp)
  8021b0:	df000017 	ldw	fp,0(sp)
  8021b4:	dec00204 	addi	sp,sp,8
  8021b8:	f800283a 	ret

008021bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8021bc:	defff904 	addi	sp,sp,-28
  8021c0:	dfc00615 	stw	ra,24(sp)
  8021c4:	df000515 	stw	fp,20(sp)
  8021c8:	df000504 	addi	fp,sp,20
  8021cc:	e13ffd15 	stw	r4,-12(fp)
  8021d0:	e17ffe15 	stw	r5,-8(fp)
  8021d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8021d8:	e0bffd17 	ldw	r2,-12(fp)
  8021dc:	10000716 	blt	r2,zero,8021fc <write+0x40>
  8021e0:	e13ffd17 	ldw	r4,-12(fp)
  8021e4:	01400304 	movi	r5,12
  8021e8:	08014000 	call	801400 <__mulsi3>
  8021ec:	00c02034 	movhi	r3,128
  8021f0:	18ceed04 	addi	r3,r3,15284
  8021f4:	10c5883a 	add	r2,r2,r3
  8021f8:	00000106 	br	802200 <write+0x44>
  8021fc:	0005883a 	mov	r2,zero
  802200:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  802204:	e0bffb17 	ldw	r2,-20(fp)
  802208:	10001f26 	beq	r2,zero,802288 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80220c:	e0bffb17 	ldw	r2,-20(fp)
  802210:	10800217 	ldw	r2,8(r2)
  802214:	108000cc 	andi	r2,r2,3
  802218:	10001726 	beq	r2,zero,802278 <write+0xbc>
  80221c:	e0bffb17 	ldw	r2,-20(fp)
  802220:	10800017 	ldw	r2,0(r2)
  802224:	10800617 	ldw	r2,24(r2)
  802228:	10001326 	beq	r2,zero,802278 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80222c:	e0bffb17 	ldw	r2,-20(fp)
  802230:	10800017 	ldw	r2,0(r2)
  802234:	10c00617 	ldw	r3,24(r2)
  802238:	e0bfff17 	ldw	r2,-4(fp)
  80223c:	e13ffb17 	ldw	r4,-20(fp)
  802240:	e17ffe17 	ldw	r5,-8(fp)
  802244:	100d883a 	mov	r6,r2
  802248:	183ee83a 	callr	r3
  80224c:	e0bffc15 	stw	r2,-16(fp)
  802250:	e0bffc17 	ldw	r2,-16(fp)
  802254:	1000060e 	bge	r2,zero,802270 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  802258:	080216c0 	call	80216c <alt_get_errno>
  80225c:	e0fffc17 	ldw	r3,-16(fp)
  802260:	00c7c83a 	sub	r3,zero,r3
  802264:	10c00015 	stw	r3,0(r2)
        return -1;
  802268:	00bfffc4 	movi	r2,-1
  80226c:	00000a06 	br	802298 <write+0xdc>
      }
      return rval;
  802270:	e0bffc17 	ldw	r2,-16(fp)
  802274:	00000806 	br	802298 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
  802278:	080216c0 	call	80216c <alt_get_errno>
  80227c:	00c00344 	movi	r3,13
  802280:	10c00015 	stw	r3,0(r2)
  802284:	00000306 	br	802294 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  802288:	080216c0 	call	80216c <alt_get_errno>
  80228c:	00c01444 	movi	r3,81
  802290:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  802294:	00bfffc4 	movi	r2,-1
}
  802298:	e037883a 	mov	sp,fp
  80229c:	dfc00117 	ldw	ra,4(sp)
  8022a0:	df000017 	ldw	fp,0(sp)
  8022a4:	dec00204 	addi	sp,sp,8
  8022a8:	f800283a 	ret

008022ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8022ac:	defffd04 	addi	sp,sp,-12
  8022b0:	dfc00215 	stw	ra,8(sp)
  8022b4:	df000115 	stw	fp,4(sp)
  8022b8:	df000104 	addi	fp,sp,4
  8022bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8022c0:	e13fff17 	ldw	r4,-4(fp)
  8022c4:	01402034 	movhi	r5,128
  8022c8:	294f5104 	addi	r5,r5,15684
  8022cc:	08028600 	call	802860 <alt_dev_llist_insert>
}
  8022d0:	e037883a 	mov	sp,fp
  8022d4:	dfc00117 	ldw	ra,4(sp)
  8022d8:	df000017 	ldw	fp,0(sp)
  8022dc:	dec00204 	addi	sp,sp,8
  8022e0:	f800283a 	ret

008022e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8022e4:	defffd04 	addi	sp,sp,-12
  8022e8:	dfc00215 	stw	ra,8(sp)
  8022ec:	df000115 	stw	fp,4(sp)
  8022f0:	df000104 	addi	fp,sp,4
  8022f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  8022f8:	08032bc0 	call	8032bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8022fc:	00800044 	movi	r2,1
  802300:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  802304:	e037883a 	mov	sp,fp
  802308:	dfc00117 	ldw	ra,4(sp)
  80230c:	df000017 	ldw	fp,0(sp)
  802310:	dec00204 	addi	sp,sp,8
  802314:	f800283a 	ret

00802318 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  802318:	defffe04 	addi	sp,sp,-8
  80231c:	dfc00115 	stw	ra,4(sp)
  802320:	df000015 	stw	fp,0(sp)
  802324:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  802328:	010040b4 	movhi	r4,258
  80232c:	21040004 	addi	r4,r4,4096
  802330:	000b883a 	mov	r5,zero
  802334:	01800044 	movi	r6,1
  802338:	01c0fa04 	movi	r7,1000
  80233c:	08026240 	call	802624 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  802340:	01002034 	movhi	r4,128
  802344:	210ed804 	addi	r4,r4,15200
  802348:	08022ac0 	call	8022ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  80234c:	0001883a 	nop
}
  802350:	e037883a 	mov	sp,fp
  802354:	dfc00117 	ldw	ra,4(sp)
  802358:	df000017 	ldw	fp,0(sp)
  80235c:	dec00204 	addi	sp,sp,8
  802360:	f800283a 	ret

00802364 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  802364:	defffa04 	addi	sp,sp,-24
  802368:	dfc00515 	stw	ra,20(sp)
  80236c:	df000415 	stw	fp,16(sp)
  802370:	df000404 	addi	fp,sp,16
  802374:	e13ffd15 	stw	r4,-12(fp)
  802378:	e17ffe15 	stw	r5,-8(fp)
  80237c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  802380:	e0bffd17 	ldw	r2,-12(fp)
  802384:	10800017 	ldw	r2,0(r2)
  802388:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80238c:	e0bffc17 	ldw	r2,-16(fp)
  802390:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  802394:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  802398:	10800217 	ldw	r2,8(r2)
  80239c:	1809883a 	mov	r4,r3
  8023a0:	e17ffe17 	ldw	r5,-8(fp)
  8023a4:	e1bfff17 	ldw	r6,-4(fp)
  8023a8:	100f883a 	mov	r7,r2
  8023ac:	08024240 	call	802424 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8023b0:	e037883a 	mov	sp,fp
  8023b4:	dfc00117 	ldw	ra,4(sp)
  8023b8:	df000017 	ldw	fp,0(sp)
  8023bc:	dec00204 	addi	sp,sp,8
  8023c0:	f800283a 	ret

008023c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8023c4:	defffa04 	addi	sp,sp,-24
  8023c8:	dfc00515 	stw	ra,20(sp)
  8023cc:	df000415 	stw	fp,16(sp)
  8023d0:	df000404 	addi	fp,sp,16
  8023d4:	e13ffd15 	stw	r4,-12(fp)
  8023d8:	e17ffe15 	stw	r5,-8(fp)
  8023dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8023e0:	e0bffd17 	ldw	r2,-12(fp)
  8023e4:	10800017 	ldw	r2,0(r2)
  8023e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8023ec:	e0bffc17 	ldw	r2,-16(fp)
  8023f0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  8023f4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8023f8:	10800217 	ldw	r2,8(r2)
  8023fc:	1809883a 	mov	r4,r3
  802400:	e17ffe17 	ldw	r5,-8(fp)
  802404:	e1bfff17 	ldw	r6,-4(fp)
  802408:	100f883a 	mov	r7,r2
  80240c:	08025180 	call	802518 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  802410:	e037883a 	mov	sp,fp
  802414:	dfc00117 	ldw	ra,4(sp)
  802418:	df000017 	ldw	fp,0(sp)
  80241c:	dec00204 	addi	sp,sp,8
  802420:	f800283a 	ret

00802424 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  802424:	defff704 	addi	sp,sp,-36
  802428:	df000815 	stw	fp,32(sp)
  80242c:	df000804 	addi	fp,sp,32
  802430:	e13ffc15 	stw	r4,-16(fp)
  802434:	e17ffd15 	stw	r5,-12(fp)
  802438:	e1bffe15 	stw	r6,-8(fp)
  80243c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  802440:	e0bffc17 	ldw	r2,-16(fp)
  802444:	10800017 	ldw	r2,0(r2)
  802448:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  80244c:	e0bffd17 	ldw	r2,-12(fp)
  802450:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  802454:	e0bffe17 	ldw	r2,-8(fp)
  802458:	e0fffd17 	ldw	r3,-12(fp)
  80245c:	1885883a 	add	r2,r3,r2
  802460:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  802464:	00001406 	br	8024b8 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  802468:	e0bff917 	ldw	r2,-28(fp)
  80246c:	10800037 	ldwio	r2,0(r2)
  802470:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  802474:	e0bffb17 	ldw	r2,-20(fp)
  802478:	10a0000c 	andi	r2,r2,32768
  80247c:	10000826 	beq	r2,zero,8024a0 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  802480:	e0bffb17 	ldw	r2,-20(fp)
  802484:	1007883a 	mov	r3,r2
  802488:	e0bff817 	ldw	r2,-32(fp)
  80248c:	10c00005 	stb	r3,0(r2)
  802490:	e0bff817 	ldw	r2,-32(fp)
  802494:	10800044 	addi	r2,r2,1
  802498:	e0bff815 	stw	r2,-32(fp)
  80249c:	00000606 	br	8024b8 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
  8024a0:	e0fff817 	ldw	r3,-32(fp)
  8024a4:	e0bffd17 	ldw	r2,-12(fp)
  8024a8:	1880071e 	bne	r3,r2,8024c8 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
  8024ac:	e0bfff17 	ldw	r2,-4(fp)
  8024b0:	1090000c 	andi	r2,r2,16384
  8024b4:	1000061e 	bne	r2,zero,8024d0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  8024b8:	e0fff817 	ldw	r3,-32(fp)
  8024bc:	e0bffa17 	ldw	r2,-24(fp)
  8024c0:	18bfe936 	bltu	r3,r2,802468 <altera_avalon_jtag_uart_read+0x44>
  8024c4:	00000306 	br	8024d4 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  8024c8:	0001883a 	nop
  8024cc:	00000106 	br	8024d4 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
  8024d0:	0001883a 	nop
    
  }

  if (ptr != buffer)
  8024d4:	e0fff817 	ldw	r3,-32(fp)
  8024d8:	e0bffd17 	ldw	r2,-12(fp)
  8024dc:	18800426 	beq	r3,r2,8024f0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
  8024e0:	e0fff817 	ldw	r3,-32(fp)
  8024e4:	e0bffd17 	ldw	r2,-12(fp)
  8024e8:	1885c83a 	sub	r2,r3,r2
  8024ec:	00000606 	br	802508 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
  8024f0:	e0bfff17 	ldw	r2,-4(fp)
  8024f4:	1090000c 	andi	r2,r2,16384
  8024f8:	10000226 	beq	r2,zero,802504 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
  8024fc:	00bffd44 	movi	r2,-11
  802500:	00000106 	br	802508 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
  802504:	00bffec4 	movi	r2,-5
}
  802508:	e037883a 	mov	sp,fp
  80250c:	df000017 	ldw	fp,0(sp)
  802510:	dec00104 	addi	sp,sp,4
  802514:	f800283a 	ret

00802518 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  802518:	defff904 	addi	sp,sp,-28
  80251c:	df000615 	stw	fp,24(sp)
  802520:	df000604 	addi	fp,sp,24
  802524:	e13ffc15 	stw	r4,-16(fp)
  802528:	e17ffd15 	stw	r5,-12(fp)
  80252c:	e1bffe15 	stw	r6,-8(fp)
  802530:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  802534:	e0bffc17 	ldw	r2,-16(fp)
  802538:	10800017 	ldw	r2,0(r2)
  80253c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  802540:	e0bffe17 	ldw	r2,-8(fp)
  802544:	e0fffd17 	ldw	r3,-12(fp)
  802548:	1885883a 	add	r2,r3,r2
  80254c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  802550:	00000f06 	br	802590 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  802554:	e0bffa17 	ldw	r2,-24(fp)
  802558:	10800104 	addi	r2,r2,4
  80255c:	10800037 	ldwio	r2,0(r2)
  802560:	10bfffec 	andhi	r2,r2,65535
  802564:	10000a26 	beq	r2,zero,802590 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  802568:	e0bffa17 	ldw	r2,-24(fp)
  80256c:	e0fffd17 	ldw	r3,-12(fp)
  802570:	18c00003 	ldbu	r3,0(r3)
  802574:	18c03fcc 	andi	r3,r3,255
  802578:	18c0201c 	xori	r3,r3,128
  80257c:	18ffe004 	addi	r3,r3,-128
  802580:	e13ffd17 	ldw	r4,-12(fp)
  802584:	21000044 	addi	r4,r4,1
  802588:	e13ffd15 	stw	r4,-12(fp)
  80258c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  802590:	e0fffd17 	ldw	r3,-12(fp)
  802594:	e0bffb17 	ldw	r2,-20(fp)
  802598:	18bfee36 	bltu	r3,r2,802554 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  80259c:	e0bffe17 	ldw	r2,-8(fp)
}
  8025a0:	e037883a 	mov	sp,fp
  8025a4:	df000017 	ldw	fp,0(sp)
  8025a8:	dec00104 	addi	sp,sp,4
  8025ac:	f800283a 	ret

008025b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8025b0:	defffa04 	addi	sp,sp,-24
  8025b4:	dfc00515 	stw	ra,20(sp)
  8025b8:	df000415 	stw	fp,16(sp)
  8025bc:	df000404 	addi	fp,sp,16
  8025c0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8025c4:	0007883a 	mov	r3,zero
  8025c8:	e0bfff17 	ldw	r2,-4(fp)
  8025cc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8025d0:	e0bfff17 	ldw	r2,-4(fp)
  8025d4:	10800104 	addi	r2,r2,4
  8025d8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8025dc:	0005303a 	rdctl	r2,status
  8025e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8025e4:	e0fffd17 	ldw	r3,-12(fp)
  8025e8:	00bfff84 	movi	r2,-2
  8025ec:	1884703a 	and	r2,r3,r2
  8025f0:	1001703a 	wrctl	status,r2
  
  return context;
  8025f4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8025f8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8025fc:	08031b80 	call	8031b8 <alt_tick>
  802600:	e0bffc17 	ldw	r2,-16(fp)
  802604:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802608:	e0bffe17 	ldw	r2,-8(fp)
  80260c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  802610:	e037883a 	mov	sp,fp
  802614:	dfc00117 	ldw	ra,4(sp)
  802618:	df000017 	ldw	fp,0(sp)
  80261c:	dec00204 	addi	sp,sp,8
  802620:	f800283a 	ret

00802624 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  802624:	defff804 	addi	sp,sp,-32
  802628:	dfc00715 	stw	ra,28(sp)
  80262c:	df000615 	stw	fp,24(sp)
  802630:	df000604 	addi	fp,sp,24
  802634:	e13ffc15 	stw	r4,-16(fp)
  802638:	e17ffd15 	stw	r5,-12(fp)
  80263c:	e1bffe15 	stw	r6,-8(fp)
  802640:	e1ffff15 	stw	r7,-4(fp)
  802644:	e0bfff17 	ldw	r2,-4(fp)
  802648:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80264c:	00802034 	movhi	r2,128
  802650:	10901504 	addi	r2,r2,16468
  802654:	10800017 	ldw	r2,0(r2)
  802658:	1000041e 	bne	r2,zero,80266c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  80265c:	00802034 	movhi	r2,128
  802660:	10901504 	addi	r2,r2,16468
  802664:	e0fffb17 	ldw	r3,-20(fp)
  802668:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80266c:	e0bffc17 	ldw	r2,-16(fp)
  802670:	10800104 	addi	r2,r2,4
  802674:	00c001c4 	movi	r3,7
  802678:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80267c:	d8000015 	stw	zero,0(sp)
  802680:	e13ffd17 	ldw	r4,-12(fp)
  802684:	e17ffe17 	ldw	r5,-8(fp)
  802688:	01802034 	movhi	r6,128
  80268c:	31896c04 	addi	r6,r6,9648
  802690:	e1fffc17 	ldw	r7,-16(fp)
  802694:	08029e80 	call	8029e8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  802698:	e037883a 	mov	sp,fp
  80269c:	dfc00117 	ldw	ra,4(sp)
  8026a0:	df000017 	ldw	fp,0(sp)
  8026a4:	dec00204 	addi	sp,sp,8
  8026a8:	f800283a 	ret

008026ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8026ac:	defffe04 	addi	sp,sp,-8
  8026b0:	dfc00115 	stw	ra,4(sp)
  8026b4:	df000015 	stw	fp,0(sp)
  8026b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8026bc:	00802034 	movhi	r2,128
  8026c0:	108f5404 	addi	r2,r2,15696
  8026c4:	10800017 	ldw	r2,0(r2)
  8026c8:	10000526 	beq	r2,zero,8026e0 <alt_get_errno+0x34>
  8026cc:	00802034 	movhi	r2,128
  8026d0:	108f5404 	addi	r2,r2,15696
  8026d4:	10800017 	ldw	r2,0(r2)
  8026d8:	103ee83a 	callr	r2
  8026dc:	00000206 	br	8026e8 <alt_get_errno+0x3c>
  8026e0:	00802034 	movhi	r2,128
  8026e4:	10901004 	addi	r2,r2,16448
}
  8026e8:	e037883a 	mov	sp,fp
  8026ec:	dfc00117 	ldw	ra,4(sp)
  8026f0:	df000017 	ldw	fp,0(sp)
  8026f4:	dec00204 	addi	sp,sp,8
  8026f8:	f800283a 	ret

008026fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8026fc:	defffb04 	addi	sp,sp,-20
  802700:	dfc00415 	stw	ra,16(sp)
  802704:	df000315 	stw	fp,12(sp)
  802708:	df000304 	addi	fp,sp,12
  80270c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802710:	e0bfff17 	ldw	r2,-4(fp)
  802714:	10000716 	blt	r2,zero,802734 <close+0x38>
  802718:	e13fff17 	ldw	r4,-4(fp)
  80271c:	01400304 	movi	r5,12
  802720:	08014000 	call	801400 <__mulsi3>
  802724:	00c02034 	movhi	r3,128
  802728:	18ceed04 	addi	r3,r3,15284
  80272c:	10c5883a 	add	r2,r2,r3
  802730:	00000106 	br	802738 <close+0x3c>
  802734:	0005883a 	mov	r2,zero
  802738:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80273c:	e0bffd17 	ldw	r2,-12(fp)
  802740:	10001826 	beq	r2,zero,8027a4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802744:	e0bffd17 	ldw	r2,-12(fp)
  802748:	10800017 	ldw	r2,0(r2)
  80274c:	10800417 	ldw	r2,16(r2)
  802750:	10000626 	beq	r2,zero,80276c <close+0x70>
  802754:	e0bffd17 	ldw	r2,-12(fp)
  802758:	10800017 	ldw	r2,0(r2)
  80275c:	10800417 	ldw	r2,16(r2)
  802760:	e13ffd17 	ldw	r4,-12(fp)
  802764:	103ee83a 	callr	r2
  802768:	00000106 	br	802770 <close+0x74>
  80276c:	0005883a 	mov	r2,zero
  802770:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802774:	e13fff17 	ldw	r4,-4(fp)
  802778:	08030a00 	call	8030a0 <alt_release_fd>
    if (rval < 0)
  80277c:	e0bffe17 	ldw	r2,-8(fp)
  802780:	1000060e 	bge	r2,zero,80279c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  802784:	08026ac0 	call	8026ac <alt_get_errno>
  802788:	e0fffe17 	ldw	r3,-8(fp)
  80278c:	00c7c83a 	sub	r3,zero,r3
  802790:	10c00015 	stw	r3,0(r2)
      return -1;
  802794:	00bfffc4 	movi	r2,-1
  802798:	00000606 	br	8027b4 <close+0xb8>
    }
    return 0;
  80279c:	0005883a 	mov	r2,zero
  8027a0:	00000406 	br	8027b4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8027a4:	08026ac0 	call	8026ac <alt_get_errno>
  8027a8:	00c01444 	movi	r3,81
  8027ac:	10c00015 	stw	r3,0(r2)
    return -1;
  8027b0:	00bfffc4 	movi	r2,-1
  }
}
  8027b4:	e037883a 	mov	sp,fp
  8027b8:	dfc00117 	ldw	ra,4(sp)
  8027bc:	df000017 	ldw	fp,0(sp)
  8027c0:	dec00204 	addi	sp,sp,8
  8027c4:	f800283a 	ret

008027c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8027c8:	deffff04 	addi	sp,sp,-4
  8027cc:	df000015 	stw	fp,0(sp)
  8027d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8027d4:	e037883a 	mov	sp,fp
  8027d8:	df000017 	ldw	fp,0(sp)
  8027dc:	dec00104 	addi	sp,sp,4
  8027e0:	f800283a 	ret

008027e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8027e4:	defffc04 	addi	sp,sp,-16
  8027e8:	df000315 	stw	fp,12(sp)
  8027ec:	df000304 	addi	fp,sp,12
  8027f0:	e13ffd15 	stw	r4,-12(fp)
  8027f4:	e17ffe15 	stw	r5,-8(fp)
  8027f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8027fc:	e0bfff17 	ldw	r2,-4(fp)
}
  802800:	e037883a 	mov	sp,fp
  802804:	df000017 	ldw	fp,0(sp)
  802808:	dec00104 	addi	sp,sp,4
  80280c:	f800283a 	ret

00802810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802810:	defffe04 	addi	sp,sp,-8
  802814:	dfc00115 	stw	ra,4(sp)
  802818:	df000015 	stw	fp,0(sp)
  80281c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802820:	00802034 	movhi	r2,128
  802824:	108f5404 	addi	r2,r2,15696
  802828:	10800017 	ldw	r2,0(r2)
  80282c:	10000526 	beq	r2,zero,802844 <alt_get_errno+0x34>
  802830:	00802034 	movhi	r2,128
  802834:	108f5404 	addi	r2,r2,15696
  802838:	10800017 	ldw	r2,0(r2)
  80283c:	103ee83a 	callr	r2
  802840:	00000206 	br	80284c <alt_get_errno+0x3c>
  802844:	00802034 	movhi	r2,128
  802848:	10901004 	addi	r2,r2,16448
}
  80284c:	e037883a 	mov	sp,fp
  802850:	dfc00117 	ldw	ra,4(sp)
  802854:	df000017 	ldw	fp,0(sp)
  802858:	dec00204 	addi	sp,sp,8
  80285c:	f800283a 	ret

00802860 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  802860:	defffa04 	addi	sp,sp,-24
  802864:	dfc00515 	stw	ra,20(sp)
  802868:	df000415 	stw	fp,16(sp)
  80286c:	df000404 	addi	fp,sp,16
  802870:	e13ffe15 	stw	r4,-8(fp)
  802874:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  802878:	e0bffe17 	ldw	r2,-8(fp)
  80287c:	10000326 	beq	r2,zero,80288c <alt_dev_llist_insert+0x2c>
  802880:	e0bffe17 	ldw	r2,-8(fp)
  802884:	10800217 	ldw	r2,8(r2)
  802888:	1000051e 	bne	r2,zero,8028a0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
  80288c:	08028100 	call	802810 <alt_get_errno>
  802890:	00c00584 	movi	r3,22
  802894:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  802898:	00bffa84 	movi	r2,-22
  80289c:	00001306 	br	8028ec <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8028a0:	e0bffe17 	ldw	r2,-8(fp)
  8028a4:	e0ffff17 	ldw	r3,-4(fp)
  8028a8:	e0fffc15 	stw	r3,-16(fp)
  8028ac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8028b0:	e0bffd17 	ldw	r2,-12(fp)
  8028b4:	e0fffc17 	ldw	r3,-16(fp)
  8028b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8028bc:	e0bffc17 	ldw	r2,-16(fp)
  8028c0:	10c00017 	ldw	r3,0(r2)
  8028c4:	e0bffd17 	ldw	r2,-12(fp)
  8028c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8028cc:	e0bffc17 	ldw	r2,-16(fp)
  8028d0:	10800017 	ldw	r2,0(r2)
  8028d4:	e0fffd17 	ldw	r3,-12(fp)
  8028d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8028dc:	e0bffc17 	ldw	r2,-16(fp)
  8028e0:	e0fffd17 	ldw	r3,-12(fp)
  8028e4:	10c00015 	stw	r3,0(r2)

  return 0;  
  8028e8:	0005883a 	mov	r2,zero
}
  8028ec:	e037883a 	mov	sp,fp
  8028f0:	dfc00117 	ldw	ra,4(sp)
  8028f4:	df000017 	ldw	fp,0(sp)
  8028f8:	dec00204 	addi	sp,sp,8
  8028fc:	f800283a 	ret

00802900 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  802900:	defffd04 	addi	sp,sp,-12
  802904:	dfc00215 	stw	ra,8(sp)
  802908:	df000115 	stw	fp,4(sp)
  80290c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802910:	00802034 	movhi	r2,128
  802914:	108e7d04 	addi	r2,r2,14836
  802918:	e0bfff15 	stw	r2,-4(fp)
  80291c:	00000606 	br	802938 <_do_ctors+0x38>
        (*ctor) (); 
  802920:	e0bfff17 	ldw	r2,-4(fp)
  802924:	10800017 	ldw	r2,0(r2)
  802928:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80292c:	e0bfff17 	ldw	r2,-4(fp)
  802930:	10bfff04 	addi	r2,r2,-4
  802934:	e0bfff15 	stw	r2,-4(fp)
  802938:	e0ffff17 	ldw	r3,-4(fp)
  80293c:	00802034 	movhi	r2,128
  802940:	108e7e04 	addi	r2,r2,14840
  802944:	18bff62e 	bgeu	r3,r2,802920 <_do_ctors+0x20>
        (*ctor) (); 
}
  802948:	e037883a 	mov	sp,fp
  80294c:	dfc00117 	ldw	ra,4(sp)
  802950:	df000017 	ldw	fp,0(sp)
  802954:	dec00204 	addi	sp,sp,8
  802958:	f800283a 	ret

0080295c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80295c:	defffd04 	addi	sp,sp,-12
  802960:	dfc00215 	stw	ra,8(sp)
  802964:	df000115 	stw	fp,4(sp)
  802968:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80296c:	00802034 	movhi	r2,128
  802970:	108e7d04 	addi	r2,r2,14836
  802974:	e0bfff15 	stw	r2,-4(fp)
  802978:	00000606 	br	802994 <_do_dtors+0x38>
        (*dtor) (); 
  80297c:	e0bfff17 	ldw	r2,-4(fp)
  802980:	10800017 	ldw	r2,0(r2)
  802984:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802988:	e0bfff17 	ldw	r2,-4(fp)
  80298c:	10bfff04 	addi	r2,r2,-4
  802990:	e0bfff15 	stw	r2,-4(fp)
  802994:	e0ffff17 	ldw	r3,-4(fp)
  802998:	00802034 	movhi	r2,128
  80299c:	108e7e04 	addi	r2,r2,14840
  8029a0:	18bff62e 	bgeu	r3,r2,80297c <_do_dtors+0x20>
        (*dtor) (); 
}
  8029a4:	e037883a 	mov	sp,fp
  8029a8:	dfc00117 	ldw	ra,4(sp)
  8029ac:	df000017 	ldw	fp,0(sp)
  8029b0:	dec00204 	addi	sp,sp,8
  8029b4:	f800283a 	ret

008029b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8029b8:	defffe04 	addi	sp,sp,-8
  8029bc:	dfc00115 	stw	ra,4(sp)
  8029c0:	df000015 	stw	fp,0(sp)
  8029c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8029c8:	0009883a 	mov	r4,zero
  8029cc:	01440004 	movi	r5,4096
  8029d0:	08035540 	call	803554 <alt_icache_flush>
#endif
}
  8029d4:	e037883a 	mov	sp,fp
  8029d8:	dfc00117 	ldw	ra,4(sp)
  8029dc:	df000017 	ldw	fp,0(sp)
  8029e0:	dec00204 	addi	sp,sp,8
  8029e4:	f800283a 	ret

008029e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8029e8:	defff904 	addi	sp,sp,-28
  8029ec:	dfc00615 	stw	ra,24(sp)
  8029f0:	df000515 	stw	fp,20(sp)
  8029f4:	df000504 	addi	fp,sp,20
  8029f8:	e13ffc15 	stw	r4,-16(fp)
  8029fc:	e17ffd15 	stw	r5,-12(fp)
  802a00:	e1bffe15 	stw	r6,-8(fp)
  802a04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  802a08:	e0800217 	ldw	r2,8(fp)
  802a0c:	d8800015 	stw	r2,0(sp)
  802a10:	e13ffc17 	ldw	r4,-16(fp)
  802a14:	e17ffd17 	ldw	r5,-12(fp)
  802a18:	e1bffe17 	ldw	r6,-8(fp)
  802a1c:	e1ffff17 	ldw	r7,-4(fp)
  802a20:	0802bc00 	call	802bc0 <alt_iic_isr_register>
}  
  802a24:	e037883a 	mov	sp,fp
  802a28:	dfc00117 	ldw	ra,4(sp)
  802a2c:	df000017 	ldw	fp,0(sp)
  802a30:	dec00204 	addi	sp,sp,8
  802a34:	f800283a 	ret

00802a38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  802a38:	defff904 	addi	sp,sp,-28
  802a3c:	df000615 	stw	fp,24(sp)
  802a40:	df000604 	addi	fp,sp,24
  802a44:	e13ffe15 	stw	r4,-8(fp)
  802a48:	e17fff15 	stw	r5,-4(fp)
  802a4c:	e0bfff17 	ldw	r2,-4(fp)
  802a50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802a54:	0005303a 	rdctl	r2,status
  802a58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802a5c:	e0fffb17 	ldw	r3,-20(fp)
  802a60:	00bfff84 	movi	r2,-2
  802a64:	1884703a 	and	r2,r3,r2
  802a68:	1001703a 	wrctl	status,r2
  
  return context;
  802a6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802a70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  802a74:	e0bffa17 	ldw	r2,-24(fp)
  802a78:	00c00044 	movi	r3,1
  802a7c:	1884983a 	sll	r2,r3,r2
  802a80:	1007883a 	mov	r3,r2
  802a84:	00802034 	movhi	r2,128
  802a88:	10901404 	addi	r2,r2,16464
  802a8c:	10800017 	ldw	r2,0(r2)
  802a90:	1886b03a 	or	r3,r3,r2
  802a94:	00802034 	movhi	r2,128
  802a98:	10901404 	addi	r2,r2,16464
  802a9c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802aa0:	00802034 	movhi	r2,128
  802aa4:	10901404 	addi	r2,r2,16464
  802aa8:	10800017 	ldw	r2,0(r2)
  802aac:	100170fa 	wrctl	ienable,r2
  802ab0:	e0bffc17 	ldw	r2,-16(fp)
  802ab4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802ab8:	e0bffd17 	ldw	r2,-12(fp)
  802abc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802ac0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  802ac4:	e037883a 	mov	sp,fp
  802ac8:	df000017 	ldw	fp,0(sp)
  802acc:	dec00104 	addi	sp,sp,4
  802ad0:	f800283a 	ret

00802ad4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  802ad4:	defff904 	addi	sp,sp,-28
  802ad8:	df000615 	stw	fp,24(sp)
  802adc:	df000604 	addi	fp,sp,24
  802ae0:	e13ffe15 	stw	r4,-8(fp)
  802ae4:	e17fff15 	stw	r5,-4(fp)
  802ae8:	e0bfff17 	ldw	r2,-4(fp)
  802aec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802af0:	0005303a 	rdctl	r2,status
  802af4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802af8:	e0fffb17 	ldw	r3,-20(fp)
  802afc:	00bfff84 	movi	r2,-2
  802b00:	1884703a 	and	r2,r3,r2
  802b04:	1001703a 	wrctl	status,r2
  
  return context;
  802b08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802b0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  802b10:	e0bffa17 	ldw	r2,-24(fp)
  802b14:	00c00044 	movi	r3,1
  802b18:	1884983a 	sll	r2,r3,r2
  802b1c:	0084303a 	nor	r2,zero,r2
  802b20:	1007883a 	mov	r3,r2
  802b24:	00802034 	movhi	r2,128
  802b28:	10901404 	addi	r2,r2,16464
  802b2c:	10800017 	ldw	r2,0(r2)
  802b30:	1886703a 	and	r3,r3,r2
  802b34:	00802034 	movhi	r2,128
  802b38:	10901404 	addi	r2,r2,16464
  802b3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802b40:	00802034 	movhi	r2,128
  802b44:	10901404 	addi	r2,r2,16464
  802b48:	10800017 	ldw	r2,0(r2)
  802b4c:	100170fa 	wrctl	ienable,r2
  802b50:	e0bffc17 	ldw	r2,-16(fp)
  802b54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802b58:	e0bffd17 	ldw	r2,-12(fp)
  802b5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802b60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  802b64:	e037883a 	mov	sp,fp
  802b68:	df000017 	ldw	fp,0(sp)
  802b6c:	dec00104 	addi	sp,sp,4
  802b70:	f800283a 	ret

00802b74 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  802b74:	defffc04 	addi	sp,sp,-16
  802b78:	df000315 	stw	fp,12(sp)
  802b7c:	df000304 	addi	fp,sp,12
  802b80:	e13ffe15 	stw	r4,-8(fp)
  802b84:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  802b88:	000530fa 	rdctl	r2,ienable
  802b8c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  802b90:	e0bfff17 	ldw	r2,-4(fp)
  802b94:	00c00044 	movi	r3,1
  802b98:	1884983a 	sll	r2,r3,r2
  802b9c:	1007883a 	mov	r3,r2
  802ba0:	e0bffd17 	ldw	r2,-12(fp)
  802ba4:	1884703a 	and	r2,r3,r2
  802ba8:	1004c03a 	cmpne	r2,r2,zero
  802bac:	10803fcc 	andi	r2,r2,255
}
  802bb0:	e037883a 	mov	sp,fp
  802bb4:	df000017 	ldw	fp,0(sp)
  802bb8:	dec00104 	addi	sp,sp,4
  802bbc:	f800283a 	ret

00802bc0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  802bc0:	defff504 	addi	sp,sp,-44
  802bc4:	dfc00a15 	stw	ra,40(sp)
  802bc8:	df000915 	stw	fp,36(sp)
  802bcc:	df000904 	addi	fp,sp,36
  802bd0:	e13ffc15 	stw	r4,-16(fp)
  802bd4:	e17ffd15 	stw	r5,-12(fp)
  802bd8:	e1bffe15 	stw	r6,-8(fp)
  802bdc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  802be0:	00bffa84 	movi	r2,-22
  802be4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  802be8:	e0bffd17 	ldw	r2,-12(fp)
  802bec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  802bf0:	e0bff817 	ldw	r2,-32(fp)
  802bf4:	10800808 	cmpgei	r2,r2,32
  802bf8:	1000271e 	bne	r2,zero,802c98 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802bfc:	0005303a 	rdctl	r2,status
  802c00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802c04:	e0fffa17 	ldw	r3,-24(fp)
  802c08:	00bfff84 	movi	r2,-2
  802c0c:	1884703a 	and	r2,r3,r2
  802c10:	1001703a 	wrctl	status,r2
  
  return context;
  802c14:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  802c18:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  802c1c:	00c02034 	movhi	r3,128
  802c20:	18d01704 	addi	r3,r3,16476
  802c24:	e0bff817 	ldw	r2,-32(fp)
  802c28:	100490fa 	slli	r2,r2,3
  802c2c:	1885883a 	add	r2,r3,r2
  802c30:	e0fffe17 	ldw	r3,-8(fp)
  802c34:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  802c38:	00c02034 	movhi	r3,128
  802c3c:	18d01704 	addi	r3,r3,16476
  802c40:	e0bff817 	ldw	r2,-32(fp)
  802c44:	100490fa 	slli	r2,r2,3
  802c48:	1885883a 	add	r2,r3,r2
  802c4c:	10800104 	addi	r2,r2,4
  802c50:	e0ffff17 	ldw	r3,-4(fp)
  802c54:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  802c58:	e0bffe17 	ldw	r2,-8(fp)
  802c5c:	10000526 	beq	r2,zero,802c74 <alt_iic_isr_register+0xb4>
  802c60:	e0bff817 	ldw	r2,-32(fp)
  802c64:	e13ffc17 	ldw	r4,-16(fp)
  802c68:	100b883a 	mov	r5,r2
  802c6c:	0802a380 	call	802a38 <alt_ic_irq_enable>
  802c70:	00000406 	br	802c84 <alt_iic_isr_register+0xc4>
  802c74:	e0bff817 	ldw	r2,-32(fp)
  802c78:	e13ffc17 	ldw	r4,-16(fp)
  802c7c:	100b883a 	mov	r5,r2
  802c80:	0802ad40 	call	802ad4 <alt_ic_irq_disable>
  802c84:	e0bff715 	stw	r2,-36(fp)
  802c88:	e0bff917 	ldw	r2,-28(fp)
  802c8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802c90:	e0bffb17 	ldw	r2,-20(fp)
  802c94:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  802c98:	e0bff717 	ldw	r2,-36(fp)
}
  802c9c:	e037883a 	mov	sp,fp
  802ca0:	dfc00117 	ldw	ra,4(sp)
  802ca4:	df000017 	ldw	fp,0(sp)
  802ca8:	dec00204 	addi	sp,sp,8
  802cac:	f800283a 	ret

00802cb0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  802cb0:	defff804 	addi	sp,sp,-32
  802cb4:	dfc00715 	stw	ra,28(sp)
  802cb8:	df000615 	stw	fp,24(sp)
  802cbc:	dc000515 	stw	r16,20(sp)
  802cc0:	df000504 	addi	fp,sp,20
  802cc4:	e13ffc15 	stw	r4,-16(fp)
  802cc8:	e17ffd15 	stw	r5,-12(fp)
  802ccc:	e1bffe15 	stw	r6,-8(fp)
  802cd0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  802cd4:	e13ffd17 	ldw	r4,-12(fp)
  802cd8:	e17ffe17 	ldw	r5,-8(fp)
  802cdc:	e1bfff17 	ldw	r6,-4(fp)
  802ce0:	0802f480 	call	802f48 <open>
  802ce4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  802ce8:	e0bffb17 	ldw	r2,-20(fp)
  802cec:	10002216 	blt	r2,zero,802d78 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  802cf0:	04002034 	movhi	r16,128
  802cf4:	840eed04 	addi	r16,r16,15284
  802cf8:	e0bffb17 	ldw	r2,-20(fp)
  802cfc:	1009883a 	mov	r4,r2
  802d00:	01400304 	movi	r5,12
  802d04:	08014000 	call	801400 <__mulsi3>
  802d08:	8085883a 	add	r2,r16,r2
  802d0c:	10c00017 	ldw	r3,0(r2)
  802d10:	e0bffc17 	ldw	r2,-16(fp)
  802d14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  802d18:	04002034 	movhi	r16,128
  802d1c:	840eed04 	addi	r16,r16,15284
  802d20:	e0bffb17 	ldw	r2,-20(fp)
  802d24:	1009883a 	mov	r4,r2
  802d28:	01400304 	movi	r5,12
  802d2c:	08014000 	call	801400 <__mulsi3>
  802d30:	8085883a 	add	r2,r16,r2
  802d34:	10800104 	addi	r2,r2,4
  802d38:	10c00017 	ldw	r3,0(r2)
  802d3c:	e0bffc17 	ldw	r2,-16(fp)
  802d40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  802d44:	04002034 	movhi	r16,128
  802d48:	840eed04 	addi	r16,r16,15284
  802d4c:	e0bffb17 	ldw	r2,-20(fp)
  802d50:	1009883a 	mov	r4,r2
  802d54:	01400304 	movi	r5,12
  802d58:	08014000 	call	801400 <__mulsi3>
  802d5c:	8085883a 	add	r2,r16,r2
  802d60:	10800204 	addi	r2,r2,8
  802d64:	10c00017 	ldw	r3,0(r2)
  802d68:	e0bffc17 	ldw	r2,-16(fp)
  802d6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  802d70:	e13ffb17 	ldw	r4,-20(fp)
  802d74:	08030a00 	call	8030a0 <alt_release_fd>
  }
} 
  802d78:	e037883a 	mov	sp,fp
  802d7c:	dfc00217 	ldw	ra,8(sp)
  802d80:	df000117 	ldw	fp,4(sp)
  802d84:	dc000017 	ldw	r16,0(sp)
  802d88:	dec00304 	addi	sp,sp,12
  802d8c:	f800283a 	ret

00802d90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802d90:	defffb04 	addi	sp,sp,-20
  802d94:	dfc00415 	stw	ra,16(sp)
  802d98:	df000315 	stw	fp,12(sp)
  802d9c:	df000304 	addi	fp,sp,12
  802da0:	e13ffd15 	stw	r4,-12(fp)
  802da4:	e17ffe15 	stw	r5,-8(fp)
  802da8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802dac:	01002034 	movhi	r4,128
  802db0:	210ef004 	addi	r4,r4,15296
  802db4:	e17ffd17 	ldw	r5,-12(fp)
  802db8:	01800044 	movi	r6,1
  802dbc:	01c07fc4 	movi	r7,511
  802dc0:	0802cb00 	call	802cb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  802dc4:	01002034 	movhi	r4,128
  802dc8:	210eed04 	addi	r4,r4,15284
  802dcc:	e17ffe17 	ldw	r5,-8(fp)
  802dd0:	000d883a 	mov	r6,zero
  802dd4:	01c07fc4 	movi	r7,511
  802dd8:	0802cb00 	call	802cb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  802ddc:	01002034 	movhi	r4,128
  802de0:	210ef304 	addi	r4,r4,15308
  802de4:	e17fff17 	ldw	r5,-4(fp)
  802de8:	01800044 	movi	r6,1
  802dec:	01c07fc4 	movi	r7,511
  802df0:	0802cb00 	call	802cb0 <alt_open_fd>
}  
  802df4:	e037883a 	mov	sp,fp
  802df8:	dfc00117 	ldw	ra,4(sp)
  802dfc:	df000017 	ldw	fp,0(sp)
  802e00:	dec00204 	addi	sp,sp,8
  802e04:	f800283a 	ret

00802e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802e08:	defffe04 	addi	sp,sp,-8
  802e0c:	dfc00115 	stw	ra,4(sp)
  802e10:	df000015 	stw	fp,0(sp)
  802e14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802e18:	00802034 	movhi	r2,128
  802e1c:	108f5404 	addi	r2,r2,15696
  802e20:	10800017 	ldw	r2,0(r2)
  802e24:	10000526 	beq	r2,zero,802e3c <alt_get_errno+0x34>
  802e28:	00802034 	movhi	r2,128
  802e2c:	108f5404 	addi	r2,r2,15696
  802e30:	10800017 	ldw	r2,0(r2)
  802e34:	103ee83a 	callr	r2
  802e38:	00000206 	br	802e44 <alt_get_errno+0x3c>
  802e3c:	00802034 	movhi	r2,128
  802e40:	10901004 	addi	r2,r2,16448
}
  802e44:	e037883a 	mov	sp,fp
  802e48:	dfc00117 	ldw	ra,4(sp)
  802e4c:	df000017 	ldw	fp,0(sp)
  802e50:	dec00204 	addi	sp,sp,8
  802e54:	f800283a 	ret

00802e58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  802e58:	defffb04 	addi	sp,sp,-20
  802e5c:	dfc00415 	stw	ra,16(sp)
  802e60:	df000315 	stw	fp,12(sp)
  802e64:	dc000215 	stw	r16,8(sp)
  802e68:	df000204 	addi	fp,sp,8
  802e6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  802e70:	e0bfff17 	ldw	r2,-4(fp)
  802e74:	10800217 	ldw	r2,8(r2)
  802e78:	10d00034 	orhi	r3,r2,16384
  802e7c:	e0bfff17 	ldw	r2,-4(fp)
  802e80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  802e84:	e03ffe15 	stw	zero,-8(fp)
  802e88:	00002206 	br	802f14 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  802e8c:	04002034 	movhi	r16,128
  802e90:	840eed04 	addi	r16,r16,15284
  802e94:	e0bffe17 	ldw	r2,-8(fp)
  802e98:	1009883a 	mov	r4,r2
  802e9c:	01400304 	movi	r5,12
  802ea0:	08014000 	call	801400 <__mulsi3>
  802ea4:	8085883a 	add	r2,r16,r2
  802ea8:	10c00017 	ldw	r3,0(r2)
  802eac:	e0bfff17 	ldw	r2,-4(fp)
  802eb0:	10800017 	ldw	r2,0(r2)
  802eb4:	1880141e 	bne	r3,r2,802f08 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  802eb8:	04002034 	movhi	r16,128
  802ebc:	840eed04 	addi	r16,r16,15284
  802ec0:	e0bffe17 	ldw	r2,-8(fp)
  802ec4:	1009883a 	mov	r4,r2
  802ec8:	01400304 	movi	r5,12
  802ecc:	08014000 	call	801400 <__mulsi3>
  802ed0:	8085883a 	add	r2,r16,r2
  802ed4:	10800204 	addi	r2,r2,8
  802ed8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  802edc:	10000a0e 	bge	r2,zero,802f08 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  802ee0:	e13ffe17 	ldw	r4,-8(fp)
  802ee4:	01400304 	movi	r5,12
  802ee8:	08014000 	call	801400 <__mulsi3>
  802eec:	00c02034 	movhi	r3,128
  802ef0:	18ceed04 	addi	r3,r3,15284
  802ef4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  802ef8:	e0bfff17 	ldw	r2,-4(fp)
  802efc:	18800226 	beq	r3,r2,802f08 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  802f00:	00bffcc4 	movi	r2,-13
  802f04:	00000a06 	br	802f30 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  802f08:	e0bffe17 	ldw	r2,-8(fp)
  802f0c:	10800044 	addi	r2,r2,1
  802f10:	e0bffe15 	stw	r2,-8(fp)
  802f14:	00802034 	movhi	r2,128
  802f18:	108f5304 	addi	r2,r2,15692
  802f1c:	10800017 	ldw	r2,0(r2)
  802f20:	1007883a 	mov	r3,r2
  802f24:	e0bffe17 	ldw	r2,-8(fp)
  802f28:	18bfd82e 	bgeu	r3,r2,802e8c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  802f2c:	0005883a 	mov	r2,zero
}
  802f30:	e037883a 	mov	sp,fp
  802f34:	dfc00217 	ldw	ra,8(sp)
  802f38:	df000117 	ldw	fp,4(sp)
  802f3c:	dc000017 	ldw	r16,0(sp)
  802f40:	dec00304 	addi	sp,sp,12
  802f44:	f800283a 	ret

00802f48 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  802f48:	defff604 	addi	sp,sp,-40
  802f4c:	dfc00915 	stw	ra,36(sp)
  802f50:	df000815 	stw	fp,32(sp)
  802f54:	df000804 	addi	fp,sp,32
  802f58:	e13ffd15 	stw	r4,-12(fp)
  802f5c:	e17ffe15 	stw	r5,-8(fp)
  802f60:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  802f64:	00bfffc4 	movi	r2,-1
  802f68:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  802f6c:	00bffb44 	movi	r2,-19
  802f70:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  802f74:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  802f78:	e13ffd17 	ldw	r4,-12(fp)
  802f7c:	01402034 	movhi	r5,128
  802f80:	294f5104 	addi	r5,r5,15684
  802f84:	08032dc0 	call	8032dc <alt_find_dev>
  802f88:	e0bff815 	stw	r2,-32(fp)
  802f8c:	e0bff817 	ldw	r2,-32(fp)
  802f90:	1000051e 	bne	r2,zero,802fa8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  802f94:	e13ffd17 	ldw	r4,-12(fp)
  802f98:	080336c0 	call	80336c <alt_find_file>
  802f9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  802fa0:	00800044 	movi	r2,1
  802fa4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  802fa8:	e0bff817 	ldw	r2,-32(fp)
  802fac:	10002a26 	beq	r2,zero,803058 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  802fb0:	e13ff817 	ldw	r4,-32(fp)
  802fb4:	08034800 	call	803480 <alt_get_fd>
  802fb8:	e0bff915 	stw	r2,-28(fp)
  802fbc:	e0bff917 	ldw	r2,-28(fp)
  802fc0:	1000030e 	bge	r2,zero,802fd0 <open+0x88>
    {
      status = index;
  802fc4:	e0bff917 	ldw	r2,-28(fp)
  802fc8:	e0bffa15 	stw	r2,-24(fp)
  802fcc:	00002406 	br	803060 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  802fd0:	e13ff917 	ldw	r4,-28(fp)
  802fd4:	01400304 	movi	r5,12
  802fd8:	08014000 	call	801400 <__mulsi3>
  802fdc:	00c02034 	movhi	r3,128
  802fe0:	18ceed04 	addi	r3,r3,15284
  802fe4:	10c5883a 	add	r2,r2,r3
  802fe8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  802fec:	e0fffe17 	ldw	r3,-8(fp)
  802ff0:	00900034 	movhi	r2,16384
  802ff4:	10bfffc4 	addi	r2,r2,-1
  802ff8:	1886703a 	and	r3,r3,r2
  802ffc:	e0bffc17 	ldw	r2,-16(fp)
  803000:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  803004:	e0bffb17 	ldw	r2,-20(fp)
  803008:	1000051e 	bne	r2,zero,803020 <open+0xd8>
  80300c:	e13ffc17 	ldw	r4,-16(fp)
  803010:	0802e580 	call	802e58 <alt_file_locked>
  803014:	e0bffa15 	stw	r2,-24(fp)
  803018:	e0bffa17 	ldw	r2,-24(fp)
  80301c:	10001016 	blt	r2,zero,803060 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  803020:	e0bff817 	ldw	r2,-32(fp)
  803024:	10800317 	ldw	r2,12(r2)
  803028:	10000826 	beq	r2,zero,80304c <open+0x104>
  80302c:	e0bff817 	ldw	r2,-32(fp)
  803030:	10800317 	ldw	r2,12(r2)
  803034:	e13ffc17 	ldw	r4,-16(fp)
  803038:	e17ffd17 	ldw	r5,-12(fp)
  80303c:	e1bffe17 	ldw	r6,-8(fp)
  803040:	e1ffff17 	ldw	r7,-4(fp)
  803044:	103ee83a 	callr	r2
  803048:	00000106 	br	803050 <open+0x108>
  80304c:	0005883a 	mov	r2,zero
  803050:	e0bffa15 	stw	r2,-24(fp)
  803054:	00000206 	br	803060 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  803058:	00bffb44 	movi	r2,-19
  80305c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  803060:	e0bffa17 	ldw	r2,-24(fp)
  803064:	1000080e 	bge	r2,zero,803088 <open+0x140>
  {
    alt_release_fd (index);  
  803068:	e13ff917 	ldw	r4,-28(fp)
  80306c:	08030a00 	call	8030a0 <alt_release_fd>
    ALT_ERRNO = -status;
  803070:	0802e080 	call	802e08 <alt_get_errno>
  803074:	e0fffa17 	ldw	r3,-24(fp)
  803078:	00c7c83a 	sub	r3,zero,r3
  80307c:	10c00015 	stw	r3,0(r2)
    return -1;
  803080:	00bfffc4 	movi	r2,-1
  803084:	00000106 	br	80308c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  803088:	e0bff917 	ldw	r2,-28(fp)
}
  80308c:	e037883a 	mov	sp,fp
  803090:	dfc00117 	ldw	ra,4(sp)
  803094:	df000017 	ldw	fp,0(sp)
  803098:	dec00204 	addi	sp,sp,8
  80309c:	f800283a 	ret

008030a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8030a0:	defffc04 	addi	sp,sp,-16
  8030a4:	dfc00315 	stw	ra,12(sp)
  8030a8:	df000215 	stw	fp,8(sp)
  8030ac:	dc000115 	stw	r16,4(sp)
  8030b0:	df000104 	addi	fp,sp,4
  8030b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8030b8:	e0bfff17 	ldw	r2,-4(fp)
  8030bc:	108000d0 	cmplti	r2,r2,3
  8030c0:	1000111e 	bne	r2,zero,803108 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  8030c4:	04002034 	movhi	r16,128
  8030c8:	840eed04 	addi	r16,r16,15284
  8030cc:	e0bfff17 	ldw	r2,-4(fp)
  8030d0:	1009883a 	mov	r4,r2
  8030d4:	01400304 	movi	r5,12
  8030d8:	08014000 	call	801400 <__mulsi3>
  8030dc:	8085883a 	add	r2,r16,r2
  8030e0:	10800204 	addi	r2,r2,8
  8030e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8030e8:	04002034 	movhi	r16,128
  8030ec:	840eed04 	addi	r16,r16,15284
  8030f0:	e0bfff17 	ldw	r2,-4(fp)
  8030f4:	1009883a 	mov	r4,r2
  8030f8:	01400304 	movi	r5,12
  8030fc:	08014000 	call	801400 <__mulsi3>
  803100:	8085883a 	add	r2,r16,r2
  803104:	10000015 	stw	zero,0(r2)
  }
}
  803108:	e037883a 	mov	sp,fp
  80310c:	dfc00217 	ldw	ra,8(sp)
  803110:	df000117 	ldw	fp,4(sp)
  803114:	dc000017 	ldw	r16,0(sp)
  803118:	dec00304 	addi	sp,sp,12
  80311c:	f800283a 	ret

00803120 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  803120:	defffa04 	addi	sp,sp,-24
  803124:	df000515 	stw	fp,20(sp)
  803128:	df000504 	addi	fp,sp,20
  80312c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803130:	0005303a 	rdctl	r2,status
  803134:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803138:	e0fffc17 	ldw	r3,-16(fp)
  80313c:	00bfff84 	movi	r2,-2
  803140:	1884703a 	and	r2,r3,r2
  803144:	1001703a 	wrctl	status,r2
  
  return context;
  803148:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80314c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  803150:	e0bfff17 	ldw	r2,-4(fp)
  803154:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  803158:	e0bffd17 	ldw	r2,-12(fp)
  80315c:	10800017 	ldw	r2,0(r2)
  803160:	e0fffd17 	ldw	r3,-12(fp)
  803164:	18c00117 	ldw	r3,4(r3)
  803168:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80316c:	e0bffd17 	ldw	r2,-12(fp)
  803170:	10800117 	ldw	r2,4(r2)
  803174:	e0fffd17 	ldw	r3,-12(fp)
  803178:	18c00017 	ldw	r3,0(r3)
  80317c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  803180:	e0bffd17 	ldw	r2,-12(fp)
  803184:	e0fffd17 	ldw	r3,-12(fp)
  803188:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80318c:	e0bffd17 	ldw	r2,-12(fp)
  803190:	e0fffd17 	ldw	r3,-12(fp)
  803194:	10c00015 	stw	r3,0(r2)
  803198:	e0bffb17 	ldw	r2,-20(fp)
  80319c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8031a0:	e0bffe17 	ldw	r2,-8(fp)
  8031a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8031a8:	e037883a 	mov	sp,fp
  8031ac:	df000017 	ldw	fp,0(sp)
  8031b0:	dec00104 	addi	sp,sp,4
  8031b4:	f800283a 	ret

008031b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8031b8:	defffb04 	addi	sp,sp,-20
  8031bc:	dfc00415 	stw	ra,16(sp)
  8031c0:	df000315 	stw	fp,12(sp)
  8031c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8031c8:	d0a00917 	ldw	r2,-32732(gp)
  8031cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8031d0:	d0a0c917 	ldw	r2,-31964(gp)
  8031d4:	10800044 	addi	r2,r2,1
  8031d8:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8031dc:	00002e06 	br	803298 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8031e0:	e0bffd17 	ldw	r2,-12(fp)
  8031e4:	10800017 	ldw	r2,0(r2)
  8031e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8031ec:	e0bffd17 	ldw	r2,-12(fp)
  8031f0:	10800403 	ldbu	r2,16(r2)
  8031f4:	10803fcc 	andi	r2,r2,255
  8031f8:	10000426 	beq	r2,zero,80320c <alt_tick+0x54>
  8031fc:	d0a0c917 	ldw	r2,-31964(gp)
  803200:	1000021e 	bne	r2,zero,80320c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  803204:	e0bffd17 	ldw	r2,-12(fp)
  803208:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80320c:	e0bffd17 	ldw	r2,-12(fp)
  803210:	10800217 	ldw	r2,8(r2)
  803214:	d0e0c917 	ldw	r3,-31964(gp)
  803218:	18801d36 	bltu	r3,r2,803290 <alt_tick+0xd8>
  80321c:	e0bffd17 	ldw	r2,-12(fp)
  803220:	10800403 	ldbu	r2,16(r2)
  803224:	10803fcc 	andi	r2,r2,255
  803228:	1000191e 	bne	r2,zero,803290 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80322c:	e0bffd17 	ldw	r2,-12(fp)
  803230:	10c00317 	ldw	r3,12(r2)
  803234:	e0bffd17 	ldw	r2,-12(fp)
  803238:	10800517 	ldw	r2,20(r2)
  80323c:	1009883a 	mov	r4,r2
  803240:	183ee83a 	callr	r3
  803244:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  803248:	e0bfff17 	ldw	r2,-4(fp)
  80324c:	1000031e 	bne	r2,zero,80325c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  803250:	e13ffd17 	ldw	r4,-12(fp)
  803254:	08031200 	call	803120 <alt_alarm_stop>
  803258:	00000d06 	br	803290 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80325c:	e0bffd17 	ldw	r2,-12(fp)
  803260:	10c00217 	ldw	r3,8(r2)
  803264:	e0bfff17 	ldw	r2,-4(fp)
  803268:	1887883a 	add	r3,r3,r2
  80326c:	e0bffd17 	ldw	r2,-12(fp)
  803270:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  803274:	e0bffd17 	ldw	r2,-12(fp)
  803278:	10c00217 	ldw	r3,8(r2)
  80327c:	d0a0c917 	ldw	r2,-31964(gp)
  803280:	1880032e 	bgeu	r3,r2,803290 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  803284:	e0bffd17 	ldw	r2,-12(fp)
  803288:	00c00044 	movi	r3,1
  80328c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  803290:	e0bffe17 	ldw	r2,-8(fp)
  803294:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803298:	e0fffd17 	ldw	r3,-12(fp)
  80329c:	d0a00904 	addi	r2,gp,-32732
  8032a0:	18bfcf1e 	bne	r3,r2,8031e0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8032a4:	0001883a 	nop
}
  8032a8:	e037883a 	mov	sp,fp
  8032ac:	dfc00117 	ldw	ra,4(sp)
  8032b0:	df000017 	ldw	fp,0(sp)
  8032b4:	dec00204 	addi	sp,sp,8
  8032b8:	f800283a 	ret

008032bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8032bc:	deffff04 	addi	sp,sp,-4
  8032c0:	df000015 	stw	fp,0(sp)
  8032c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8032c8:	000170fa 	wrctl	ienable,zero
}
  8032cc:	e037883a 	mov	sp,fp
  8032d0:	df000017 	ldw	fp,0(sp)
  8032d4:	dec00104 	addi	sp,sp,4
  8032d8:	f800283a 	ret

008032dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8032dc:	defffa04 	addi	sp,sp,-24
  8032e0:	dfc00515 	stw	ra,20(sp)
  8032e4:	df000415 	stw	fp,16(sp)
  8032e8:	df000404 	addi	fp,sp,16
  8032ec:	e13ffe15 	stw	r4,-8(fp)
  8032f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8032f4:	e0bfff17 	ldw	r2,-4(fp)
  8032f8:	10800017 	ldw	r2,0(r2)
  8032fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803300:	e13ffe17 	ldw	r4,-8(fp)
  803304:	0801d700 	call	801d70 <strlen>
  803308:	10800044 	addi	r2,r2,1
  80330c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803310:	00000d06 	br	803348 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803314:	e0bffc17 	ldw	r2,-16(fp)
  803318:	10c00217 	ldw	r3,8(r2)
  80331c:	e0bffd17 	ldw	r2,-12(fp)
  803320:	1809883a 	mov	r4,r3
  803324:	e17ffe17 	ldw	r5,-8(fp)
  803328:	100d883a 	mov	r6,r2
  80332c:	08036140 	call	803614 <memcmp>
  803330:	1000021e 	bne	r2,zero,80333c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  803334:	e0bffc17 	ldw	r2,-16(fp)
  803338:	00000706 	br	803358 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80333c:	e0bffc17 	ldw	r2,-16(fp)
  803340:	10800017 	ldw	r2,0(r2)
  803344:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803348:	e0fffc17 	ldw	r3,-16(fp)
  80334c:	e0bfff17 	ldw	r2,-4(fp)
  803350:	18bff01e 	bne	r3,r2,803314 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  803354:	0005883a 	mov	r2,zero
}
  803358:	e037883a 	mov	sp,fp
  80335c:	dfc00117 	ldw	ra,4(sp)
  803360:	df000017 	ldw	fp,0(sp)
  803364:	dec00204 	addi	sp,sp,8
  803368:	f800283a 	ret

0080336c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80336c:	defffb04 	addi	sp,sp,-20
  803370:	dfc00415 	stw	ra,16(sp)
  803374:	df000315 	stw	fp,12(sp)
  803378:	df000304 	addi	fp,sp,12
  80337c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803380:	00802034 	movhi	r2,128
  803384:	108f4f04 	addi	r2,r2,15676
  803388:	10800017 	ldw	r2,0(r2)
  80338c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803390:	00003106 	br	803458 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  803394:	e0bffd17 	ldw	r2,-12(fp)
  803398:	10800217 	ldw	r2,8(r2)
  80339c:	1009883a 	mov	r4,r2
  8033a0:	0801d700 	call	801d70 <strlen>
  8033a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8033a8:	e0bffd17 	ldw	r2,-12(fp)
  8033ac:	10c00217 	ldw	r3,8(r2)
  8033b0:	e0bffe17 	ldw	r2,-8(fp)
  8033b4:	10bfffc4 	addi	r2,r2,-1
  8033b8:	1885883a 	add	r2,r3,r2
  8033bc:	10800003 	ldbu	r2,0(r2)
  8033c0:	10803fcc 	andi	r2,r2,255
  8033c4:	1080201c 	xori	r2,r2,128
  8033c8:	10bfe004 	addi	r2,r2,-128
  8033cc:	10800bd8 	cmpnei	r2,r2,47
  8033d0:	1000031e 	bne	r2,zero,8033e0 <alt_find_file+0x74>
    {
      len -= 1;
  8033d4:	e0bffe17 	ldw	r2,-8(fp)
  8033d8:	10bfffc4 	addi	r2,r2,-1
  8033dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8033e0:	e0bffe17 	ldw	r2,-8(fp)
  8033e4:	e0ffff17 	ldw	r3,-4(fp)
  8033e8:	1885883a 	add	r2,r3,r2
  8033ec:	10800003 	ldbu	r2,0(r2)
  8033f0:	10803fcc 	andi	r2,r2,255
  8033f4:	1080201c 	xori	r2,r2,128
  8033f8:	10bfe004 	addi	r2,r2,-128
  8033fc:	10800be0 	cmpeqi	r2,r2,47
  803400:	1000081e 	bne	r2,zero,803424 <alt_find_file+0xb8>
  803404:	e0bffe17 	ldw	r2,-8(fp)
  803408:	e0ffff17 	ldw	r3,-4(fp)
  80340c:	1885883a 	add	r2,r3,r2
  803410:	10800003 	ldbu	r2,0(r2)
  803414:	10803fcc 	andi	r2,r2,255
  803418:	1080201c 	xori	r2,r2,128
  80341c:	10bfe004 	addi	r2,r2,-128
  803420:	10000a1e 	bne	r2,zero,80344c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  803424:	e0bffd17 	ldw	r2,-12(fp)
  803428:	10c00217 	ldw	r3,8(r2)
  80342c:	e0bffe17 	ldw	r2,-8(fp)
  803430:	1809883a 	mov	r4,r3
  803434:	e17fff17 	ldw	r5,-4(fp)
  803438:	100d883a 	mov	r6,r2
  80343c:	08036140 	call	803614 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803440:	1000021e 	bne	r2,zero,80344c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  803444:	e0bffd17 	ldw	r2,-12(fp)
  803448:	00000806 	br	80346c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  80344c:	e0bffd17 	ldw	r2,-12(fp)
  803450:	10800017 	ldw	r2,0(r2)
  803454:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803458:	e0fffd17 	ldw	r3,-12(fp)
  80345c:	00802034 	movhi	r2,128
  803460:	108f4f04 	addi	r2,r2,15676
  803464:	18bfcb1e 	bne	r3,r2,803394 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  803468:	0005883a 	mov	r2,zero
}
  80346c:	e037883a 	mov	sp,fp
  803470:	dfc00117 	ldw	ra,4(sp)
  803474:	df000017 	ldw	fp,0(sp)
  803478:	dec00204 	addi	sp,sp,8
  80347c:	f800283a 	ret

00803480 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  803480:	defffa04 	addi	sp,sp,-24
  803484:	dfc00515 	stw	ra,20(sp)
  803488:	df000415 	stw	fp,16(sp)
  80348c:	dc000315 	stw	r16,12(sp)
  803490:	df000304 	addi	fp,sp,12
  803494:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  803498:	00bffa04 	movi	r2,-24
  80349c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8034a0:	e03ffd15 	stw	zero,-12(fp)
  8034a4:	00002106 	br	80352c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  8034a8:	04002034 	movhi	r16,128
  8034ac:	840eed04 	addi	r16,r16,15284
  8034b0:	e0bffd17 	ldw	r2,-12(fp)
  8034b4:	1009883a 	mov	r4,r2
  8034b8:	01400304 	movi	r5,12
  8034bc:	08014000 	call	801400 <__mulsi3>
  8034c0:	8085883a 	add	r2,r16,r2
  8034c4:	10800017 	ldw	r2,0(r2)
  8034c8:	1000151e 	bne	r2,zero,803520 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  8034cc:	04002034 	movhi	r16,128
  8034d0:	840eed04 	addi	r16,r16,15284
  8034d4:	e0bffd17 	ldw	r2,-12(fp)
  8034d8:	1009883a 	mov	r4,r2
  8034dc:	01400304 	movi	r5,12
  8034e0:	08014000 	call	801400 <__mulsi3>
  8034e4:	8085883a 	add	r2,r16,r2
  8034e8:	e0ffff17 	ldw	r3,-4(fp)
  8034ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8034f0:	00802034 	movhi	r2,128
  8034f4:	108f5304 	addi	r2,r2,15692
  8034f8:	10c00017 	ldw	r3,0(r2)
  8034fc:	e0bffd17 	ldw	r2,-12(fp)
  803500:	1880040e 	bge	r3,r2,803514 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  803504:	00802034 	movhi	r2,128
  803508:	108f5304 	addi	r2,r2,15692
  80350c:	e0fffd17 	ldw	r3,-12(fp)
  803510:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  803514:	e0bffd17 	ldw	r2,-12(fp)
  803518:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80351c:	00000606 	br	803538 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803520:	e0bffd17 	ldw	r2,-12(fp)
  803524:	10800044 	addi	r2,r2,1
  803528:	e0bffd15 	stw	r2,-12(fp)
  80352c:	e0bffd17 	ldw	r2,-12(fp)
  803530:	10800810 	cmplti	r2,r2,32
  803534:	103fdc1e 	bne	r2,zero,8034a8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  803538:	e0bffe17 	ldw	r2,-8(fp)
}
  80353c:	e037883a 	mov	sp,fp
  803540:	dfc00217 	ldw	ra,8(sp)
  803544:	df000117 	ldw	fp,4(sp)
  803548:	dc000017 	ldw	r16,0(sp)
  80354c:	dec00304 	addi	sp,sp,12
  803550:	f800283a 	ret

00803554 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  803554:	defffb04 	addi	sp,sp,-20
  803558:	df000415 	stw	fp,16(sp)
  80355c:	df000404 	addi	fp,sp,16
  803560:	e13ffe15 	stw	r4,-8(fp)
  803564:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  803568:	e0bfff17 	ldw	r2,-4(fp)
  80356c:	10840070 	cmpltui	r2,r2,4097
  803570:	1000021e 	bne	r2,zero,80357c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  803574:	00840004 	movi	r2,4096
  803578:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80357c:	e0fffe17 	ldw	r3,-8(fp)
  803580:	e0bfff17 	ldw	r2,-4(fp)
  803584:	1885883a 	add	r2,r3,r2
  803588:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80358c:	e0bffe17 	ldw	r2,-8(fp)
  803590:	e0bffc15 	stw	r2,-16(fp)
  803594:	00000506 	br	8035ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  803598:	e0bffc17 	ldw	r2,-16(fp)
  80359c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8035a0:	e0bffc17 	ldw	r2,-16(fp)
  8035a4:	10800804 	addi	r2,r2,32
  8035a8:	e0bffc15 	stw	r2,-16(fp)
  8035ac:	e0fffc17 	ldw	r3,-16(fp)
  8035b0:	e0bffd17 	ldw	r2,-12(fp)
  8035b4:	18bff836 	bltu	r3,r2,803598 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8035b8:	e0bffe17 	ldw	r2,-8(fp)
  8035bc:	108007cc 	andi	r2,r2,31
  8035c0:	10000226 	beq	r2,zero,8035cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8035c4:	e0bffc17 	ldw	r2,-16(fp)
  8035c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8035cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8035d0:	e037883a 	mov	sp,fp
  8035d4:	df000017 	ldw	fp,0(sp)
  8035d8:	dec00104 	addi	sp,sp,4
  8035dc:	f800283a 	ret

008035e0 <atexit>:
  8035e0:	200b883a 	mov	r5,r4
  8035e4:	000d883a 	mov	r6,zero
  8035e8:	0009883a 	mov	r4,zero
  8035ec:	000f883a 	mov	r7,zero
  8035f0:	080365c1 	jmpi	80365c <__register_exitproc>

008035f4 <exit>:
  8035f4:	defffe04 	addi	sp,sp,-8
  8035f8:	000b883a 	mov	r5,zero
  8035fc:	dc000015 	stw	r16,0(sp)
  803600:	dfc00115 	stw	ra,4(sp)
  803604:	2021883a 	mov	r16,r4
  803608:	08037e40 	call	8037e4 <__call_exitprocs>
  80360c:	8009883a 	mov	r4,r16
  803610:	08039bc0 	call	8039bc <_exit>

00803614 <memcmp>:
  803614:	30000d26 	beq	r6,zero,80364c <memcmp+0x38>
  803618:	20c00003 	ldbu	r3,0(r4)
  80361c:	28800003 	ldbu	r2,0(r5)
  803620:	18800c1e 	bne	r3,r2,803654 <memcmp+0x40>
  803624:	31bfff84 	addi	r6,r6,-2
  803628:	01ffffc4 	movi	r7,-1
  80362c:	00000406 	br	803640 <memcmp+0x2c>
  803630:	20c00003 	ldbu	r3,0(r4)
  803634:	28800003 	ldbu	r2,0(r5)
  803638:	31bfffc4 	addi	r6,r6,-1
  80363c:	1880051e 	bne	r3,r2,803654 <memcmp+0x40>
  803640:	21000044 	addi	r4,r4,1
  803644:	29400044 	addi	r5,r5,1
  803648:	31fff91e 	bne	r6,r7,803630 <memcmp+0x1c>
  80364c:	0005883a 	mov	r2,zero
  803650:	f800283a 	ret
  803654:	1885c83a 	sub	r2,r3,r2
  803658:	f800283a 	ret

0080365c <__register_exitproc>:
  80365c:	defff904 	addi	sp,sp,-28
  803660:	00802034 	movhi	r2,128
  803664:	108f4d04 	addi	r2,r2,15668
  803668:	dc400415 	stw	r17,16(sp)
  80366c:	14400017 	ldw	r17,0(r2)
  803670:	dc000315 	stw	r16,12(sp)
  803674:	dc800515 	stw	r18,20(sp)
  803678:	8c000c17 	ldw	r16,48(r17)
  80367c:	dfc00615 	stw	ra,24(sp)
  803680:	2025883a 	mov	r18,r4
  803684:	80004226 	beq	r16,zero,803790 <__register_exitproc+0x134>
  803688:	80800117 	ldw	r2,4(r16)
  80368c:	00c007c4 	movi	r3,31
  803690:	1880180e 	bge	r3,r2,8036f4 <__register_exitproc+0x98>
  803694:	00800034 	movhi	r2,0
  803698:	10800004 	addi	r2,r2,0
  80369c:	1000071e 	bne	r2,zero,8036bc <__register_exitproc+0x60>
  8036a0:	00bfffc4 	movi	r2,-1
  8036a4:	dfc00617 	ldw	ra,24(sp)
  8036a8:	dc800517 	ldw	r18,20(sp)
  8036ac:	dc400417 	ldw	r17,16(sp)
  8036b0:	dc000317 	ldw	r16,12(sp)
  8036b4:	dec00704 	addi	sp,sp,28
  8036b8:	f800283a 	ret
  8036bc:	01002304 	movi	r4,140
  8036c0:	d9400015 	stw	r5,0(sp)
  8036c4:	d9800115 	stw	r6,4(sp)
  8036c8:	d9c00215 	stw	r7,8(sp)
  8036cc:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8036d0:	1021883a 	mov	r16,r2
  8036d4:	d9400017 	ldw	r5,0(sp)
  8036d8:	d9800117 	ldw	r6,4(sp)
  8036dc:	d9c00217 	ldw	r7,8(sp)
  8036e0:	103fef26 	beq	r2,zero,8036a0 <__register_exitproc+0x44>
  8036e4:	88800c17 	ldw	r2,48(r17)
  8036e8:	80000115 	stw	zero,4(r16)
  8036ec:	80800015 	stw	r2,0(r16)
  8036f0:	8c000c15 	stw	r16,48(r17)
  8036f4:	90001726 	beq	r18,zero,803754 <__register_exitproc+0xf8>
  8036f8:	80802217 	ldw	r2,136(r16)
  8036fc:	10002826 	beq	r2,zero,8037a0 <__register_exitproc+0x144>
  803700:	12804017 	ldw	r10,256(r2)
  803704:	80c00117 	ldw	r3,4(r16)
  803708:	02400044 	movi	r9,1
  80370c:	48d2983a 	sll	r9,r9,r3
  803710:	19000804 	addi	r4,r3,32
  803714:	18d1883a 	add	r8,r3,r3
  803718:	2109883a 	add	r4,r4,r4
  80371c:	4211883a 	add	r8,r8,r8
  803720:	2109883a 	add	r4,r4,r4
  803724:	1109883a 	add	r4,r2,r4
  803728:	1211883a 	add	r8,r2,r8
  80372c:	5254b03a 	or	r10,r10,r9
  803730:	21c00015 	stw	r7,0(r4)
  803734:	41800015 	stw	r6,0(r8)
  803738:	12804015 	stw	r10,256(r2)
  80373c:	01000084 	movi	r4,2
  803740:	9100051e 	bne	r18,r4,803758 <__register_exitproc+0xfc>
  803744:	11004117 	ldw	r4,260(r2)
  803748:	2252b03a 	or	r9,r4,r9
  80374c:	12404115 	stw	r9,260(r2)
  803750:	00000106 	br	803758 <__register_exitproc+0xfc>
  803754:	80c00117 	ldw	r3,4(r16)
  803758:	18800084 	addi	r2,r3,2
  80375c:	1085883a 	add	r2,r2,r2
  803760:	1085883a 	add	r2,r2,r2
  803764:	8085883a 	add	r2,r16,r2
  803768:	18c00044 	addi	r3,r3,1
  80376c:	11400015 	stw	r5,0(r2)
  803770:	0005883a 	mov	r2,zero
  803774:	80c00115 	stw	r3,4(r16)
  803778:	dfc00617 	ldw	ra,24(sp)
  80377c:	dc800517 	ldw	r18,20(sp)
  803780:	dc400417 	ldw	r17,16(sp)
  803784:	dc000317 	ldw	r16,12(sp)
  803788:	dec00704 	addi	sp,sp,28
  80378c:	f800283a 	ret
  803790:	04002034 	movhi	r16,128
  803794:	84105704 	addi	r16,r16,16732
  803798:	8c000c15 	stw	r16,48(r17)
  80379c:	003fba06 	br	803688 <__register_exitproc+0x2c>
  8037a0:	00800034 	movhi	r2,0
  8037a4:	10800004 	addi	r2,r2,0
  8037a8:	103fbd26 	beq	r2,zero,8036a0 <__register_exitproc+0x44>
  8037ac:	d9400015 	stw	r5,0(sp)
  8037b0:	d9800115 	stw	r6,4(sp)
  8037b4:	d9c00215 	stw	r7,8(sp)
  8037b8:	01004204 	movi	r4,264
  8037bc:	103ee83a 	callr	r2
  8037c0:	d9400017 	ldw	r5,0(sp)
  8037c4:	d9800117 	ldw	r6,4(sp)
  8037c8:	d9c00217 	ldw	r7,8(sp)
  8037cc:	103fb426 	beq	r2,zero,8036a0 <__register_exitproc+0x44>
  8037d0:	10004015 	stw	zero,256(r2)
  8037d4:	10004115 	stw	zero,260(r2)
  8037d8:	80802215 	stw	r2,136(r16)
  8037dc:	0015883a 	mov	r10,zero
  8037e0:	003fc806 	br	803704 <__register_exitproc+0xa8>

008037e4 <__call_exitprocs>:
  8037e4:	00802034 	movhi	r2,128
  8037e8:	108f4d04 	addi	r2,r2,15668
  8037ec:	10800017 	ldw	r2,0(r2)
  8037f0:	defff204 	addi	sp,sp,-56
  8037f4:	df000c15 	stw	fp,48(sp)
  8037f8:	d8800015 	stw	r2,0(sp)
  8037fc:	10800c04 	addi	r2,r2,48
  803800:	dd400915 	stw	r21,36(sp)
  803804:	dfc00d15 	stw	ra,52(sp)
  803808:	ddc00b15 	stw	r23,44(sp)
  80380c:	dd800a15 	stw	r22,40(sp)
  803810:	dd000815 	stw	r20,32(sp)
  803814:	dcc00715 	stw	r19,28(sp)
  803818:	dc800615 	stw	r18,24(sp)
  80381c:	dc400515 	stw	r17,20(sp)
  803820:	dc000415 	stw	r16,16(sp)
  803824:	d9000115 	stw	r4,4(sp)
  803828:	2839883a 	mov	fp,r5
  80382c:	d8800215 	stw	r2,8(sp)
  803830:	057fffc4 	movi	r21,-1
  803834:	d8800017 	ldw	r2,0(sp)
  803838:	dd800217 	ldw	r22,8(sp)
  80383c:	15c00c17 	ldw	r23,48(r2)
  803840:	b8001b26 	beq	r23,zero,8038b0 <__call_exitprocs+0xcc>
  803844:	b9000117 	ldw	r4,4(r23)
  803848:	bd002217 	ldw	r20,136(r23)
  80384c:	243fffc4 	addi	r16,r4,-1
  803850:	80001416 	blt	r16,zero,8038a4 <__call_exitprocs+0xc0>
  803854:	244007c4 	addi	r17,r4,31
  803858:	21000044 	addi	r4,r4,1
  80385c:	8c63883a 	add	r17,r17,r17
  803860:	8427883a 	add	r19,r16,r16
  803864:	2109883a 	add	r4,r4,r4
  803868:	8c63883a 	add	r17,r17,r17
  80386c:	9ce7883a 	add	r19,r19,r19
  803870:	2109883a 	add	r4,r4,r4
  803874:	a463883a 	add	r17,r20,r17
  803878:	a4e7883a 	add	r19,r20,r19
  80387c:	b925883a 	add	r18,r23,r4
  803880:	e0001726 	beq	fp,zero,8038e0 <__call_exitprocs+0xfc>
  803884:	a0000226 	beq	r20,zero,803890 <__call_exitprocs+0xac>
  803888:	89400017 	ldw	r5,0(r17)
  80388c:	2f001426 	beq	r5,fp,8038e0 <__call_exitprocs+0xfc>
  803890:	843fffc4 	addi	r16,r16,-1
  803894:	8c7fff04 	addi	r17,r17,-4
  803898:	9cffff04 	addi	r19,r19,-4
  80389c:	94bfff04 	addi	r18,r18,-4
  8038a0:	857ff71e 	bne	r16,r21,803880 <__call_exitprocs+0x9c>
  8038a4:	00800034 	movhi	r2,0
  8038a8:	10800004 	addi	r2,r2,0
  8038ac:	1000311e 	bne	r2,zero,803974 <__call_exitprocs+0x190>
  8038b0:	dfc00d17 	ldw	ra,52(sp)
  8038b4:	df000c17 	ldw	fp,48(sp)
  8038b8:	ddc00b17 	ldw	r23,44(sp)
  8038bc:	dd800a17 	ldw	r22,40(sp)
  8038c0:	dd400917 	ldw	r21,36(sp)
  8038c4:	dd000817 	ldw	r20,32(sp)
  8038c8:	dcc00717 	ldw	r19,28(sp)
  8038cc:	dc800617 	ldw	r18,24(sp)
  8038d0:	dc400517 	ldw	r17,20(sp)
  8038d4:	dc000417 	ldw	r16,16(sp)
  8038d8:	dec00e04 	addi	sp,sp,56
  8038dc:	f800283a 	ret
  8038e0:	b9000117 	ldw	r4,4(r23)
  8038e4:	92000017 	ldw	r8,0(r18)
  8038e8:	213fffc4 	addi	r4,r4,-1
  8038ec:	24001a26 	beq	r4,r16,803958 <__call_exitprocs+0x174>
  8038f0:	90000015 	stw	zero,0(r18)
  8038f4:	403fe626 	beq	r8,zero,803890 <__call_exitprocs+0xac>
  8038f8:	ba400117 	ldw	r9,4(r23)
  8038fc:	a0001226 	beq	r20,zero,803948 <__call_exitprocs+0x164>
  803900:	00800044 	movi	r2,1
  803904:	1408983a 	sll	r4,r2,r16
  803908:	a1404017 	ldw	r5,256(r20)
  80390c:	214a703a 	and	r5,r4,r5
  803910:	28000d26 	beq	r5,zero,803948 <__call_exitprocs+0x164>
  803914:	a1404117 	ldw	r5,260(r20)
  803918:	2148703a 	and	r4,r4,r5
  80391c:	2000101e 	bne	r4,zero,803960 <__call_exitprocs+0x17c>
  803920:	99400017 	ldw	r5,0(r19)
  803924:	d9000117 	ldw	r4,4(sp)
  803928:	da400315 	stw	r9,12(sp)
  80392c:	403ee83a 	callr	r8
  803930:	da400317 	ldw	r9,12(sp)
  803934:	b9000117 	ldw	r4,4(r23)
  803938:	227fbe1e 	bne	r4,r9,803834 <__call_exitprocs+0x50>
  80393c:	b1000017 	ldw	r4,0(r22)
  803940:	25ffd326 	beq	r4,r23,803890 <__call_exitprocs+0xac>
  803944:	003fbb06 	br	803834 <__call_exitprocs+0x50>
  803948:	da400315 	stw	r9,12(sp)
  80394c:	403ee83a 	callr	r8
  803950:	da400317 	ldw	r9,12(sp)
  803954:	003ff706 	br	803934 <__call_exitprocs+0x150>
  803958:	bc000115 	stw	r16,4(r23)
  80395c:	003fe506 	br	8038f4 <__call_exitprocs+0x110>
  803960:	99000017 	ldw	r4,0(r19)
  803964:	da400315 	stw	r9,12(sp)
  803968:	403ee83a 	callr	r8
  80396c:	da400317 	ldw	r9,12(sp)
  803970:	003ff006 	br	803934 <__call_exitprocs+0x150>
  803974:	b9000117 	ldw	r4,4(r23)
  803978:	20000e1e 	bne	r4,zero,8039b4 <__call_exitprocs+0x1d0>
  80397c:	b9000017 	ldw	r4,0(r23)
  803980:	20000826 	beq	r4,zero,8039a4 <__call_exitprocs+0x1c0>
  803984:	b1000015 	stw	r4,0(r22)
  803988:	a0000226 	beq	r20,zero,803994 <__call_exitprocs+0x1b0>
  80398c:	a009883a 	mov	r4,r20
  803990:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  803994:	b809883a 	mov	r4,r23
  803998:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80399c:	b5c00017 	ldw	r23,0(r22)
  8039a0:	003fa706 	br	803840 <__call_exitprocs+0x5c>
  8039a4:	0007883a 	mov	r3,zero
  8039a8:	b82d883a 	mov	r22,r23
  8039ac:	182f883a 	mov	r23,r3
  8039b0:	003fa306 	br	803840 <__call_exitprocs+0x5c>
  8039b4:	b8c00017 	ldw	r3,0(r23)
  8039b8:	003ffb06 	br	8039a8 <__call_exitprocs+0x1c4>

008039bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8039bc:	defffc04 	addi	sp,sp,-16
  8039c0:	df000315 	stw	fp,12(sp)
  8039c4:	df000304 	addi	fp,sp,12
  8039c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8039cc:	0001883a 	nop
  8039d0:	e0bfff17 	ldw	r2,-4(fp)
  8039d4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  8039d8:	e0bffd17 	ldw	r2,-12(fp)
  8039dc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8039e0:	e0bffe17 	ldw	r2,-8(fp)
  8039e4:	10000226 	beq	r2,zero,8039f0 <_exit+0x34>
    ALT_SIM_FAIL();
  8039e8:	002af070 	cmpltui	zero,zero,43969
  8039ec:	00000106 	br	8039f4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
  8039f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8039f4:	003fff06 	br	8039f4 <_exit+0x38>
