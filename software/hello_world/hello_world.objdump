
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00008a34 memsz 0x00008a34 flags r-x
    LOAD off    0x00009a54 vaddr 0x00018a54 paddr 0x00019148 align 2**12
         filesz 0x000006f4 memsz 0x000006f4 flags rw-
    LOAD off    0x0000a83c vaddr 0x0001983c paddr 0x0001983c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000085cc  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d0  00018784  00018784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000006f4  00018a54  00019148  00009a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0001983c  0001983c  0000a83c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000a148  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b58  00000000  00000000  0000a170  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00014e9e  00000000  00000000  0000acc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007125  00000000  00000000  0001fb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006d2d  00000000  00000000  00026c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000137c  00000000  00000000  0002d9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002264  00000000  00000000  0002ed34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ba0e  00000000  00000000  00030f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0003c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0003c9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003f794  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0003f797  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003f79a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003f79b  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003f79c  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003f7a0  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003f7a4  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003f7b1  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003f7ba  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  0003f7c3  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001a  00000000  00000000  0003f7d5  2**0
                  CONTENTS, READONLY
 28 .jdi          0000568f  00000000  00000000  0003f7ef  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000368b5  00000000  00000000  00044e7e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00018784 l    d  .rodata	00000000 .rodata
00018a54 l    d  .rwdata	00000000 .rwdata
0001983c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00010488 l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
00018a54 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 ecvtbuf.c
000114dc l     F .text	000001f4 print_e
00000000 l    df *ABS*	00000000 mprec.c
000189f4 l     O .rodata	0000000c p05.2461
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
000137c0 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00015d38 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0001691c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_load.c
00016c20 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019120 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00016ea8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00016f7c l     F .text	00000038 alt_dev_reg
00018f3c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00017280 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0001737c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000174b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000174e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000178c8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00017a20 l     F .text	00000050 alt_get_errno
00017a70 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
00018644 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 
00012f64 g     F .text	00000074 _mprec_log10
00013054 g     F .text	00000084 __any_on
000188dc g     O .rodata	00000028 __mprec_tinytens
00016d0c g     F .text	00000068 alt_main
000136d4 g     F .text	00000020 strcpy
000112c0 g     F .text	00000044 __ashldi3
0001988c g     O .bss	00000100 alt_irq
00019148 g       *ABS*	00000000 __flash_rwdata_start
000165d8 g     F .text	0000005c __eqdf2
0001998c g       *ABS*	00000000 __alt_heap_start
000116d0 g     F .text	000001b8 fcvtbuf
00016d94 g     F .text	00000020 __malloc_unlock
000108b0 g     F .text	0000013c __divsf3
00015c14 g     F .text	0000005c memmove
0001200c g     F .text	000000dc _Balloc
000109ec g     F .text	000000a4 __fixsfsi
00016db4 g     F .text	00000044 alt_putstr
00016690 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00016ef8 g     F .text	00000084 times
00010020 g       *ABS*	00000000 __flash_exceptions_start
00019848 g     O .bss	00000004 errno
000168e4 g     F .text	00000038 __make_dp
00019850 g     O .bss	00000004 alt_argv
00021110 g       *ABS*	00000000 _gp
000106c8 g     F .text	00000058 __subsf3
00018f90 g     O .rwdata	00000180 alt_fd_list
00017ef4 g     F .text	00000090 alt_find_dev
00015bec g     F .text	00000028 memcpy
00010a90 g     F .text	000000d4 __floatsidf
000179a8 g     F .text	00000078 alt_io_redirect
00016758 g     F .text	0000005c __ltdf2
00012ec0 g     F .text	000000a4 __ratio
000170f4 g     F .text	000000f4 altera_avalon_jtag_uart_read
00015440 g     F .text	00000014 malloc
00016a3c g     F .text	00000008 __udivsi3
0001892c g     O .rodata	000000c8 __mprec_tens
0001149c g     F .text	00000040 gcvtf
0001816c g     F .text	0000008c alt_icache_flush
00019844 g     O .bss	00000004 __malloc_top_pad
000124ac g     F .text	0000003c __i2b
00015c90 g     F .text	00000064 _sbrk_r
00019134 g     O .rwdata	00000004 alt_max_fd
00016a4c g     F .text	00000104 __unpack_d
00019840 g     O .bss	00000004 __malloc_max_sbrked_mem
00015cf4 g     F .text	00000044 __extendsfdf2
0001608c g     F .text	00000054 __adddf3
00012c34 g     F .text	00000148 __b2d
00019110 g     O .rwdata	00000004 _global_impure_ptr
000130d8 g     F .text	000005fc _realloc_r
0001998c g       *ABS*	00000000 __bss_end
000177d8 g     F .text	000000f0 alt_iic_isr_register
00017dd0 g     F .text	00000104 alt_tick
00018904 g     O .rodata	00000028 __mprec_bigtens
00012290 g     F .text	00000104 __s2b
00010b64 g     F .text	0000011c __floatunsidf
000129d4 g     F .text	00000058 __mcmp
0001778c g     F .text	0000004c alt_ic_irq_enabled
00017d38 g     F .text	00000098 alt_alarm_stop
00019858 g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000100ec g     F .exceptions	000000cc alt_irq_handler
00018f68 g     O .rwdata	00000028 alt_dev_null
00010f68 g     F .text	000000c8 __unpack_f
00017498 g     F .text	0000001c alt_dcache_flush_all
00012394 g     F .text	00000068 __hi0bits
00016810 g     F .text	000000d4 __fixdfsi
00019148 g       *ABS*	00000000 __ram_rwdata_end
0001912c g     O .rwdata	00000008 alt_dev_list
00018694 g     F .text	000000f0 write
00018a54 g       *ABS*	00000000 __ram_rodata_end
0001127c g     F .text	00000044 __lshrdi3
000167b4 g     F .text	0000005c __ledf2
00012740 g     F .text	00000144 __pow5mult
00016a44 g     F .text	00000008 __umodsi3
0001998c g       *ABS*	00000000 end
00010e3c g     F .text	0000012c __pack_f
00019e34 g       *ABS*	00000000 __alt_stack_pointer
00011cf4 g     F .text	00000318 _dcvt
000172f4 g     F .text	00000088 alt_avalon_timer_sc_init
00010d90 g     F .text	000000ac __clzsi2
000171e8 g     F .text	00000098 altera_avalon_jtag_uart_write
00015170 g     F .text	000002d0 _free_r
00018430 g     F .text	000001d8 __call_exitprocs
00019118 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
0001985c g     O .bss	00000004 _alt_tick_rate
000119cc g     F .text	00000328 _gcvt
00012884 g     F .text	00000150 __lshift
00019860 g     O .bss	00000004 _alt_nticks
00016fe8 g     F .text	0000004c alt_sys_init
000124e8 g     F .text	00000258 __multiply
00011254 g     F .text	00000028 __mulsi3
00018a54 g       *ABS*	00000000 __ram_rwdata_start
00018784 g       *ABS*	00000000 __ram_rodata_start
00019864 g     O .bss	00000028 __malloc_current_mallinfo
00012d7c g     F .text	00000144 __d2b
00017034 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00018098 g     F .text	000000d4 alt_get_fd
00016b50 g     F .text	000000d0 __fpcmp_parts_d
000101f4 g     F .text	000000a4 generateVector
00018354 g     F .text	00000048 memcmp
0001998c g       *ABS*	00000000 __alt_stack_base
00016424 g     F .text	000001b4 __divdf3
00012fd8 g     F .text	0000007c __copybits
00018b34 g     O .rwdata	00000408 __malloc_av_
00016140 g     F .text	000002e4 __muldf3
000187cc g     O .rodata	00000010 __thenan_sf
00017f84 g     F .text	00000114 alt_find_file
00017530 g     F .text	000000a0 alt_dev_llist_insert
00016d74 g     F .text	00000020 __malloc_lock
00016df8 g     F .text	000000b0 sbrk
000136f4 g     F .text	000000cc _calloc_r
00018274 g     F .text	000000e0 __sfvwrite_small_dev
0001983c g       *ABS*	00000000 __bss_start
00015c70 g     F .text	00000020 memset
00010348 g     F .text	00000140 main
00011304 g     F .text	00000024 fcvt
00019854 g     O .bss	00000004 alt_envp
0001983c g     O .bss	00000004 __malloc_max_total_mem
00017094 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011888 g     F .text	00000144 ecvtbuf
00019e34 g       *ABS*	00000000 __alt_heap_limit
000139fc g     F .text	00001638 _dtoa_r
00015468 g     F .text	00000784 _malloc_r
00019138 g     O .rwdata	00000004 alt_errno
000113a0 g     F .text	00000054 ecvtf
00016990 g     F .text	00000050 __divsi3
00018a14 g     O .rodata	00000014 __thenan_df
00015034 g     F .text	0000013c _malloc_trim_r
00010720 g     F .text	00000190 __mulsf3
00018784 g       *ABS*	00000000 __flash_rodata_start
00016634 g     F .text	0000005c __nedf2
00016fb4 g     F .text	00000034 alt_irq_init
00017cb8 g     F .text	00000080 alt_release_fd
000187dc g     O .rodata	00000100 __clz_tab
00010298 g     F .text	000000b0 sumVector
000183c4 g     F .text	0000006c _write_r
00019114 g     O .rwdata	00000004 _impure_ptr
0001984c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00012bd4 g     F .text	00000060 __ulp
0001137c g     F .text	00000024 ecvt
00019124 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00017600 g     F .text	00000050 alt_ic_isr_register
00019148 g       *ABS*	00000000 _edata
0001998c g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
000176ec g     F .text	000000a0 alt_ic_irq_disable
0001911c g     O .rwdata	00000004 __malloc_trim_threshold
00011328 g     F .text	00000054 fcvtf
00017ed4 g     F .text	00000020 altera_nios2_qsys_irq_init
000181f8 g     F .text	00000020 exit
00012a2c g     F .text	000001a8 __mdiff
000169e0 g     F .text	0000005c __modsi3
00019e34 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000113f4 g     F .text	000000a8 gcvt
00018608 g     F .text	0000003c _exit
00010c80 g     F .text	00000110 __muldi3
0001839c g     F .text	00000028 strlen
00017b60 g     F .text	00000158 open
000166f4 g     F .text	00000064 __gedf2
000175d0 g     F .text	00000030 alt_icache_flush_all
00018218 g     F .text	0000005c fputs
0001913c g     O .rwdata	00000004 alt_priority_mask
00017650 g     F .text	0000009c alt_ic_irq_enable
000160e0 g     F .text	00000060 __subdf3
000123fc g     F .text	000000b0 __lo0bits
00019140 g     O .rwdata	00000008 alt_alarm_list
000173cc g     F .text	000000cc close
0001067c g     F .text	0000004c __addsf3
00016c8c g     F .text	00000080 alt_load
00011030 g     F .text	00000224 __pack_d
00015454 g     F .text	00000014 free
00012160 g     F .text	00000130 __multadd
000120e8 g     F .text	00000078 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406e14 	ori	at,at,440
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18e62304 	addi	r3,r3,-26484
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	21262304 	addi	r4,r4,-26484
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dee78d14 	ori	sp,sp,40500
    movhi gp, %hi(_gp)
   101c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   101c4:	d6844414 	ori	gp,gp,4368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10a60f14 	ori	r2,r2,38972

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18e66314 	ori	r3,r3,39308

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	0016c8c0 	call	16c8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	0016d0c0 	call	16d0c <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <generateVector>:
//#define N 255001


// Generates the vector x and stores it in memory
void generateVector(float x[N])
{
   101f4:	defffb04 	addi	sp,sp,-20
   101f8:	dfc00415 	stw	ra,16(sp)
   101fc:	df000315 	stw	fp,12(sp)
   10200:	dc000215 	stw	r16,8(sp)
   10204:	df000204 	addi	fp,sp,8
   10208:	e13fff15 	stw	r4,-4(fp)
	int i;
	x[0] = 0;
   1020c:	e0bfff17 	ldw	r2,-4(fp)
   10210:	10000015 	stw	zero,0(r2)
	for (i=1; i<N; i++)
   10214:	00800044 	movi	r2,1
   10218:	e0bffe15 	stw	r2,-8(fp)
   1021c:	00001506 	br	10274 <generateVector+0x80>
	{
		x[i] = x[i-1] + step;
   10220:	e0bffe17 	ldw	r2,-8(fp)
   10224:	1085883a 	add	r2,r2,r2
   10228:	1085883a 	add	r2,r2,r2
   1022c:	e0ffff17 	ldw	r3,-4(fp)
   10230:	18a1883a 	add	r16,r3,r2
   10234:	e0bffe17 	ldw	r2,-8(fp)
   10238:	10bfffc4 	addi	r2,r2,-1
   1023c:	1085883a 	add	r2,r2,r2
   10240:	1085883a 	add	r2,r2,r2
   10244:	e0ffff17 	ldw	r3,-4(fp)
   10248:	1887883a 	add	r3,r3,r2
   1024c:	18800017 	ldw	r2,0(r3)
   10250:	1009883a 	mov	r4,r2
   10254:	01502834 	movhi	r5,16544
   10258:	001067c0 	call	1067c <__addsf3>
   1025c:	1007883a 	mov	r3,r2
   10260:	1805883a 	mov	r2,r3
   10264:	80800015 	stw	r2,0(r16)
// Generates the vector x and stores it in memory
void generateVector(float x[N])
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++)
   10268:	e0bffe17 	ldw	r2,-8(fp)
   1026c:	10800044 	addi	r2,r2,1
   10270:	e0bffe15 	stw	r2,-8(fp)
   10274:	e0bffe17 	ldw	r2,-8(fp)
   10278:	10800d10 	cmplti	r2,r2,52
   1027c:	103fe81e 	bne	r2,zero,10220 <generateVector+0x2c>
	{
		x[i] = x[i-1] + step;
	}
}
   10280:	e037883a 	mov	sp,fp
   10284:	dfc00217 	ldw	ra,8(sp)
   10288:	df000117 	ldw	fp,4(sp)
   1028c:	dc000017 	ldw	r16,0(sp)
   10290:	dec00304 	addi	sp,sp,12
   10294:	f800283a 	ret

00010298 <sumVector>:

// Sums along the vector, with each element x -> x + x^2
float sumVector(float x[], int M)
{
   10298:	defff904 	addi	sp,sp,-28
   1029c:	dfc00615 	stw	ra,24(sp)
   102a0:	df000515 	stw	fp,20(sp)
   102a4:	df000504 	addi	fp,sp,20
   102a8:	e13ffe15 	stw	r4,-8(fp)
   102ac:	e17fff15 	stw	r5,-4(fp)
	float y=0, current;
   102b0:	e03ffb15 	stw	zero,-20(fp)
	int i;
	for (i=0; i<M; i++)
   102b4:	e03ffc15 	stw	zero,-16(fp)
   102b8:	00001906 	br	10320 <sumVector+0x88>
	{
		current = x[i];
   102bc:	e0bffc17 	ldw	r2,-16(fp)
   102c0:	1085883a 	add	r2,r2,r2
   102c4:	1085883a 	add	r2,r2,r2
   102c8:	e0fffe17 	ldw	r3,-8(fp)
   102cc:	1885883a 	add	r2,r3,r2
   102d0:	10800017 	ldw	r2,0(r2)
   102d4:	e0bffd15 	stw	r2,-12(fp)
		y += current + current*current;
   102d8:	e13ffd17 	ldw	r4,-12(fp)
   102dc:	e17ffd17 	ldw	r5,-12(fp)
   102e0:	00107200 	call	10720 <__mulsf3>
   102e4:	1007883a 	mov	r3,r2
   102e8:	1805883a 	mov	r2,r3
   102ec:	1009883a 	mov	r4,r2
   102f0:	e17ffd17 	ldw	r5,-12(fp)
   102f4:	001067c0 	call	1067c <__addsf3>
   102f8:	1007883a 	mov	r3,r2
   102fc:	1805883a 	mov	r2,r3
   10300:	e13ffb17 	ldw	r4,-20(fp)
   10304:	100b883a 	mov	r5,r2
   10308:	001067c0 	call	1067c <__addsf3>
   1030c:	1007883a 	mov	r3,r2
   10310:	e0fffb15 	stw	r3,-20(fp)
// Sums along the vector, with each element x -> x + x^2
float sumVector(float x[], int M)
{
	float y=0, current;
	int i;
	for (i=0; i<M; i++)
   10314:	e0bffc17 	ldw	r2,-16(fp)
   10318:	10800044 	addi	r2,r2,1
   1031c:	e0bffc15 	stw	r2,-16(fp)
   10320:	e0fffc17 	ldw	r3,-16(fp)
   10324:	e0bfff17 	ldw	r2,-4(fp)
   10328:	18bfe416 	blt	r3,r2,102bc <sumVector+0x24>
	{
		current = x[i];
		y += current + current*current;
	}
	return y;
   1032c:	e0fffb17 	ldw	r3,-20(fp)
   10330:	1805883a 	mov	r2,r3
}
   10334:	e037883a 	mov	sp,fp
   10338:	dfc00117 	ldw	ra,4(sp)
   1033c:	df000017 	ldw	fp,0(sp)
   10340:	dec00204 	addi	sp,sp,8
   10344:	f800283a 	ret

00010348 <main>:

int main()
{
   10348:	deffc104 	addi	sp,sp,-252
   1034c:	dfc03e15 	stw	ra,248(sp)
   10350:	df003d15 	stw	fp,244(sp)
   10354:	df003d04 	addi	fp,sp,244
	// Modify this line for each task in turn
	alt_putstr("Task 1!\n");
   10358:	010000b4 	movhi	r4,2
   1035c:	2121e104 	addi	r4,r4,-30844
   10360:	0016db40 	call	16db4 <alt_putstr>
	float x[N];

	// Returned result
	float y;

	generateVector(x);
   10364:	e0bfc704 	addi	r2,fp,-228
   10368:	1009883a 	mov	r4,r2
   1036c:	00101f40 	call	101f4 <generateVector>

	// The following is used for timing
	char buf[20];
	clock_t exec_t1, exec_t2;

	exec_t1 = times(NULL); // get system time before starting the process
   10370:	0009883a 	mov	r4,zero
   10374:	0016ef80 	call	16ef8 <times>
   10378:	e0bfc515 	stw	r2,-236(fp)

// The code that you want to time goes here
	y = sumVector(x, N);
   1037c:	e0bfc704 	addi	r2,fp,-228
   10380:	1009883a 	mov	r4,r2
   10384:	01400d04 	movi	r5,52
   10388:	00102980 	call	10298 <sumVector>
   1038c:	e0bfc315 	stw	r2,-244(fp)

	// till here
	exec_t2 = times(NULL); // get system time after finishing the process
   10390:	0009883a 	mov	r4,zero
   10394:	0016ef80 	call	16ef8 <times>
   10398:	e0bfc615 	stw	r2,-232(fp)

	gcvt((exec_t2 - exec_t1), 10, buf);
   1039c:	e0ffc617 	ldw	r3,-232(fp)
   103a0:	e0bfc517 	ldw	r2,-236(fp)
   103a4:	1885c83a 	sub	r2,r3,r2
   103a8:	1009883a 	mov	r4,r2
   103ac:	0010b640 	call	10b64 <__floatunsidf>
   103b0:	100b883a 	mov	r5,r2
   103b4:	180d883a 	mov	r6,r3
   103b8:	e0bffb04 	addi	r2,fp,-20
   103bc:	2809883a 	mov	r4,r5
   103c0:	300b883a 	mov	r5,r6
   103c4:	01800284 	movi	r6,10
   103c8:	100f883a 	mov	r7,r2
   103cc:	00113f40 	call	113f4 <gcvt>

	alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");
   103d0:	010000b4 	movhi	r4,2
   103d4:	2121e404 	addi	r4,r4,-30832
   103d8:	0016db40 	call	16db4 <alt_putstr>
   103dc:	e0bffb04 	addi	r2,fp,-20
   103e0:	1009883a 	mov	r4,r2
   103e4:	0016db40 	call	16db4 <alt_putstr>
   103e8:	010000b4 	movhi	r4,2
   103ec:	2121e804 	addi	r4,r4,-30816
   103f0:	0016db40 	call	16db4 <alt_putstr>
	// printf could be used if there was enough memory

	int i;
	for (i=0; i<10; i++)
   103f4:	e03fc415 	stw	zero,-240(fp)
   103f8:	00000806 	br	1041c <main+0xd4>
	{
		y = y/2.0;
   103fc:	e13fc317 	ldw	r4,-244(fp)
   10400:	01500034 	movhi	r5,16384
   10404:	00108b00 	call	108b0 <__divsf3>
   10408:	1007883a 	mov	r3,r2
   1040c:	e0ffc315 	stw	r3,-244(fp)

	alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");
	// printf could be used if there was enough memory

	int i;
	for (i=0; i<10; i++)
   10410:	e0bfc417 	ldw	r2,-240(fp)
   10414:	10800044 	addi	r2,r2,1
   10418:	e0bfc415 	stw	r2,-240(fp)
   1041c:	e0bfc417 	ldw	r2,-240(fp)
   10420:	10800290 	cmplti	r2,r2,10
   10424:	103ff51e 	bne	r2,zero,103fc <main+0xb4>
	{
		y = y/2.0;
	}

	gcvt(((int) y), 10, buf);
   10428:	e13fc317 	ldw	r4,-244(fp)
   1042c:	00109ec0 	call	109ec <__fixsfsi>
   10430:	1009883a 	mov	r4,r2
   10434:	0010a900 	call	10a90 <__floatsidf>
   10438:	100b883a 	mov	r5,r2
   1043c:	180d883a 	mov	r6,r3
   10440:	e0bffb04 	addi	r2,fp,-20
   10444:	2809883a 	mov	r4,r5
   10448:	300b883a 	mov	r5,r6
   1044c:	01800284 	movi	r6,10
   10450:	100f883a 	mov	r7,r2
   10454:	00113f40 	call	113f4 <gcvt>
	alt_putstr(" Result (divided by 1014) = "); alt_putstr(buf);
   10458:	010000b4 	movhi	r4,2
   1045c:	2121eb04 	addi	r4,r4,-30804
   10460:	0016db40 	call	16db4 <alt_putstr>
   10464:	e0bffb04 	addi	r2,fp,-20
   10468:	1009883a 	mov	r4,r2
   1046c:	0016db40 	call	16db4 <alt_putstr>
	// printf could be used if there was enough memory

	return 0;
   10470:	0005883a 	mov	r2,zero
}
   10474:	e037883a 	mov	sp,fp
   10478:	dfc00117 	ldw	ra,4(sp)
   1047c:	df000017 	ldw	fp,0(sp)
   10480:	dec00204 	addi	sp,sp,8
   10484:	f800283a 	ret

00010488 <_fpadd_parts>:
   10488:	2005883a 	mov	r2,r4
   1048c:	21000017 	ldw	r4,0(r4)
   10490:	01c00044 	movi	r7,1
   10494:	3900332e 	bgeu	r7,r4,10564 <_fpadd_parts+0xdc>
   10498:	28c00017 	ldw	r3,0(r5)
   1049c:	38c0642e 	bgeu	r7,r3,10630 <_fpadd_parts+0x1a8>
   104a0:	01c00104 	movi	r7,4
   104a4:	21c06e26 	beq	r4,r7,10660 <_fpadd_parts+0x1d8>
   104a8:	19c06126 	beq	r3,r7,10630 <_fpadd_parts+0x1a8>
   104ac:	01c00084 	movi	r7,2
   104b0:	19c04226 	beq	r3,r7,105bc <_fpadd_parts+0x134>
   104b4:	21c05e26 	beq	r4,r7,10630 <_fpadd_parts+0x1a8>
   104b8:	11000217 	ldw	r4,8(r2)
   104bc:	2a400217 	ldw	r9,8(r5)
   104c0:	12800317 	ldw	r10,12(r2)
   104c4:	29c00317 	ldw	r7,12(r5)
   104c8:	2247c83a 	sub	r3,r4,r9
   104cc:	1811883a 	mov	r8,r3
   104d0:	18005316 	blt	r3,zero,10620 <_fpadd_parts+0x198>
   104d4:	02c007c4 	movi	r11,31
   104d8:	5a002316 	blt	r11,r8,10568 <_fpadd_parts+0xe0>
   104dc:	00c0560e 	bge	zero,r3,10638 <_fpadd_parts+0x1b0>
   104e0:	00c00044 	movi	r3,1
   104e4:	1a06983a 	sll	r3,r3,r8
   104e8:	3a10d83a 	srl	r8,r7,r8
   104ec:	18ffffc4 	addi	r3,r3,-1
   104f0:	19ce703a 	and	r7,r3,r7
   104f4:	380ec03a 	cmpne	r7,r7,zero
   104f8:	3a0eb03a 	or	r7,r7,r8
   104fc:	10c00117 	ldw	r3,4(r2)
   10500:	28800117 	ldw	r2,4(r5)
   10504:	18801d26 	beq	r3,r2,1057c <_fpadd_parts+0xf4>
   10508:	18003a26 	beq	r3,zero,105f4 <_fpadd_parts+0x16c>
   1050c:	3a85c83a 	sub	r2,r7,r10
   10510:	10003a16 	blt	r2,zero,105fc <_fpadd_parts+0x174>
   10514:	30000115 	stw	zero,4(r6)
   10518:	31000215 	stw	r4,8(r6)
   1051c:	30800315 	stw	r2,12(r6)
   10520:	10ffffc4 	addi	r3,r2,-1
   10524:	01d00034 	movhi	r7,16384
   10528:	39ffff84 	addi	r7,r7,-2
   1052c:	38c00936 	bltu	r7,r3,10554 <_fpadd_parts+0xcc>
   10530:	30c00217 	ldw	r3,8(r6)
   10534:	18ffffc4 	addi	r3,r3,-1
   10538:	1085883a 	add	r2,r2,r2
   1053c:	113fffc4 	addi	r4,r2,-1
   10540:	180b883a 	mov	r5,r3
   10544:	18ffffc4 	addi	r3,r3,-1
   10548:	393ffb2e 	bgeu	r7,r4,10538 <_fpadd_parts+0xb0>
   1054c:	30800315 	stw	r2,12(r6)
   10550:	31400215 	stw	r5,8(r6)
   10554:	00c000c4 	movi	r3,3
   10558:	30c00015 	stw	r3,0(r6)
   1055c:	10000e16 	blt	r2,zero,10598 <_fpadd_parts+0x110>
   10560:	3005883a 	mov	r2,r6
   10564:	f800283a 	ret
   10568:	49002a0e 	bge	r9,r4,10614 <_fpadd_parts+0x18c>
   1056c:	10c00117 	ldw	r3,4(r2)
   10570:	28800117 	ldw	r2,4(r5)
   10574:	000f883a 	mov	r7,zero
   10578:	18bfe31e 	bne	r3,r2,10508 <_fpadd_parts+0x80>
   1057c:	3a85883a 	add	r2,r7,r10
   10580:	30c00115 	stw	r3,4(r6)
   10584:	00c000c4 	movi	r3,3
   10588:	31000215 	stw	r4,8(r6)
   1058c:	30800315 	stw	r2,12(r6)
   10590:	30c00015 	stw	r3,0(r6)
   10594:	103ff20e 	bge	r2,zero,10560 <_fpadd_parts+0xd8>
   10598:	30c00217 	ldw	r3,8(r6)
   1059c:	1008d07a 	srli	r4,r2,1
   105a0:	1080004c 	andi	r2,r2,1
   105a4:	18c00044 	addi	r3,r3,1
   105a8:	1104b03a 	or	r2,r2,r4
   105ac:	30800315 	stw	r2,12(r6)
   105b0:	30c00215 	stw	r3,8(r6)
   105b4:	3005883a 	mov	r2,r6
   105b8:	f800283a 	ret
   105bc:	20ffe91e 	bne	r4,r3,10564 <_fpadd_parts+0xdc>
   105c0:	31000015 	stw	r4,0(r6)
   105c4:	10c00117 	ldw	r3,4(r2)
   105c8:	30c00115 	stw	r3,4(r6)
   105cc:	11c00217 	ldw	r7,8(r2)
   105d0:	10c00117 	ldw	r3,4(r2)
   105d4:	29000117 	ldw	r4,4(r5)
   105d8:	31c00215 	stw	r7,8(r6)
   105dc:	10800317 	ldw	r2,12(r2)
   105e0:	20c6703a 	and	r3,r4,r3
   105e4:	30c00115 	stw	r3,4(r6)
   105e8:	30800315 	stw	r2,12(r6)
   105ec:	3005883a 	mov	r2,r6
   105f0:	f800283a 	ret
   105f4:	51c5c83a 	sub	r2,r10,r7
   105f8:	103fc60e 	bge	r2,zero,10514 <_fpadd_parts+0x8c>
   105fc:	0085c83a 	sub	r2,zero,r2
   10600:	00c00044 	movi	r3,1
   10604:	30c00115 	stw	r3,4(r6)
   10608:	31000215 	stw	r4,8(r6)
   1060c:	30800315 	stw	r2,12(r6)
   10610:	003fc306 	br	10520 <_fpadd_parts+0x98>
   10614:	4809883a 	mov	r4,r9
   10618:	0015883a 	mov	r10,zero
   1061c:	003fb706 	br	104fc <_fpadd_parts+0x74>
   10620:	00d1c83a 	sub	r8,zero,r3
   10624:	02c007c4 	movi	r11,31
   10628:	5a3fcf16 	blt	r11,r8,10568 <_fpadd_parts+0xe0>
   1062c:	003fab06 	br	104dc <_fpadd_parts+0x54>
   10630:	2805883a 	mov	r2,r5
   10634:	f800283a 	ret
   10638:	183fb026 	beq	r3,zero,104fc <_fpadd_parts+0x74>
   1063c:	02400044 	movi	r9,1
   10640:	4a12983a 	sll	r9,r9,r8
   10644:	5206d83a 	srl	r3,r10,r8
   10648:	2209883a 	add	r4,r4,r8
   1064c:	4a3fffc4 	addi	r8,r9,-1
   10650:	4294703a 	and	r10,r8,r10
   10654:	5014c03a 	cmpne	r10,r10,zero
   10658:	50d4b03a 	or	r10,r10,r3
   1065c:	003fa706 	br	104fc <_fpadd_parts+0x74>
   10660:	193fc01e 	bne	r3,r4,10564 <_fpadd_parts+0xdc>
   10664:	11000117 	ldw	r4,4(r2)
   10668:	28c00117 	ldw	r3,4(r5)
   1066c:	20ffbd26 	beq	r4,r3,10564 <_fpadd_parts+0xdc>
   10670:	008000b4 	movhi	r2,2
   10674:	10a1f304 	addi	r2,r2,-30772
   10678:	f800283a 	ret

0001067c <__addsf3>:
   1067c:	defff104 	addi	sp,sp,-60
   10680:	d9000d15 	stw	r4,52(sp)
   10684:	d9400c15 	stw	r5,48(sp)
   10688:	d9000d04 	addi	r4,sp,52
   1068c:	d9400804 	addi	r5,sp,32
   10690:	dfc00e15 	stw	ra,56(sp)
   10694:	0010f680 	call	10f68 <__unpack_f>
   10698:	d9000c04 	addi	r4,sp,48
   1069c:	d9400404 	addi	r5,sp,16
   106a0:	0010f680 	call	10f68 <__unpack_f>
   106a4:	d9000804 	addi	r4,sp,32
   106a8:	d9400404 	addi	r5,sp,16
   106ac:	d80d883a 	mov	r6,sp
   106b0:	00104880 	call	10488 <_fpadd_parts>
   106b4:	1009883a 	mov	r4,r2
   106b8:	0010e3c0 	call	10e3c <__pack_f>
   106bc:	dfc00e17 	ldw	ra,56(sp)
   106c0:	dec00f04 	addi	sp,sp,60
   106c4:	f800283a 	ret

000106c8 <__subsf3>:
   106c8:	defff104 	addi	sp,sp,-60
   106cc:	d9000d15 	stw	r4,52(sp)
   106d0:	d9400c15 	stw	r5,48(sp)
   106d4:	d9000d04 	addi	r4,sp,52
   106d8:	d9400804 	addi	r5,sp,32
   106dc:	dfc00e15 	stw	ra,56(sp)
   106e0:	0010f680 	call	10f68 <__unpack_f>
   106e4:	d9000c04 	addi	r4,sp,48
   106e8:	d9400404 	addi	r5,sp,16
   106ec:	0010f680 	call	10f68 <__unpack_f>
   106f0:	d8800517 	ldw	r2,20(sp)
   106f4:	d9000804 	addi	r4,sp,32
   106f8:	d9400404 	addi	r5,sp,16
   106fc:	d80d883a 	mov	r6,sp
   10700:	1080005c 	xori	r2,r2,1
   10704:	d8800515 	stw	r2,20(sp)
   10708:	00104880 	call	10488 <_fpadd_parts>
   1070c:	1009883a 	mov	r4,r2
   10710:	0010e3c0 	call	10e3c <__pack_f>
   10714:	dfc00e17 	ldw	ra,56(sp)
   10718:	dec00f04 	addi	sp,sp,60
   1071c:	f800283a 	ret

00010720 <__mulsf3>:
   10720:	defff104 	addi	sp,sp,-60
   10724:	d9000d15 	stw	r4,52(sp)
   10728:	d9400c15 	stw	r5,48(sp)
   1072c:	d9000d04 	addi	r4,sp,52
   10730:	d9400804 	addi	r5,sp,32
   10734:	dfc00e15 	stw	ra,56(sp)
   10738:	0010f680 	call	10f68 <__unpack_f>
   1073c:	d9000c04 	addi	r4,sp,48
   10740:	d9400404 	addi	r5,sp,16
   10744:	0010f680 	call	10f68 <__unpack_f>
   10748:	d8c00817 	ldw	r3,32(sp)
   1074c:	00800044 	movi	r2,1
   10750:	10c00936 	bltu	r2,r3,10778 <__mulsf3+0x58>
   10754:	d8c00917 	ldw	r3,36(sp)
   10758:	d8800517 	ldw	r2,20(sp)
   1075c:	d9000804 	addi	r4,sp,32
   10760:	1884c03a 	cmpne	r2,r3,r2
   10764:	d8800915 	stw	r2,36(sp)
   10768:	0010e3c0 	call	10e3c <__pack_f>
   1076c:	dfc00e17 	ldw	ra,56(sp)
   10770:	dec00f04 	addi	sp,sp,60
   10774:	f800283a 	ret
   10778:	d9000417 	ldw	r4,16(sp)
   1077c:	11000936 	bltu	r2,r4,107a4 <__mulsf3+0x84>
   10780:	d8800517 	ldw	r2,20(sp)
   10784:	d8c00917 	ldw	r3,36(sp)
   10788:	d9000404 	addi	r4,sp,16
   1078c:	1884c03a 	cmpne	r2,r3,r2
   10790:	d8800515 	stw	r2,20(sp)
   10794:	0010e3c0 	call	10e3c <__pack_f>
   10798:	dfc00e17 	ldw	ra,56(sp)
   1079c:	dec00f04 	addi	sp,sp,60
   107a0:	f800283a 	ret
   107a4:	00800104 	movi	r2,4
   107a8:	1880051e 	bne	r3,r2,107c0 <__mulsf3+0xa0>
   107ac:	00800084 	movi	r2,2
   107b0:	20bfe81e 	bne	r4,r2,10754 <__mulsf3+0x34>
   107b4:	010000b4 	movhi	r4,2
   107b8:	2121f304 	addi	r4,r4,-30772
   107bc:	003fea06 	br	10768 <__mulsf3+0x48>
   107c0:	2080031e 	bne	r4,r2,107d0 <__mulsf3+0xb0>
   107c4:	00800084 	movi	r2,2
   107c8:	18bffa26 	beq	r3,r2,107b4 <__mulsf3+0x94>
   107cc:	003fec06 	br	10780 <__mulsf3+0x60>
   107d0:	00800084 	movi	r2,2
   107d4:	18bfdf26 	beq	r3,r2,10754 <__mulsf3+0x34>
   107d8:	20bfe926 	beq	r4,r2,10780 <__mulsf3+0x60>
   107dc:	d9000717 	ldw	r4,28(sp)
   107e0:	d9800b17 	ldw	r6,44(sp)
   107e4:	000b883a 	mov	r5,zero
   107e8:	000f883a 	mov	r7,zero
   107ec:	0010c800 	call	10c80 <__muldi3>
   107f0:	d9000617 	ldw	r4,24(sp)
   107f4:	d9400a17 	ldw	r5,40(sp)
   107f8:	d9c00917 	ldw	r7,36(sp)
   107fc:	290b883a 	add	r5,r5,r4
   10800:	d9000517 	ldw	r4,20(sp)
   10804:	29800084 	addi	r6,r5,2
   10808:	d9800215 	stw	r6,8(sp)
   1080c:	3908c03a 	cmpne	r4,r7,r4
   10810:	d9000115 	stw	r4,4(sp)
   10814:	1809883a 	mov	r4,r3
   10818:	1800070e 	bge	r3,zero,10838 <__mulsf3+0x118>
   1081c:	1900004c 	andi	r4,r3,1
   10820:	294000c4 	addi	r5,r5,3
   10824:	20000226 	beq	r4,zero,10830 <__mulsf3+0x110>
   10828:	1004d07a 	srli	r2,r2,1
   1082c:	10a00034 	orhi	r2,r2,32768
   10830:	1808d07a 	srli	r4,r3,1
   10834:	d9400215 	stw	r5,8(sp)
   10838:	01900034 	movhi	r6,16384
   1083c:	31bfffc4 	addi	r6,r6,-1
   10840:	31000c36 	bltu	r6,r4,10874 <__mulsf3+0x154>
   10844:	d8c00217 	ldw	r3,8(sp)
   10848:	18ffffc4 	addi	r3,r3,-1
   1084c:	00000306 	br	1085c <__mulsf3+0x13c>
   10850:	1085883a 	add	r2,r2,r2
   10854:	18ffffc4 	addi	r3,r3,-1
   10858:	31000536 	bltu	r6,r4,10870 <__mulsf3+0x150>
   1085c:	2109883a 	add	r4,r4,r4
   10860:	180b883a 	mov	r5,r3
   10864:	103ffa0e 	bge	r2,zero,10850 <__mulsf3+0x130>
   10868:	21000054 	ori	r4,r4,1
   1086c:	003ff806 	br	10850 <__mulsf3+0x130>
   10870:	d9400215 	stw	r5,8(sp)
   10874:	21401fcc 	andi	r5,r4,127
   10878:	00c01004 	movi	r3,64
   1087c:	28c00526 	beq	r5,r3,10894 <__mulsf3+0x174>
   10880:	008000c4 	movi	r2,3
   10884:	d9000315 	stw	r4,12(sp)
   10888:	d8800015 	stw	r2,0(sp)
   1088c:	d809883a 	mov	r4,sp
   10890:	003fb506 	br	10768 <__mulsf3+0x48>
   10894:	20c0200c 	andi	r3,r4,128
   10898:	183ff91e 	bne	r3,zero,10880 <__mulsf3+0x160>
   1089c:	103ff826 	beq	r2,zero,10880 <__mulsf3+0x160>
   108a0:	21001004 	addi	r4,r4,64
   108a4:	00bfe004 	movi	r2,-128
   108a8:	2088703a 	and	r4,r4,r2
   108ac:	003ff406 	br	10880 <__mulsf3+0x160>

000108b0 <__divsf3>:
   108b0:	defff504 	addi	sp,sp,-44
   108b4:	d9000915 	stw	r4,36(sp)
   108b8:	d9400815 	stw	r5,32(sp)
   108bc:	d9000904 	addi	r4,sp,36
   108c0:	d9400404 	addi	r5,sp,16
   108c4:	dfc00a15 	stw	ra,40(sp)
   108c8:	0010f680 	call	10f68 <__unpack_f>
   108cc:	d9000804 	addi	r4,sp,32
   108d0:	d80b883a 	mov	r5,sp
   108d4:	0010f680 	call	10f68 <__unpack_f>
   108d8:	d8c00417 	ldw	r3,16(sp)
   108dc:	00800044 	movi	r2,1
   108e0:	10c00536 	bltu	r2,r3,108f8 <__divsf3+0x48>
   108e4:	d9000404 	addi	r4,sp,16
   108e8:	0010e3c0 	call	10e3c <__pack_f>
   108ec:	dfc00a17 	ldw	ra,40(sp)
   108f0:	dec00b04 	addi	sp,sp,44
   108f4:	f800283a 	ret
   108f8:	d9000017 	ldw	r4,0(sp)
   108fc:	11000536 	bltu	r2,r4,10914 <__divsf3+0x64>
   10900:	d809883a 	mov	r4,sp
   10904:	0010e3c0 	call	10e3c <__pack_f>
   10908:	dfc00a17 	ldw	ra,40(sp)
   1090c:	dec00b04 	addi	sp,sp,44
   10910:	f800283a 	ret
   10914:	d9800517 	ldw	r6,20(sp)
   10918:	d9400117 	ldw	r5,4(sp)
   1091c:	00800104 	movi	r2,4
   10920:	314af03a 	xor	r5,r6,r5
   10924:	d9400515 	stw	r5,20(sp)
   10928:	18800226 	beq	r3,r2,10934 <__divsf3+0x84>
   1092c:	01400084 	movi	r5,2
   10930:	1940041e 	bne	r3,r5,10944 <__divsf3+0x94>
   10934:	193feb1e 	bne	r3,r4,108e4 <__divsf3+0x34>
   10938:	010000b4 	movhi	r4,2
   1093c:	2121f304 	addi	r4,r4,-30772
   10940:	003fe906 	br	108e8 <__divsf3+0x38>
   10944:	20802226 	beq	r4,r2,109d0 <__divsf3+0x120>
   10948:	21402526 	beq	r4,r5,109e0 <__divsf3+0x130>
   1094c:	d9000617 	ldw	r4,24(sp)
   10950:	d8c00217 	ldw	r3,8(sp)
   10954:	d8800717 	ldw	r2,28(sp)
   10958:	d9400317 	ldw	r5,12(sp)
   1095c:	20c7c83a 	sub	r3,r4,r3
   10960:	d8c00615 	stw	r3,24(sp)
   10964:	1140032e 	bgeu	r2,r5,10974 <__divsf3+0xc4>
   10968:	18ffffc4 	addi	r3,r3,-1
   1096c:	1085883a 	add	r2,r2,r2
   10970:	d8c00615 	stw	r3,24(sp)
   10974:	00c007c4 	movi	r3,31
   10978:	01100034 	movhi	r4,16384
   1097c:	000d883a 	mov	r6,zero
   10980:	18ffffc4 	addi	r3,r3,-1
   10984:	11400236 	bltu	r2,r5,10990 <__divsf3+0xe0>
   10988:	310cb03a 	or	r6,r6,r4
   1098c:	1145c83a 	sub	r2,r2,r5
   10990:	2008d07a 	srli	r4,r4,1
   10994:	1085883a 	add	r2,r2,r2
   10998:	183ff91e 	bne	r3,zero,10980 <__divsf3+0xd0>
   1099c:	31001fcc 	andi	r4,r6,127
   109a0:	00c01004 	movi	r3,64
   109a4:	20c00226 	beq	r4,r3,109b0 <__divsf3+0x100>
   109a8:	d9800715 	stw	r6,28(sp)
   109ac:	003fcd06 	br	108e4 <__divsf3+0x34>
   109b0:	30c0200c 	andi	r3,r6,128
   109b4:	183ffc1e 	bne	r3,zero,109a8 <__divsf3+0xf8>
   109b8:	103ffb26 	beq	r2,zero,109a8 <__divsf3+0xf8>
   109bc:	31801004 	addi	r6,r6,64
   109c0:	00bfe004 	movi	r2,-128
   109c4:	308c703a 	and	r6,r6,r2
   109c8:	d9800715 	stw	r6,28(sp)
   109cc:	003fc506 	br	108e4 <__divsf3+0x34>
   109d0:	d8000715 	stw	zero,28(sp)
   109d4:	d8000615 	stw	zero,24(sp)
   109d8:	d9000404 	addi	r4,sp,16
   109dc:	003fc206 	br	108e8 <__divsf3+0x38>
   109e0:	d8800415 	stw	r2,16(sp)
   109e4:	d9000404 	addi	r4,sp,16
   109e8:	003fbf06 	br	108e8 <__divsf3+0x38>

000109ec <__fixsfsi>:
   109ec:	defffa04 	addi	sp,sp,-24
   109f0:	d9000415 	stw	r4,16(sp)
   109f4:	d80b883a 	mov	r5,sp
   109f8:	d9000404 	addi	r4,sp,16
   109fc:	dfc00515 	stw	ra,20(sp)
   10a00:	0010f680 	call	10f68 <__unpack_f>
   10a04:	d8800017 	ldw	r2,0(sp)
   10a08:	00c00084 	movi	r3,2
   10a0c:	10c01826 	beq	r2,r3,10a70 <__fixsfsi+0x84>
   10a10:	00c00044 	movi	r3,1
   10a14:	1880162e 	bgeu	r3,r2,10a70 <__fixsfsi+0x84>
   10a18:	00c00104 	movi	r3,4
   10a1c:	10c00426 	beq	r2,r3,10a30 <__fixsfsi+0x44>
   10a20:	d8800217 	ldw	r2,8(sp)
   10a24:	10001216 	blt	r2,zero,10a70 <__fixsfsi+0x84>
   10a28:	00c00784 	movi	r3,30
   10a2c:	1880070e 	bge	r3,r2,10a4c <__fixsfsi+0x60>
   10a30:	d8800117 	ldw	r2,4(sp)
   10a34:	1000121e 	bne	r2,zero,10a80 <__fixsfsi+0x94>
   10a38:	00a00034 	movhi	r2,32768
   10a3c:	10bfffc4 	addi	r2,r2,-1
   10a40:	dfc00517 	ldw	ra,20(sp)
   10a44:	dec00604 	addi	sp,sp,24
   10a48:	f800283a 	ret
   10a4c:	1885c83a 	sub	r2,r3,r2
   10a50:	d8c00317 	ldw	r3,12(sp)
   10a54:	1884d83a 	srl	r2,r3,r2
   10a58:	d8c00117 	ldw	r3,4(sp)
   10a5c:	183ff826 	beq	r3,zero,10a40 <__fixsfsi+0x54>
   10a60:	0085c83a 	sub	r2,zero,r2
   10a64:	dfc00517 	ldw	ra,20(sp)
   10a68:	dec00604 	addi	sp,sp,24
   10a6c:	f800283a 	ret
   10a70:	0005883a 	mov	r2,zero
   10a74:	dfc00517 	ldw	ra,20(sp)
   10a78:	dec00604 	addi	sp,sp,24
   10a7c:	f800283a 	ret
   10a80:	00a00034 	movhi	r2,32768
   10a84:	dfc00517 	ldw	ra,20(sp)
   10a88:	dec00604 	addi	sp,sp,24
   10a8c:	f800283a 	ret

00010a90 <__floatsidf>:
   10a90:	2004d7fa 	srli	r2,r4,31
   10a94:	defff904 	addi	sp,sp,-28
   10a98:	00c000c4 	movi	r3,3
   10a9c:	dfc00615 	stw	ra,24(sp)
   10aa0:	dc000515 	stw	r16,20(sp)
   10aa4:	d8c00015 	stw	r3,0(sp)
   10aa8:	d8800115 	stw	r2,4(sp)
   10aac:	2000081e 	bne	r4,zero,10ad0 <__floatsidf+0x40>
   10ab0:	00800084 	movi	r2,2
   10ab4:	d8800015 	stw	r2,0(sp)
   10ab8:	d809883a 	mov	r4,sp
   10abc:	00110300 	call	11030 <__pack_d>
   10ac0:	dfc00617 	ldw	ra,24(sp)
   10ac4:	dc000517 	ldw	r16,20(sp)
   10ac8:	dec00704 	addi	sp,sp,28
   10acc:	f800283a 	ret
   10ad0:	00c00f04 	movi	r3,60
   10ad4:	d8c00215 	stw	r3,8(sp)
   10ad8:	10000f1e 	bne	r2,zero,10b18 <__floatsidf+0x88>
   10adc:	2021883a 	mov	r16,r4
   10ae0:	8009883a 	mov	r4,r16
   10ae4:	0010d900 	call	10d90 <__clzsi2>
   10ae8:	11000744 	addi	r4,r2,29
   10aec:	0100110e 	bge	zero,r4,10b34 <__floatsidf+0xa4>
   10af0:	10ffff44 	addi	r3,r2,-3
   10af4:	18001216 	blt	r3,zero,10b40 <__floatsidf+0xb0>
   10af8:	80c6983a 	sll	r3,r16,r3
   10afc:	0009883a 	mov	r4,zero
   10b00:	014007c4 	movi	r5,31
   10b04:	2885c83a 	sub	r2,r5,r2
   10b08:	d9000315 	stw	r4,12(sp)
   10b0c:	d8c00415 	stw	r3,16(sp)
   10b10:	d8800215 	stw	r2,8(sp)
   10b14:	003fe806 	br	10ab8 <__floatsidf+0x28>
   10b18:	00a00034 	movhi	r2,32768
   10b1c:	20800e26 	beq	r4,r2,10b58 <__floatsidf+0xc8>
   10b20:	0121c83a 	sub	r16,zero,r4
   10b24:	8009883a 	mov	r4,r16
   10b28:	0010d900 	call	10d90 <__clzsi2>
   10b2c:	11000744 	addi	r4,r2,29
   10b30:	013fef16 	blt	zero,r4,10af0 <__floatsidf+0x60>
   10b34:	dc000315 	stw	r16,12(sp)
   10b38:	d8000415 	stw	zero,16(sp)
   10b3c:	003fde06 	br	10ab8 <__floatsidf+0x28>
   10b40:	800ad07a 	srli	r5,r16,1
   10b44:	00c007c4 	movi	r3,31
   10b48:	1907c83a 	sub	r3,r3,r4
   10b4c:	28c6d83a 	srl	r3,r5,r3
   10b50:	8108983a 	sll	r4,r16,r4
   10b54:	003fea06 	br	10b00 <__floatsidf+0x70>
   10b58:	0005883a 	mov	r2,zero
   10b5c:	00f07834 	movhi	r3,49632
   10b60:	003fd706 	br	10ac0 <__floatsidf+0x30>

00010b64 <__floatunsidf>:
   10b64:	defff904 	addi	sp,sp,-28
   10b68:	dc000515 	stw	r16,20(sp)
   10b6c:	dfc00615 	stw	ra,24(sp)
   10b70:	d8000115 	stw	zero,4(sp)
   10b74:	2021883a 	mov	r16,r4
   10b78:	20001726 	beq	r4,zero,10bd8 <__floatunsidf+0x74>
   10b7c:	008000c4 	movi	r2,3
   10b80:	d8800015 	stw	r2,0(sp)
   10b84:	00800f04 	movi	r2,60
   10b88:	d8800215 	stw	r2,8(sp)
   10b8c:	0010d900 	call	10d90 <__clzsi2>
   10b90:	10c00744 	addi	r3,r2,29
   10b94:	18001816 	blt	r3,zero,10bf8 <__floatunsidf+0x94>
   10b98:	18002d26 	beq	r3,zero,10c50 <__floatunsidf+0xec>
   10b9c:	113fff44 	addi	r4,r2,-3
   10ba0:	20002e16 	blt	r4,zero,10c5c <__floatunsidf+0xf8>
   10ba4:	8108983a 	sll	r4,r16,r4
   10ba8:	0021883a 	mov	r16,zero
   10bac:	014007c4 	movi	r5,31
   10bb0:	2885c83a 	sub	r2,r5,r2
   10bb4:	dc000315 	stw	r16,12(sp)
   10bb8:	d9000415 	stw	r4,16(sp)
   10bbc:	d8800215 	stw	r2,8(sp)
   10bc0:	d809883a 	mov	r4,sp
   10bc4:	00110300 	call	11030 <__pack_d>
   10bc8:	dfc00617 	ldw	ra,24(sp)
   10bcc:	dc000517 	ldw	r16,20(sp)
   10bd0:	dec00704 	addi	sp,sp,28
   10bd4:	f800283a 	ret
   10bd8:	00800084 	movi	r2,2
   10bdc:	d809883a 	mov	r4,sp
   10be0:	d8800015 	stw	r2,0(sp)
   10be4:	00110300 	call	11030 <__pack_d>
   10be8:	dfc00617 	ldw	ra,24(sp)
   10bec:	dc000517 	ldw	r16,20(sp)
   10bf0:	dec00704 	addi	sp,sp,28
   10bf4:	f800283a 	ret
   10bf8:	00c7c83a 	sub	r3,zero,r3
   10bfc:	193ff804 	addi	r4,r3,-32
   10c00:	20001c16 	blt	r4,zero,10c74 <__floatunsidf+0x110>
   10c04:	000b883a 	mov	r5,zero
   10c08:	2009d7fa 	srai	r4,r4,31
   10c0c:	80c6d83a 	srl	r3,r16,r3
   10c10:	297fffc4 	addi	r5,r5,-1
   10c14:	2c20703a 	and	r16,r5,r16
   10c18:	8020c03a 	cmpne	r16,r16,zero
   10c1c:	1906703a 	and	r3,r3,r4
   10c20:	010007c4 	movi	r4,31
   10c24:	80c6b03a 	or	r3,r16,r3
   10c28:	2085c83a 	sub	r2,r4,r2
   10c2c:	d809883a 	mov	r4,sp
   10c30:	d8c00315 	stw	r3,12(sp)
   10c34:	d8000415 	stw	zero,16(sp)
   10c38:	d8800215 	stw	r2,8(sp)
   10c3c:	00110300 	call	11030 <__pack_d>
   10c40:	dfc00617 	ldw	ra,24(sp)
   10c44:	dc000517 	ldw	r16,20(sp)
   10c48:	dec00704 	addi	sp,sp,28
   10c4c:	f800283a 	ret
   10c50:	dc000315 	stw	r16,12(sp)
   10c54:	d8000415 	stw	zero,16(sp)
   10c58:	003fd906 	br	10bc0 <__floatunsidf+0x5c>
   10c5c:	800ad07a 	srli	r5,r16,1
   10c60:	010007c4 	movi	r4,31
   10c64:	20c9c83a 	sub	r4,r4,r3
   10c68:	2908d83a 	srl	r4,r5,r4
   10c6c:	80e0983a 	sll	r16,r16,r3
   10c70:	003fce06 	br	10bac <__floatunsidf+0x48>
   10c74:	01400044 	movi	r5,1
   10c78:	28ca983a 	sll	r5,r5,r3
   10c7c:	003fe206 	br	10c08 <__floatunsidf+0xa4>

00010c80 <__muldi3>:
   10c80:	defff604 	addi	sp,sp,-40
   10c84:	dd400515 	stw	r21,20(sp)
   10c88:	dd000415 	stw	r20,16(sp)
   10c8c:	257fffcc 	andi	r21,r4,65535
   10c90:	353fffcc 	andi	r20,r6,65535
   10c94:	dcc00315 	stw	r19,12(sp)
   10c98:	3026d43a 	srli	r19,r6,16
   10c9c:	dd800615 	stw	r22,24(sp)
   10ca0:	dc800215 	stw	r18,8(sp)
   10ca4:	dc400115 	stw	r17,4(sp)
   10ca8:	2024d43a 	srli	r18,r4,16
   10cac:	2023883a 	mov	r17,r4
   10cb0:	282d883a 	mov	r22,r5
   10cb4:	a009883a 	mov	r4,r20
   10cb8:	a80b883a 	mov	r5,r21
   10cbc:	dfc00915 	stw	ra,36(sp)
   10cc0:	df000815 	stw	fp,32(sp)
   10cc4:	ddc00715 	stw	r23,28(sp)
   10cc8:	3839883a 	mov	fp,r7
   10ccc:	dc000015 	stw	r16,0(sp)
   10cd0:	3021883a 	mov	r16,r6
   10cd4:	00112540 	call	11254 <__mulsi3>
   10cd8:	a80b883a 	mov	r5,r21
   10cdc:	9809883a 	mov	r4,r19
   10ce0:	102f883a 	mov	r23,r2
   10ce4:	00112540 	call	11254 <__mulsi3>
   10ce8:	a009883a 	mov	r4,r20
   10cec:	900b883a 	mov	r5,r18
   10cf0:	102b883a 	mov	r21,r2
   10cf4:	00112540 	call	11254 <__mulsi3>
   10cf8:	9809883a 	mov	r4,r19
   10cfc:	900b883a 	mov	r5,r18
   10d00:	1029883a 	mov	r20,r2
   10d04:	00112540 	call	11254 <__mulsi3>
   10d08:	1007883a 	mov	r3,r2
   10d0c:	b804d43a 	srli	r2,r23,16
   10d10:	a549883a 	add	r4,r20,r21
   10d14:	2089883a 	add	r4,r4,r2
   10d18:	2500022e 	bgeu	r4,r20,10d24 <__muldi3+0xa4>
   10d1c:	00800074 	movhi	r2,1
   10d20:	1887883a 	add	r3,r3,r2
   10d24:	200cd43a 	srli	r6,r4,16
   10d28:	2004943a 	slli	r2,r4,16
   10d2c:	e00b883a 	mov	r5,fp
   10d30:	8809883a 	mov	r4,r17
   10d34:	bdffffcc 	andi	r23,r23,65535
   10d38:	19a3883a 	add	r17,r3,r6
   10d3c:	15ef883a 	add	r23,r2,r23
   10d40:	00112540 	call	11254 <__mulsi3>
   10d44:	8009883a 	mov	r4,r16
   10d48:	b00b883a 	mov	r5,r22
   10d4c:	1025883a 	mov	r18,r2
   10d50:	00112540 	call	11254 <__mulsi3>
   10d54:	9085883a 	add	r2,r18,r2
   10d58:	1447883a 	add	r3,r2,r17
   10d5c:	b805883a 	mov	r2,r23
   10d60:	dfc00917 	ldw	ra,36(sp)
   10d64:	df000817 	ldw	fp,32(sp)
   10d68:	ddc00717 	ldw	r23,28(sp)
   10d6c:	dd800617 	ldw	r22,24(sp)
   10d70:	dd400517 	ldw	r21,20(sp)
   10d74:	dd000417 	ldw	r20,16(sp)
   10d78:	dcc00317 	ldw	r19,12(sp)
   10d7c:	dc800217 	ldw	r18,8(sp)
   10d80:	dc400117 	ldw	r17,4(sp)
   10d84:	dc000017 	ldw	r16,0(sp)
   10d88:	dec00a04 	addi	sp,sp,40
   10d8c:	f800283a 	ret

00010d90 <__clzsi2>:
   10d90:	00bfffd4 	movui	r2,65535
   10d94:	11000b36 	bltu	r2,r4,10dc4 <__clzsi2+0x34>
   10d98:	00803fc4 	movi	r2,255
   10d9c:	11001e2e 	bgeu	r2,r4,10e18 <__clzsi2+0x88>
   10da0:	00c00204 	movi	r3,8
   10da4:	20c8d83a 	srl	r4,r4,r3
   10da8:	00c000b4 	movhi	r3,2
   10dac:	18e1f704 	addi	r3,r3,-30756
   10db0:	00800604 	movi	r2,24
   10db4:	1909883a 	add	r4,r3,r4
   10db8:	20c00003 	ldbu	r3,0(r4)
   10dbc:	10c5c83a 	sub	r2,r2,r3
   10dc0:	f800283a 	ret
   10dc4:	00804034 	movhi	r2,256
   10dc8:	10bfffc4 	addi	r2,r2,-1
   10dcc:	11000936 	bltu	r2,r4,10df4 <__clzsi2+0x64>
   10dd0:	00800404 	movi	r2,16
   10dd4:	1007883a 	mov	r3,r2
   10dd8:	20c8d83a 	srl	r4,r4,r3
   10ddc:	00c000b4 	movhi	r3,2
   10de0:	18e1f704 	addi	r3,r3,-30756
   10de4:	1909883a 	add	r4,r3,r4
   10de8:	20c00003 	ldbu	r3,0(r4)
   10dec:	10c5c83a 	sub	r2,r2,r3
   10df0:	f800283a 	ret
   10df4:	00c00604 	movi	r3,24
   10df8:	20c8d83a 	srl	r4,r4,r3
   10dfc:	00c000b4 	movhi	r3,2
   10e00:	18e1f704 	addi	r3,r3,-30756
   10e04:	00800204 	movi	r2,8
   10e08:	1909883a 	add	r4,r3,r4
   10e0c:	20c00003 	ldbu	r3,0(r4)
   10e10:	10c5c83a 	sub	r2,r2,r3
   10e14:	f800283a 	ret
   10e18:	0007883a 	mov	r3,zero
   10e1c:	20c8d83a 	srl	r4,r4,r3
   10e20:	00c000b4 	movhi	r3,2
   10e24:	18e1f704 	addi	r3,r3,-30756
   10e28:	00800804 	movi	r2,32
   10e2c:	1909883a 	add	r4,r3,r4
   10e30:	20c00003 	ldbu	r3,0(r4)
   10e34:	10c5c83a 	sub	r2,r2,r3
   10e38:	f800283a 	ret

00010e3c <__pack_f>:
   10e3c:	21400017 	ldw	r5,0(r4)
   10e40:	01800044 	movi	r6,1
   10e44:	20c00317 	ldw	r3,12(r4)
   10e48:	21c00117 	ldw	r7,4(r4)
   10e4c:	3140282e 	bgeu	r6,r5,10ef0 <__pack_f+0xb4>
   10e50:	00800104 	movi	r2,4
   10e54:	28802326 	beq	r5,r2,10ee4 <__pack_f+0xa8>
   10e58:	00800084 	movi	r2,2
   10e5c:	28800f26 	beq	r5,r2,10e9c <__pack_f+0x60>
   10e60:	18000e26 	beq	r3,zero,10e9c <__pack_f+0x60>
   10e64:	21000217 	ldw	r4,8(r4)
   10e68:	00bfe084 	movi	r2,-126
   10e6c:	20802616 	blt	r4,r2,10f08 <__pack_f+0xcc>
   10e70:	00801fc4 	movi	r2,127
   10e74:	11001b16 	blt	r2,r4,10ee4 <__pack_f+0xa8>
   10e78:	188a703a 	and	r5,r3,r2
   10e7c:	00801004 	movi	r2,64
   10e80:	28801126 	beq	r5,r2,10ec8 <__pack_f+0x8c>
   10e84:	18c00fc4 	addi	r3,r3,63
   10e88:	18001316 	blt	r3,zero,10ed8 <__pack_f+0x9c>
   10e8c:	21001fc4 	addi	r4,r4,127
   10e90:	180690ba 	slli	r3,r3,2
   10e94:	1806d27a 	srli	r3,r3,9
   10e98:	00000206 	br	10ea4 <__pack_f+0x68>
   10e9c:	0009883a 	mov	r4,zero
   10ea0:	0007883a 	mov	r3,zero
   10ea4:	21003fcc 	andi	r4,r4,255
   10ea8:	200895fa 	slli	r4,r4,23
   10eac:	380a97fa 	slli	r5,r7,31
   10eb0:	00802034 	movhi	r2,128
   10eb4:	10bfffc4 	addi	r2,r2,-1
   10eb8:	1886703a 	and	r3,r3,r2
   10ebc:	1904b03a 	or	r2,r3,r4
   10ec0:	1144b03a 	or	r2,r2,r5
   10ec4:	f800283a 	ret
   10ec8:	1880200c 	andi	r2,r3,128
   10ecc:	103fee26 	beq	r2,zero,10e88 <__pack_f+0x4c>
   10ed0:	18c01004 	addi	r3,r3,64
   10ed4:	183fed0e 	bge	r3,zero,10e8c <__pack_f+0x50>
   10ed8:	1806d07a 	srli	r3,r3,1
   10edc:	21002004 	addi	r4,r4,128
   10ee0:	003feb06 	br	10e90 <__pack_f+0x54>
   10ee4:	013fffc4 	movi	r4,-1
   10ee8:	0007883a 	mov	r3,zero
   10eec:	003fed06 	br	10ea4 <__pack_f+0x68>
   10ef0:	18c00434 	orhi	r3,r3,16
   10ef4:	00802034 	movhi	r2,128
   10ef8:	10bfffc4 	addi	r2,r2,-1
   10efc:	1886703a 	and	r3,r3,r2
   10f00:	013fffc4 	movi	r4,-1
   10f04:	003fe706 	br	10ea4 <__pack_f+0x68>
   10f08:	1105c83a 	sub	r2,r2,r4
   10f0c:	01000644 	movi	r4,25
   10f10:	20801216 	blt	r4,r2,10f5c <__pack_f+0x120>
   10f14:	3088983a 	sll	r4,r6,r2
   10f18:	1884d83a 	srl	r2,r3,r2
   10f1c:	213fffc4 	addi	r4,r4,-1
   10f20:	20c6703a 	and	r3,r4,r3
   10f24:	1806c03a 	cmpne	r3,r3,zero
   10f28:	1884b03a 	or	r2,r3,r2
   10f2c:	11001fcc 	andi	r4,r2,127
   10f30:	00c01004 	movi	r3,64
   10f34:	20c00a1e 	bne	r4,r3,10f60 <__pack_f+0x124>
   10f38:	10c0200c 	andi	r3,r2,128
   10f3c:	18000126 	beq	r3,zero,10f44 <__pack_f+0x108>
   10f40:	10801004 	addi	r2,r2,64
   10f44:	100690ba 	slli	r3,r2,2
   10f48:	01100034 	movhi	r4,16384
   10f4c:	1105403a 	cmpgeu	r2,r2,r4
   10f50:	1806d27a 	srli	r3,r3,9
   10f54:	1009883a 	mov	r4,r2
   10f58:	003fd206 	br	10ea4 <__pack_f+0x68>
   10f5c:	0005883a 	mov	r2,zero
   10f60:	10800fc4 	addi	r2,r2,63
   10f64:	003ff706 	br	10f44 <__pack_f+0x108>

00010f68 <__unpack_f>:
   10f68:	20c00017 	ldw	r3,0(r4)
   10f6c:	00802034 	movhi	r2,128
   10f70:	10bfffc4 	addi	r2,r2,-1
   10f74:	1808d5fa 	srli	r4,r3,23
   10f78:	180cd7fa 	srli	r6,r3,31
   10f7c:	1884703a 	and	r2,r3,r2
   10f80:	21003fcc 	andi	r4,r4,255
   10f84:	29800115 	stw	r6,4(r5)
   10f88:	2000111e 	bne	r4,zero,10fd0 <__unpack_f+0x68>
   10f8c:	10001a26 	beq	r2,zero,10ff8 <__unpack_f+0x90>
   10f90:	00ffe084 	movi	r3,-126
   10f94:	100491fa 	slli	r2,r2,7
   10f98:	28c00215 	stw	r3,8(r5)
   10f9c:	00c000c4 	movi	r3,3
   10fa0:	28c00015 	stw	r3,0(r5)
   10fa4:	01900034 	movhi	r6,16384
   10fa8:	31bfffc4 	addi	r6,r6,-1
   10fac:	30801036 	bltu	r6,r2,10ff0 <__unpack_f+0x88>
   10fb0:	00ffe044 	movi	r3,-127
   10fb4:	1085883a 	add	r2,r2,r2
   10fb8:	1809883a 	mov	r4,r3
   10fbc:	18ffffc4 	addi	r3,r3,-1
   10fc0:	30bffc2e 	bgeu	r6,r2,10fb4 <__unpack_f+0x4c>
   10fc4:	29000215 	stw	r4,8(r5)
   10fc8:	28800315 	stw	r2,12(r5)
   10fcc:	f800283a 	ret
   10fd0:	01803fc4 	movi	r6,255
   10fd4:	21800b26 	beq	r4,r6,11004 <__unpack_f+0x9c>
   10fd8:	100491fa 	slli	r2,r2,7
   10fdc:	213fe044 	addi	r4,r4,-127
   10fe0:	00c000c4 	movi	r3,3
   10fe4:	10900034 	orhi	r2,r2,16384
   10fe8:	29000215 	stw	r4,8(r5)
   10fec:	28c00015 	stw	r3,0(r5)
   10ff0:	28800315 	stw	r2,12(r5)
   10ff4:	f800283a 	ret
   10ff8:	00800084 	movi	r2,2
   10ffc:	28800015 	stw	r2,0(r5)
   11000:	f800283a 	ret
   11004:	10000526 	beq	r2,zero,1101c <__unpack_f+0xb4>
   11008:	18c0042c 	andhi	r3,r3,16
   1100c:	18000626 	beq	r3,zero,11028 <__unpack_f+0xc0>
   11010:	00c00044 	movi	r3,1
   11014:	28c00015 	stw	r3,0(r5)
   11018:	003ff506 	br	10ff0 <__unpack_f+0x88>
   1101c:	00800104 	movi	r2,4
   11020:	28800015 	stw	r2,0(r5)
   11024:	f800283a 	ret
   11028:	28000015 	stw	zero,0(r5)
   1102c:	003ff006 	br	10ff0 <__unpack_f+0x88>

00011030 <__pack_d>:
   11030:	20800017 	ldw	r2,0(r4)
   11034:	defff804 	addi	sp,sp,-32
   11038:	dcc00315 	stw	r19,12(sp)
   1103c:	dc800215 	stw	r18,8(sp)
   11040:	dfc00715 	stw	ra,28(sp)
   11044:	dd800615 	stw	r22,24(sp)
   11048:	dd400515 	stw	r21,20(sp)
   1104c:	dd000415 	stw	r20,16(sp)
   11050:	dc400115 	stw	r17,4(sp)
   11054:	dc000015 	stw	r16,0(sp)
   11058:	04800044 	movi	r18,1
   1105c:	24400317 	ldw	r17,12(r4)
   11060:	24000417 	ldw	r16,16(r4)
   11064:	24c00117 	ldw	r19,4(r4)
   11068:	9080422e 	bgeu	r18,r2,11174 <__pack_d+0x144>
   1106c:	00c00104 	movi	r3,4
   11070:	10c03c26 	beq	r2,r3,11164 <__pack_d+0x134>
   11074:	00c00084 	movi	r3,2
   11078:	10c01926 	beq	r2,r3,110e0 <__pack_d+0xb0>
   1107c:	8c04b03a 	or	r2,r17,r16
   11080:	10001726 	beq	r2,zero,110e0 <__pack_d+0xb0>
   11084:	21000217 	ldw	r4,8(r4)
   11088:	00bf0084 	movi	r2,-1022
   1108c:	20804016 	blt	r4,r2,11190 <__pack_d+0x160>
   11090:	0080ffc4 	movi	r2,1023
   11094:	11003316 	blt	r2,r4,11164 <__pack_d+0x134>
   11098:	88803fcc 	andi	r2,r17,255
   1109c:	00c02004 	movi	r3,128
   110a0:	10c02926 	beq	r2,r3,11148 <__pack_d+0x118>
   110a4:	88801fc4 	addi	r2,r17,127
   110a8:	1463803a 	cmpltu	r17,r2,r17
   110ac:	8c21883a 	add	r16,r17,r16
   110b0:	1023883a 	mov	r17,r2
   110b4:	00880034 	movhi	r2,8192
   110b8:	10bfffc4 	addi	r2,r2,-1
   110bc:	14001c36 	bltu	r2,r16,11130 <__pack_d+0x100>
   110c0:	2100ffc4 	addi	r4,r4,1023
   110c4:	8006963a 	slli	r3,r16,24
   110c8:	8804d23a 	srli	r2,r17,8
   110cc:	8020913a 	slli	r16,r16,4
   110d0:	2101ffcc 	andi	r4,r4,2047
   110d4:	1884b03a 	or	r2,r3,r2
   110d8:	8020d33a 	srli	r16,r16,12
   110dc:	00000306 	br	110ec <__pack_d+0xbc>
   110e0:	0009883a 	mov	r4,zero
   110e4:	0005883a 	mov	r2,zero
   110e8:	0021883a 	mov	r16,zero
   110ec:	2008953a 	slli	r4,r4,20
   110f0:	982697fa 	slli	r19,r19,31
   110f4:	00c00434 	movhi	r3,16
   110f8:	18ffffc4 	addi	r3,r3,-1
   110fc:	80e0703a 	and	r16,r16,r3
   11100:	8106b03a 	or	r3,r16,r4
   11104:	1cc6b03a 	or	r3,r3,r19
   11108:	dfc00717 	ldw	ra,28(sp)
   1110c:	dd800617 	ldw	r22,24(sp)
   11110:	dd400517 	ldw	r21,20(sp)
   11114:	dd000417 	ldw	r20,16(sp)
   11118:	dcc00317 	ldw	r19,12(sp)
   1111c:	dc800217 	ldw	r18,8(sp)
   11120:	dc400117 	ldw	r17,4(sp)
   11124:	dc000017 	ldw	r16,0(sp)
   11128:	dec00804 	addi	sp,sp,32
   1112c:	f800283a 	ret
   11130:	800697fa 	slli	r3,r16,31
   11134:	8804d07a 	srli	r2,r17,1
   11138:	21010004 	addi	r4,r4,1024
   1113c:	8020d07a 	srli	r16,r16,1
   11140:	18a2b03a 	or	r17,r3,r2
   11144:	003fdf06 	br	110c4 <__pack_d+0x94>
   11148:	88c0400c 	andi	r3,r17,256
   1114c:	183fd926 	beq	r3,zero,110b4 <__pack_d+0x84>
   11150:	8885883a 	add	r2,r17,r2
   11154:	1463803a 	cmpltu	r17,r2,r17
   11158:	8c21883a 	add	r16,r17,r16
   1115c:	1023883a 	mov	r17,r2
   11160:	003fd406 	br	110b4 <__pack_d+0x84>
   11164:	0101ffc4 	movi	r4,2047
   11168:	0005883a 	mov	r2,zero
   1116c:	0021883a 	mov	r16,zero
   11170:	003fde06 	br	110ec <__pack_d+0xbc>
   11174:	84000234 	orhi	r16,r16,8
   11178:	00c00434 	movhi	r3,16
   1117c:	18ffffc4 	addi	r3,r3,-1
   11180:	8805883a 	mov	r2,r17
   11184:	80e0703a 	and	r16,r16,r3
   11188:	0101ffc4 	movi	r4,2047
   1118c:	003fd706 	br	110ec <__pack_d+0xbc>
   11190:	1129c83a 	sub	r20,r2,r4
   11194:	00800e04 	movi	r2,56
   11198:	15002716 	blt	r2,r20,11238 <__pack_d+0x208>
   1119c:	800b883a 	mov	r5,r16
   111a0:	a00d883a 	mov	r6,r20
   111a4:	8809883a 	mov	r4,r17
   111a8:	001127c0 	call	1127c <__lshrdi3>
   111ac:	9009883a 	mov	r4,r18
   111b0:	000b883a 	mov	r5,zero
   111b4:	a00d883a 	mov	r6,r20
   111b8:	102d883a 	mov	r22,r2
   111bc:	182b883a 	mov	r21,r3
   111c0:	00112c00 	call	112c0 <__ashldi3>
   111c4:	1009003a 	cmpeq	r4,r2,zero
   111c8:	1907c83a 	sub	r3,r3,r4
   111cc:	10bfffc4 	addi	r2,r2,-1
   111d0:	1c20703a 	and	r16,r3,r16
   111d4:	1444703a 	and	r2,r2,r17
   111d8:	1404b03a 	or	r2,r2,r16
   111dc:	1004c03a 	cmpne	r2,r2,zero
   111e0:	1584b03a 	or	r2,r2,r22
   111e4:	11003fcc 	andi	r4,r2,255
   111e8:	01402004 	movi	r5,128
   111ec:	a807883a 	mov	r3,r21
   111f0:	2140131e 	bne	r4,r5,11240 <__pack_d+0x210>
   111f4:	1140400c 	andi	r5,r2,256
   111f8:	28000426 	beq	r5,zero,1120c <__pack_d+0x1dc>
   111fc:	1109883a 	add	r4,r2,r4
   11200:	2085803a 	cmpltu	r2,r4,r2
   11204:	1547883a 	add	r3,r2,r21
   11208:	2005883a 	mov	r2,r4
   1120c:	1808963a 	slli	r4,r3,24
   11210:	1004d23a 	srli	r2,r2,8
   11214:	1820913a 	slli	r16,r3,4
   11218:	01440034 	movhi	r5,4096
   1121c:	297fffc4 	addi	r5,r5,-1
   11220:	2084b03a 	or	r2,r4,r2
   11224:	8020d33a 	srli	r16,r16,12
   11228:	01000044 	movi	r4,1
   1122c:	28ffaf36 	bltu	r5,r3,110ec <__pack_d+0xbc>
   11230:	0009883a 	mov	r4,zero
   11234:	003fad06 	br	110ec <__pack_d+0xbc>
   11238:	0005883a 	mov	r2,zero
   1123c:	0007883a 	mov	r3,zero
   11240:	11001fc4 	addi	r4,r2,127
   11244:	2085803a 	cmpltu	r2,r4,r2
   11248:	10c7883a 	add	r3,r2,r3
   1124c:	2005883a 	mov	r2,r4
   11250:	003fee06 	br	1120c <__pack_d+0x1dc>

00011254 <__mulsi3>:
   11254:	0005883a 	mov	r2,zero
   11258:	20000726 	beq	r4,zero,11278 <__mulsi3+0x24>
   1125c:	20c0004c 	andi	r3,r4,1
   11260:	2008d07a 	srli	r4,r4,1
   11264:	18000126 	beq	r3,zero,1126c <__mulsi3+0x18>
   11268:	1145883a 	add	r2,r2,r5
   1126c:	294b883a 	add	r5,r5,r5
   11270:	203ffa1e 	bne	r4,zero,1125c <__mulsi3+0x8>
   11274:	f800283a 	ret
   11278:	f800283a 	ret

0001127c <__lshrdi3>:
   1127c:	2005883a 	mov	r2,r4
   11280:	2807883a 	mov	r3,r5
   11284:	30000826 	beq	r6,zero,112a8 <__lshrdi3+0x2c>
   11288:	01000804 	movi	r4,32
   1128c:	2189c83a 	sub	r4,r4,r6
   11290:	0100060e 	bge	zero,r4,112ac <__lshrdi3+0x30>
   11294:	1184d83a 	srl	r2,r2,r6
   11298:	2908983a 	sll	r4,r5,r4
   1129c:	298cd83a 	srl	r6,r5,r6
   112a0:	2084b03a 	or	r2,r4,r2
   112a4:	3007883a 	mov	r3,r6
   112a8:	f800283a 	ret
   112ac:	0105c83a 	sub	r2,zero,r4
   112b0:	000d883a 	mov	r6,zero
   112b4:	2884d83a 	srl	r2,r5,r2
   112b8:	3007883a 	mov	r3,r6
   112bc:	003ffa06 	br	112a8 <__lshrdi3+0x2c>

000112c0 <__ashldi3>:
   112c0:	2005883a 	mov	r2,r4
   112c4:	2807883a 	mov	r3,r5
   112c8:	30000826 	beq	r6,zero,112ec <__ashldi3+0x2c>
   112cc:	01000804 	movi	r4,32
   112d0:	2189c83a 	sub	r4,r4,r6
   112d4:	0100060e 	bge	zero,r4,112f0 <__ashldi3+0x30>
   112d8:	1108d83a 	srl	r4,r2,r4
   112dc:	2986983a 	sll	r3,r5,r6
   112e0:	118c983a 	sll	r6,r2,r6
   112e4:	20c6b03a 	or	r3,r4,r3
   112e8:	3005883a 	mov	r2,r6
   112ec:	f800283a 	ret
   112f0:	0107c83a 	sub	r3,zero,r4
   112f4:	000d883a 	mov	r6,zero
   112f8:	10c6983a 	sll	r3,r2,r3
   112fc:	3005883a 	mov	r2,r6
   11300:	003ffa06 	br	112ec <__ashldi3+0x2c>

00011304 <fcvt>:
   11304:	defffd04 	addi	sp,sp,-12
   11308:	d8800317 	ldw	r2,12(sp)
   1130c:	d8000115 	stw	zero,4(sp)
   11310:	dfc00215 	stw	ra,8(sp)
   11314:	d8800015 	stw	r2,0(sp)
   11318:	00116d00 	call	116d0 <fcvtbuf>
   1131c:	dfc00217 	ldw	ra,8(sp)
   11320:	dec00304 	addi	sp,sp,12
   11324:	f800283a 	ret

00011328 <fcvtf>:
   11328:	defffb04 	addi	sp,sp,-20
   1132c:	dfc00415 	stw	ra,16(sp)
   11330:	dc800315 	stw	r18,12(sp)
   11334:	dc400215 	stw	r17,8(sp)
   11338:	3825883a 	mov	r18,r7
   1133c:	2823883a 	mov	r17,r5
   11340:	dc000115 	stw	r16,4(sp)
   11344:	3021883a 	mov	r16,r6
   11348:	0015cf40 	call	15cf4 <__extendsfdf2>
   1134c:	1009883a 	mov	r4,r2
   11350:	dc800015 	stw	r18,0(sp)
   11354:	180b883a 	mov	r5,r3
   11358:	880d883a 	mov	r6,r17
   1135c:	800f883a 	mov	r7,r16
   11360:	00113040 	call	11304 <fcvt>
   11364:	dfc00417 	ldw	ra,16(sp)
   11368:	dc800317 	ldw	r18,12(sp)
   1136c:	dc400217 	ldw	r17,8(sp)
   11370:	dc000117 	ldw	r16,4(sp)
   11374:	dec00504 	addi	sp,sp,20
   11378:	f800283a 	ret

0001137c <ecvt>:
   1137c:	defffd04 	addi	sp,sp,-12
   11380:	d8800317 	ldw	r2,12(sp)
   11384:	d8000115 	stw	zero,4(sp)
   11388:	dfc00215 	stw	ra,8(sp)
   1138c:	d8800015 	stw	r2,0(sp)
   11390:	00118880 	call	11888 <ecvtbuf>
   11394:	dfc00217 	ldw	ra,8(sp)
   11398:	dec00304 	addi	sp,sp,12
   1139c:	f800283a 	ret

000113a0 <ecvtf>:
   113a0:	defffb04 	addi	sp,sp,-20
   113a4:	dfc00415 	stw	ra,16(sp)
   113a8:	dc800315 	stw	r18,12(sp)
   113ac:	dc400215 	stw	r17,8(sp)
   113b0:	3825883a 	mov	r18,r7
   113b4:	2823883a 	mov	r17,r5
   113b8:	dc000115 	stw	r16,4(sp)
   113bc:	3021883a 	mov	r16,r6
   113c0:	0015cf40 	call	15cf4 <__extendsfdf2>
   113c4:	1009883a 	mov	r4,r2
   113c8:	dc800015 	stw	r18,0(sp)
   113cc:	180b883a 	mov	r5,r3
   113d0:	880d883a 	mov	r6,r17
   113d4:	800f883a 	mov	r7,r16
   113d8:	001137c0 	call	1137c <ecvt>
   113dc:	dfc00417 	ldw	ra,16(sp)
   113e0:	dc800317 	ldw	r18,12(sp)
   113e4:	dc400217 	ldw	r17,8(sp)
   113e8:	dc000117 	ldw	r16,4(sp)
   113ec:	dec00504 	addi	sp,sp,20
   113f0:	f800283a 	ret

000113f4 <gcvt>:
   113f4:	defff804 	addi	sp,sp,-32
   113f8:	dc400415 	stw	r17,16(sp)
   113fc:	dc000315 	stw	r16,12(sp)
   11400:	3023883a 	mov	r17,r6
   11404:	3821883a 	mov	r16,r7
   11408:	000d883a 	mov	r6,zero
   1140c:	000f883a 	mov	r7,zero
   11410:	dcc00615 	stw	r19,24(sp)
   11414:	dc800515 	stw	r18,20(sp)
   11418:	dfc00715 	stw	ra,28(sp)
   1141c:	2027883a 	mov	r19,r4
   11420:	2825883a 	mov	r18,r5
   11424:	00167580 	call	16758 <__ltdf2>
   11428:	10001516 	blt	r2,zero,11480 <gcvt+0x8c>
   1142c:	8005883a 	mov	r2,r16
   11430:	00c000b4 	movhi	r3,2
   11434:	18e44504 	addi	r3,r3,-28396
   11438:	19000017 	ldw	r4,0(r3)
   1143c:	d8800015 	stw	r2,0(sp)
   11440:	008019c4 	movi	r2,103
   11444:	d8800115 	stw	r2,4(sp)
   11448:	d8000215 	stw	zero,8(sp)
   1144c:	980b883a 	mov	r5,r19
   11450:	900d883a 	mov	r6,r18
   11454:	880f883a 	mov	r7,r17
   11458:	00119cc0 	call	119cc <_gcvt>
   1145c:	10000d26 	beq	r2,zero,11494 <gcvt+0xa0>
   11460:	8005883a 	mov	r2,r16
   11464:	dfc00717 	ldw	ra,28(sp)
   11468:	dcc00617 	ldw	r19,24(sp)
   1146c:	dc800517 	ldw	r18,20(sp)
   11470:	dc400417 	ldw	r17,16(sp)
   11474:	dc000317 	ldw	r16,12(sp)
   11478:	dec00804 	addi	sp,sp,32
   1147c:	f800283a 	ret
   11480:	00800b44 	movi	r2,45
   11484:	80800005 	stb	r2,0(r16)
   11488:	8c7fffc4 	addi	r17,r17,-1
   1148c:	80800044 	addi	r2,r16,1
   11490:	003fe706 	br	11430 <gcvt+0x3c>
   11494:	0021883a 	mov	r16,zero
   11498:	003ff106 	br	11460 <gcvt+0x6c>

0001149c <gcvtf>:
   1149c:	defffd04 	addi	sp,sp,-12
   114a0:	dc400115 	stw	r17,4(sp)
   114a4:	dc000015 	stw	r16,0(sp)
   114a8:	2823883a 	mov	r17,r5
   114ac:	3021883a 	mov	r16,r6
   114b0:	dfc00215 	stw	ra,8(sp)
   114b4:	0015cf40 	call	15cf4 <__extendsfdf2>
   114b8:	1009883a 	mov	r4,r2
   114bc:	180b883a 	mov	r5,r3
   114c0:	880d883a 	mov	r6,r17
   114c4:	800f883a 	mov	r7,r16
   114c8:	dfc00217 	ldw	ra,8(sp)
   114cc:	dc400117 	ldw	r17,4(sp)
   114d0:	dc000017 	ldw	r16,0(sp)
   114d4:	dec00304 	addi	sp,sp,12
   114d8:	00113f41 	jmpi	113f4 <gcvt>

000114dc <print_e>:
   114dc:	defff404 	addi	sp,sp,-48
   114e0:	dc400815 	stw	r17,32(sp)
   114e4:	dc400c17 	ldw	r17,48(sp)
   114e8:	dc800915 	stw	r18,36(sp)
   114ec:	2825883a 	mov	r18,r5
   114f0:	88800044 	addi	r2,r17,1
   114f4:	d8800015 	stw	r2,0(sp)
   114f8:	d8800404 	addi	r2,sp,16
   114fc:	d8800115 	stw	r2,4(sp)
   11500:	d8800604 	addi	r2,sp,24
   11504:	d8800215 	stw	r2,8(sp)
   11508:	d8800504 	addi	r2,sp,20
   1150c:	300b883a 	mov	r5,r6
   11510:	d8800315 	stw	r2,12(sp)
   11514:	380d883a 	mov	r6,r7
   11518:	01c00084 	movi	r7,2
   1151c:	dcc00a15 	stw	r19,40(sp)
   11520:	dc000715 	stw	r16,28(sp)
   11524:	dfc00b15 	stw	ra,44(sp)
   11528:	dcc00d03 	ldbu	r19,52(sp)
   1152c:	00139fc0 	call	139fc <_dtoa_r>
   11530:	dc000417 	ldw	r16,16(sp)
   11534:	00c9c3c4 	movi	r3,9999
   11538:	80c05f26 	beq	r16,r3,116b8 <print_e+0x1dc>
   1153c:	10c00003 	ldbu	r3,0(r2)
   11540:	11800044 	addi	r6,r2,1
   11544:	90c00005 	stb	r3,0(r18)
   11548:	d8c00e17 	ldw	r3,56(sp)
   1154c:	18004726 	beq	r3,zero,1166c <print_e+0x190>
   11550:	00c00b84 	movi	r3,46
   11554:	90c00045 	stb	r3,1(r18)
   11558:	10c00043 	ldbu	r3,1(r2)
   1155c:	91400084 	addi	r5,r18,2
   11560:	18803fcc 	andi	r2,r3,255
   11564:	1080201c 	xori	r2,r2,128
   11568:	10bfe004 	addi	r2,r2,-128
   1156c:	10005626 	beq	r2,zero,116c8 <print_e+0x1ec>
   11570:	8805883a 	mov	r2,r17
   11574:	04400216 	blt	zero,r17,11580 <print_e+0xa4>
   11578:	00000a06 	br	115a4 <print_e+0xc8>
   1157c:	10000926 	beq	r2,zero,115a4 <print_e+0xc8>
   11580:	28c00005 	stb	r3,0(r5)
   11584:	31800044 	addi	r6,r6,1
   11588:	30c00003 	ldbu	r3,0(r6)
   1158c:	10bfffc4 	addi	r2,r2,-1
   11590:	29400044 	addi	r5,r5,1
   11594:	19c03fcc 	andi	r7,r3,255
   11598:	39c0201c 	xori	r7,r7,128
   1159c:	39ffe004 	addi	r7,r7,-128
   115a0:	383ff61e 	bne	r7,zero,1157c <print_e+0xa0>
   115a4:	98c03fcc 	andi	r3,r19,255
   115a8:	18c0201c 	xori	r3,r3,128
   115ac:	18ffe004 	addi	r3,r3,-128
   115b0:	010019c4 	movi	r4,103
   115b4:	19003526 	beq	r3,r4,1168c <print_e+0x1b0>
   115b8:	010011c4 	movi	r4,71
   115bc:	19003c26 	beq	r3,r4,116b0 <print_e+0x1d4>
   115c0:	0080050e 	bge	zero,r2,115d8 <print_e+0xfc>
   115c4:	2885883a 	add	r2,r5,r2
   115c8:	00c00c04 	movi	r3,48
   115cc:	28c00005 	stb	r3,0(r5)
   115d0:	29400044 	addi	r5,r5,1
   115d4:	28bffd1e 	bne	r5,r2,115cc <print_e+0xf0>
   115d8:	2cc00005 	stb	r19,0(r5)
   115dc:	843fffc4 	addi	r16,r16,-1
   115e0:	80002e16 	blt	r16,zero,1169c <print_e+0x1c0>
   115e4:	00800ac4 	movi	r2,43
   115e8:	28800045 	stb	r2,1(r5)
   115ec:	2c400084 	addi	r17,r5,2
   115f0:	008018c4 	movi	r2,99
   115f4:	14000a0e 	bge	r2,r16,11620 <print_e+0x144>
   115f8:	8009883a 	mov	r4,r16
   115fc:	01401904 	movi	r5,100
   11600:	00169900 	call	16990 <__divsi3>
   11604:	10c00c04 	addi	r3,r2,48
   11608:	88c00005 	stb	r3,0(r17)
   1160c:	1009883a 	mov	r4,r2
   11610:	017fe704 	movi	r5,-100
   11614:	00112540 	call	11254 <__mulsi3>
   11618:	8c400044 	addi	r17,r17,1
   1161c:	80a1883a 	add	r16,r16,r2
   11620:	8009883a 	mov	r4,r16
   11624:	01400284 	movi	r5,10
   11628:	00169900 	call	16990 <__divsi3>
   1162c:	10c00c04 	addi	r3,r2,48
   11630:	88c00005 	stb	r3,0(r17)
   11634:	1009883a 	mov	r4,r2
   11638:	017ffd84 	movi	r5,-10
   1163c:	00112540 	call	11254 <__mulsi3>
   11640:	8085883a 	add	r2,r16,r2
   11644:	14000c04 	addi	r16,r2,48
   11648:	8c000045 	stb	r16,1(r17)
   1164c:	88000085 	stb	zero,2(r17)
   11650:	dfc00b17 	ldw	ra,44(sp)
   11654:	dcc00a17 	ldw	r19,40(sp)
   11658:	dc800917 	ldw	r18,36(sp)
   1165c:	dc400817 	ldw	r17,32(sp)
   11660:	dc000717 	ldw	r16,28(sp)
   11664:	dec00c04 	addi	sp,sp,48
   11668:	f800283a 	ret
   1166c:	883fb81e 	bne	r17,zero,11550 <print_e+0x74>
   11670:	98c03fcc 	andi	r3,r19,255
   11674:	18c0201c 	xori	r3,r3,128
   11678:	18ffe004 	addi	r3,r3,-128
   1167c:	010019c4 	movi	r4,103
   11680:	91400044 	addi	r5,r18,1
   11684:	0005883a 	mov	r2,zero
   11688:	193fcb1e 	bne	r3,r4,115b8 <print_e+0xdc>
   1168c:	04c01944 	movi	r19,101
   11690:	2cc00005 	stb	r19,0(r5)
   11694:	843fffc4 	addi	r16,r16,-1
   11698:	803fd20e 	bge	r16,zero,115e4 <print_e+0x108>
   1169c:	00800b44 	movi	r2,45
   116a0:	28800045 	stb	r2,1(r5)
   116a4:	2c400084 	addi	r17,r5,2
   116a8:	0421c83a 	sub	r16,zero,r16
   116ac:	003fd006 	br	115f0 <print_e+0x114>
   116b0:	04c01144 	movi	r19,69
   116b4:	003fc806 	br	115d8 <print_e+0xfc>
   116b8:	9009883a 	mov	r4,r18
   116bc:	100b883a 	mov	r5,r2
   116c0:	00136d40 	call	136d4 <strcpy>
   116c4:	003fe206 	br	11650 <print_e+0x174>
   116c8:	8805883a 	mov	r2,r17
   116cc:	003fb506 	br	115a4 <print_e+0xc8>

000116d0 <fcvtbuf>:
   116d0:	defff204 	addi	sp,sp,-56
   116d4:	dc400615 	stw	r17,24(sp)
   116d8:	dc400f17 	ldw	r17,60(sp)
   116dc:	dd000915 	stw	r20,36(sp)
   116e0:	dcc00815 	stw	r19,32(sp)
   116e4:	dc800715 	stw	r18,28(sp)
   116e8:	dc000515 	stw	r16,20(sp)
   116ec:	dfc00d15 	stw	ra,52(sp)
   116f0:	ddc00c15 	stw	r23,48(sp)
   116f4:	dd800b15 	stw	r22,44(sp)
   116f8:	dd400a15 	stw	r21,40(sp)
   116fc:	2027883a 	mov	r19,r4
   11700:	2825883a 	mov	r18,r5
   11704:	3021883a 	mov	r16,r6
   11708:	3829883a 	mov	r20,r7
   1170c:	88004926 	beq	r17,zero,11834 <fcvtbuf+0x164>
   11710:	008000b4 	movhi	r2,2
   11714:	10a44504 	addi	r2,r2,-28396
   11718:	15400017 	ldw	r21,0(r2)
   1171c:	9809883a 	mov	r4,r19
   11720:	900b883a 	mov	r5,r18
   11724:	000d883a 	mov	r6,zero
   11728:	01cffc34 	movhi	r7,16368
   1172c:	00167580 	call	16758 <__ltdf2>
   11730:	10002e16 	blt	r2,zero,117ec <fcvtbuf+0x11c>
   11734:	d8800e17 	ldw	r2,56(sp)
   11738:	dc000015 	stw	r16,0(sp)
   1173c:	dd000115 	stw	r20,4(sp)
   11740:	d8800215 	stw	r2,8(sp)
   11744:	d8800404 	addi	r2,sp,16
   11748:	d8800315 	stw	r2,12(sp)
   1174c:	a809883a 	mov	r4,r21
   11750:	980b883a 	mov	r5,r19
   11754:	900d883a 	mov	r6,r18
   11758:	01c000c4 	movi	r7,3
   1175c:	00139fc0 	call	139fc <_dtoa_r>
   11760:	a1400017 	ldw	r5,0(r20)
   11764:	d8c00417 	ldw	r3,16(sp)
   11768:	8809883a 	mov	r4,r17
   1176c:	014bc83a 	sub	r5,zero,r5
   11770:	10c0072e 	bgeu	r2,r3,11790 <fcvtbuf+0xc0>
   11774:	10c00003 	ldbu	r3,0(r2)
   11778:	21000044 	addi	r4,r4,1
   1177c:	10800044 	addi	r2,r2,1
   11780:	20ffffc5 	stb	r3,-1(r4)
   11784:	d8c00417 	ldw	r3,16(sp)
   11788:	29400044 	addi	r5,r5,1
   1178c:	10fff936 	bltu	r2,r3,11774 <fcvtbuf+0xa4>
   11790:	2c00090e 	bge	r5,r16,117b8 <fcvtbuf+0xe8>
   11794:	8145c83a 	sub	r2,r16,r5
   11798:	2085883a 	add	r2,r4,r2
   1179c:	2007883a 	mov	r3,r4
   117a0:	01c00c04 	movi	r7,48
   117a4:	19c00005 	stb	r7,0(r3)
   117a8:	18c00044 	addi	r3,r3,1
   117ac:	18bffd1e 	bne	r3,r2,117a4 <fcvtbuf+0xd4>
   117b0:	814bc83a 	sub	r5,r16,r5
   117b4:	2149883a 	add	r4,r4,r5
   117b8:	20000005 	stb	zero,0(r4)
   117bc:	8805883a 	mov	r2,r17
   117c0:	dfc00d17 	ldw	ra,52(sp)
   117c4:	ddc00c17 	ldw	r23,48(sp)
   117c8:	dd800b17 	ldw	r22,44(sp)
   117cc:	dd400a17 	ldw	r21,40(sp)
   117d0:	dd000917 	ldw	r20,36(sp)
   117d4:	dcc00817 	ldw	r19,32(sp)
   117d8:	dc800717 	ldw	r18,28(sp)
   117dc:	dc400617 	ldw	r17,24(sp)
   117e0:	dc000517 	ldw	r16,20(sp)
   117e4:	dec00e04 	addi	sp,sp,56
   117e8:	f800283a 	ret
   117ec:	9809883a 	mov	r4,r19
   117f0:	900b883a 	mov	r5,r18
   117f4:	000d883a 	mov	r6,zero
   117f8:	01effc34 	movhi	r7,49136
   117fc:	00166900 	call	16690 <__gtdf2>
   11800:	00bfcc0e 	bge	zero,r2,11734 <fcvtbuf+0x64>
   11804:	d8800e17 	ldw	r2,56(sp)
   11808:	dc000015 	stw	r16,0(sp)
   1180c:	dd000115 	stw	r20,4(sp)
   11810:	d8800215 	stw	r2,8(sp)
   11814:	d8800404 	addi	r2,sp,16
   11818:	d8800315 	stw	r2,12(sp)
   1181c:	a809883a 	mov	r4,r21
   11820:	980b883a 	mov	r5,r19
   11824:	900d883a 	mov	r6,r18
   11828:	01c00084 	movi	r7,2
   1182c:	00139fc0 	call	139fc <_dtoa_r>
   11830:	003fcb06 	br	11760 <fcvtbuf+0x90>
   11834:	058000b4 	movhi	r22,2
   11838:	b5a44504 	addi	r22,r22,-28396
   1183c:	b5400017 	ldw	r21,0(r22)
   11840:	30c008c4 	addi	r3,r6,35
   11844:	a8800617 	ldw	r2,24(r21)
   11848:	1880020e 	bge	r3,r2,11854 <fcvtbuf+0x184>
   1184c:	ac400717 	ldw	r17,28(r21)
   11850:	003fb206 	br	1171c <fcvtbuf+0x4c>
   11854:	a9400717 	ldw	r5,28(r21)
   11858:	35c00904 	addi	r23,r6,36
   1185c:	a809883a 	mov	r4,r21
   11860:	b80d883a 	mov	r6,r23
   11864:	00130d80 	call	130d8 <_realloc_r>
   11868:	1023883a 	mov	r17,r2
   1186c:	10000426 	beq	r2,zero,11880 <fcvtbuf+0x1b0>
   11870:	b5400017 	ldw	r21,0(r22)
   11874:	adc00615 	stw	r23,24(r21)
   11878:	a8800715 	stw	r2,28(r21)
   1187c:	003fa706 	br	1171c <fcvtbuf+0x4c>
   11880:	0005883a 	mov	r2,zero
   11884:	003fce06 	br	117c0 <fcvtbuf+0xf0>

00011888 <ecvtbuf>:
   11888:	defff304 	addi	sp,sp,-52
   1188c:	dc000615 	stw	r16,24(sp)
   11890:	dc000e17 	ldw	r16,56(sp)
   11894:	dcc00915 	stw	r19,36(sp)
   11898:	dc800815 	stw	r18,32(sp)
   1189c:	dc400715 	stw	r17,28(sp)
   118a0:	dfc00c15 	stw	ra,48(sp)
   118a4:	dd400b15 	stw	r21,44(sp)
   118a8:	dd000a15 	stw	r20,40(sp)
   118ac:	2027883a 	mov	r19,r4
   118b0:	2825883a 	mov	r18,r5
   118b4:	3023883a 	mov	r17,r6
   118b8:	80002c26 	beq	r16,zero,1196c <ecvtbuf+0xe4>
   118bc:	008000b4 	movhi	r2,2
   118c0:	10a44504 	addi	r2,r2,-28396
   118c4:	11000017 	ldw	r4,0(r2)
   118c8:	d8800d17 	ldw	r2,52(sp)
   118cc:	d9c00115 	stw	r7,4(sp)
   118d0:	dc400015 	stw	r17,0(sp)
   118d4:	d8800215 	stw	r2,8(sp)
   118d8:	d8800404 	addi	r2,sp,16
   118dc:	d8800315 	stw	r2,12(sp)
   118e0:	980b883a 	mov	r5,r19
   118e4:	900d883a 	mov	r6,r18
   118e8:	01c00084 	movi	r7,2
   118ec:	00139fc0 	call	139fc <_dtoa_r>
   118f0:	d8c00417 	ldw	r3,16(sp)
   118f4:	10c0242e 	bgeu	r2,r3,11988 <ecvtbuf+0x100>
   118f8:	8007883a 	mov	r3,r16
   118fc:	11000003 	ldbu	r4,0(r2)
   11900:	18c00044 	addi	r3,r3,1
   11904:	10800044 	addi	r2,r2,1
   11908:	193fffc5 	stb	r4,-1(r3)
   1190c:	d9000417 	ldw	r4,16(sp)
   11910:	1c0bc83a 	sub	r5,r3,r16
   11914:	113ff936 	bltu	r2,r4,118fc <ecvtbuf+0x74>
   11918:	2c40090e 	bge	r5,r17,11940 <ecvtbuf+0xb8>
   1191c:	894fc83a 	sub	r7,r17,r5
   11920:	19cf883a 	add	r7,r3,r7
   11924:	1809883a 	mov	r4,r3
   11928:	00800c04 	movi	r2,48
   1192c:	20800005 	stb	r2,0(r4)
   11930:	21000044 	addi	r4,r4,1
   11934:	21fffd1e 	bne	r4,r7,1192c <ecvtbuf+0xa4>
   11938:	894bc83a 	sub	r5,r17,r5
   1193c:	1947883a 	add	r3,r3,r5
   11940:	18000005 	stb	zero,0(r3)
   11944:	8005883a 	mov	r2,r16
   11948:	dfc00c17 	ldw	ra,48(sp)
   1194c:	dd400b17 	ldw	r21,44(sp)
   11950:	dd000a17 	ldw	r20,40(sp)
   11954:	dcc00917 	ldw	r19,36(sp)
   11958:	dc800817 	ldw	r18,32(sp)
   1195c:	dc400717 	ldw	r17,28(sp)
   11960:	dc000617 	ldw	r16,24(sp)
   11964:	dec00d04 	addi	sp,sp,52
   11968:	f800283a 	ret
   1196c:	050000b4 	movhi	r20,2
   11970:	a5244504 	addi	r20,r20,-28396
   11974:	a1000017 	ldw	r4,0(r20)
   11978:	20800617 	ldw	r2,24(r4)
   1197c:	3080050e 	bge	r6,r2,11994 <ecvtbuf+0x10c>
   11980:	24000717 	ldw	r16,28(r4)
   11984:	003fd006 	br	118c8 <ecvtbuf+0x40>
   11988:	8007883a 	mov	r3,r16
   1198c:	000b883a 	mov	r5,zero
   11990:	003fe106 	br	11918 <ecvtbuf+0x90>
   11994:	21400717 	ldw	r5,28(r4)
   11998:	35400044 	addi	r21,r6,1
   1199c:	a80d883a 	mov	r6,r21
   119a0:	d9c00515 	stw	r7,20(sp)
   119a4:	00130d80 	call	130d8 <_realloc_r>
   119a8:	1021883a 	mov	r16,r2
   119ac:	d9c00517 	ldw	r7,20(sp)
   119b0:	10000426 	beq	r2,zero,119c4 <ecvtbuf+0x13c>
   119b4:	a1000017 	ldw	r4,0(r20)
   119b8:	25400615 	stw	r21,24(r4)
   119bc:	20800715 	stw	r2,28(r4)
   119c0:	003fc106 	br	118c8 <ecvtbuf+0x40>
   119c4:	0005883a 	mov	r2,zero
   119c8:	003fdf06 	br	11948 <ecvtbuf+0xc0>

000119cc <_gcvt>:
   119cc:	defff204 	addi	sp,sp,-56
   119d0:	dd000b15 	stw	r20,44(sp)
   119d4:	dcc00a15 	stw	r19,40(sp)
   119d8:	dc800915 	stw	r18,36(sp)
   119dc:	dc000715 	stw	r16,28(sp)
   119e0:	2825883a 	mov	r18,r5
   119e4:	3021883a 	mov	r16,r6
   119e8:	2029883a 	mov	r20,r4
   119ec:	3827883a 	mov	r19,r7
   119f0:	2809883a 	mov	r4,r5
   119f4:	000f883a 	mov	r7,zero
   119f8:	300b883a 	mov	r5,r6
   119fc:	000d883a 	mov	r6,zero
   11a00:	dd400c15 	stw	r21,48(sp)
   11a04:	dc400815 	stw	r17,32(sp)
   11a08:	dfc00d15 	stw	ra,52(sp)
   11a0c:	dc400e17 	ldw	r17,56(sp)
   11a10:	dd400f03 	ldbu	r21,60(sp)
   11a14:	00167580 	call	16758 <__ltdf2>
   11a18:	10009716 	blt	r2,zero,11c78 <_gcvt+0x2ac>
   11a1c:	9009883a 	mov	r4,r18
   11a20:	800b883a 	mov	r5,r16
   11a24:	000d883a 	mov	r6,zero
   11a28:	000f883a 	mov	r7,zero
   11a2c:	00165d80 	call	165d8 <__eqdf2>
   11a30:	10008d26 	beq	r2,zero,11c68 <_gcvt+0x29c>
   11a34:	9009883a 	mov	r4,r18
   11a38:	800b883a 	mov	r5,r16
   11a3c:	01bac734 	movhi	r6,60188
   11a40:	3190cb44 	addi	r6,r6,17197
   11a44:	01cfc6b4 	movhi	r7,16154
   11a48:	39cdb884 	addi	r7,r7,14050
   11a4c:	00167b40 	call	167b4 <__ledf2>
   11a50:	00806e0e 	bge	zero,r2,11c0c <_gcvt+0x240>
   11a54:	9809883a 	mov	r4,r19
   11a58:	0012f640 	call	12f64 <_mprec_log10>
   11a5c:	9009883a 	mov	r4,r18
   11a60:	800b883a 	mov	r5,r16
   11a64:	100d883a 	mov	r6,r2
   11a68:	180f883a 	mov	r7,r3
   11a6c:	00166f40 	call	166f4 <__gedf2>
   11a70:	1000660e 	bge	r2,zero,11c0c <_gcvt+0x240>
   11a74:	9009883a 	mov	r4,r18
   11a78:	800b883a 	mov	r5,r16
   11a7c:	000d883a 	mov	r6,zero
   11a80:	01cffc34 	movhi	r7,16368
   11a84:	00167580 	call	16758 <__ltdf2>
   11a88:	dcc00015 	stw	r19,0(sp)
   11a8c:	10007c16 	blt	r2,zero,11c80 <_gcvt+0x2b4>
   11a90:	d8800604 	addi	r2,sp,24
   11a94:	d8800115 	stw	r2,4(sp)
   11a98:	d8800504 	addi	r2,sp,20
   11a9c:	d8800215 	stw	r2,8(sp)
   11aa0:	d8800404 	addi	r2,sp,16
   11aa4:	900b883a 	mov	r5,r18
   11aa8:	d8800315 	stw	r2,12(sp)
   11aac:	a009883a 	mov	r4,r20
   11ab0:	800d883a 	mov	r6,r16
   11ab4:	01c00084 	movi	r7,2
   11ab8:	00139fc0 	call	139fc <_dtoa_r>
   11abc:	100b883a 	mov	r5,r2
   11ac0:	d9000617 	ldw	r4,24(sp)
   11ac4:	0089c3c4 	movi	r2,9999
   11ac8:	20808026 	beq	r4,r2,11ccc <_gcvt+0x300>
   11acc:	2a800003 	ldbu	r10,0(r5)
   11ad0:	50803fcc 	andi	r2,r10,255
   11ad4:	1080201c 	xori	r2,r2,128
   11ad8:	10bfe004 	addi	r2,r2,-128
   11adc:	10007e26 	beq	r2,zero,11cd8 <_gcvt+0x30c>
   11ae0:	0100810e 	bge	zero,r4,11ce8 <_gcvt+0x31c>
   11ae4:	2011883a 	mov	r8,r4
   11ae8:	8807883a 	mov	r3,r17
   11aec:	00000106 	br	11af4 <_gcvt+0x128>
   11af0:	40001726 	beq	r8,zero,11b50 <_gcvt+0x184>
   11af4:	423fffc4 	addi	r8,r8,-1
   11af8:	1a800005 	stb	r10,0(r3)
   11afc:	da000615 	stw	r8,24(sp)
   11b00:	29400044 	addi	r5,r5,1
   11b04:	2a800003 	ldbu	r10,0(r5)
   11b08:	410dc83a 	sub	r6,r8,r4
   11b0c:	18c00044 	addi	r3,r3,1
   11b10:	50803fcc 	andi	r2,r10,255
   11b14:	1080201c 	xori	r2,r2,128
   11b18:	10bfe004 	addi	r2,r2,-128
   11b1c:	34cd883a 	add	r6,r6,r19
   11b20:	103ff31e 	bne	r2,zero,11af0 <_gcvt+0x124>
   11b24:	02000a0e 	bge	zero,r8,11b50 <_gcvt+0x184>
   11b28:	0180090e 	bge	zero,r6,11b50 <_gcvt+0x184>
   11b2c:	00800c04 	movi	r2,48
   11b30:	00000106 	br	11b38 <_gcvt+0x16c>
   11b34:	30005f26 	beq	r6,zero,11cb4 <_gcvt+0x2e8>
   11b38:	18800005 	stb	r2,0(r3)
   11b3c:	423fffc4 	addi	r8,r8,-1
   11b40:	31bfffc4 	addi	r6,r6,-1
   11b44:	18c00044 	addi	r3,r3,1
   11b48:	403ffa1e 	bne	r8,zero,11b34 <_gcvt+0x168>
   11b4c:	d8000615 	stw	zero,24(sp)
   11b50:	d8801017 	ldw	r2,64(sp)
   11b54:	1000021e 	bne	r2,zero,11b60 <_gcvt+0x194>
   11b58:	28800007 	ldb	r2,0(r5)
   11b5c:	10002926 	beq	r2,zero,11c04 <_gcvt+0x238>
   11b60:	1c405626 	beq	r3,r17,11cbc <_gcvt+0x2f0>
   11b64:	d9c00617 	ldw	r7,24(sp)
   11b68:	00800b84 	movi	r2,46
   11b6c:	18800005 	stb	r2,0(r3)
   11b70:	18c00044 	addi	r3,r3,1
   11b74:	38000a0e 	bge	r7,zero,11ba0 <_gcvt+0x1d4>
   11b78:	0180220e 	bge	zero,r6,11c04 <_gcvt+0x238>
   11b7c:	00800c04 	movi	r2,48
   11b80:	00000106 	br	11b88 <_gcvt+0x1bc>
   11b84:	30001f26 	beq	r6,zero,11c04 <_gcvt+0x238>
   11b88:	18800005 	stb	r2,0(r3)
   11b8c:	39c00044 	addi	r7,r7,1
   11b90:	31bfffc4 	addi	r6,r6,-1
   11b94:	18c00044 	addi	r3,r3,1
   11b98:	383ffa1e 	bne	r7,zero,11b84 <_gcvt+0x1b8>
   11b9c:	d8000615 	stw	zero,24(sp)
   11ba0:	29c00003 	ldbu	r7,0(r5)
   11ba4:	38803fcc 	andi	r2,r7,255
   11ba8:	1080201c 	xori	r2,r2,128
   11bac:	10bfe004 	addi	r2,r2,-128
   11bb0:	10000c26 	beq	r2,zero,11be4 <_gcvt+0x218>
   11bb4:	01800216 	blt	zero,r6,11bc0 <_gcvt+0x1f4>
   11bb8:	00001206 	br	11c04 <_gcvt+0x238>
   11bbc:	30001126 	beq	r6,zero,11c04 <_gcvt+0x238>
   11bc0:	19c00005 	stb	r7,0(r3)
   11bc4:	29400044 	addi	r5,r5,1
   11bc8:	29c00003 	ldbu	r7,0(r5)
   11bcc:	31bfffc4 	addi	r6,r6,-1
   11bd0:	18c00044 	addi	r3,r3,1
   11bd4:	38803fcc 	andi	r2,r7,255
   11bd8:	1080201c 	xori	r2,r2,128
   11bdc:	10bfe004 	addi	r2,r2,-128
   11be0:	103ff61e 	bne	r2,zero,11bbc <_gcvt+0x1f0>
   11be4:	d8801017 	ldw	r2,64(sp)
   11be8:	10000626 	beq	r2,zero,11c04 <_gcvt+0x238>
   11bec:	0180050e 	bge	zero,r6,11c04 <_gcvt+0x238>
   11bf0:	198d883a 	add	r6,r3,r6
   11bf4:	00800c04 	movi	r2,48
   11bf8:	18800005 	stb	r2,0(r3)
   11bfc:	18c00044 	addi	r3,r3,1
   11c00:	19bffd1e 	bne	r3,r6,11bf8 <_gcvt+0x22c>
   11c04:	18000005 	stb	zero,0(r3)
   11c08:	00000d06 	br	11c40 <_gcvt+0x274>
   11c0c:	ad403fcc 	andi	r21,r21,255
   11c10:	d8801017 	ldw	r2,64(sp)
   11c14:	ad40201c 	xori	r21,r21,128
   11c18:	9cffffc4 	addi	r19,r19,-1
   11c1c:	ad7fe004 	addi	r21,r21,-128
   11c20:	dcc00015 	stw	r19,0(sp)
   11c24:	dd400115 	stw	r21,4(sp)
   11c28:	d8800215 	stw	r2,8(sp)
   11c2c:	a009883a 	mov	r4,r20
   11c30:	880b883a 	mov	r5,r17
   11c34:	900d883a 	mov	r6,r18
   11c38:	800f883a 	mov	r7,r16
   11c3c:	00114dc0 	call	114dc <print_e>
   11c40:	8805883a 	mov	r2,r17
   11c44:	dfc00d17 	ldw	ra,52(sp)
   11c48:	dd400c17 	ldw	r21,48(sp)
   11c4c:	dd000b17 	ldw	r20,44(sp)
   11c50:	dcc00a17 	ldw	r19,40(sp)
   11c54:	dc800917 	ldw	r18,36(sp)
   11c58:	dc400817 	ldw	r17,32(sp)
   11c5c:	dc000717 	ldw	r16,28(sp)
   11c60:	dec00e04 	addi	sp,sp,56
   11c64:	f800283a 	ret
   11c68:	00800c04 	movi	r2,48
   11c6c:	88800005 	stb	r2,0(r17)
   11c70:	88000045 	stb	zero,1(r17)
   11c74:	003ff206 	br	11c40 <_gcvt+0x274>
   11c78:	8420003c 	xorhi	r16,r16,32768
   11c7c:	003f6706 	br	11a1c <_gcvt+0x50>
   11c80:	d8800604 	addi	r2,sp,24
   11c84:	d8800115 	stw	r2,4(sp)
   11c88:	d8800504 	addi	r2,sp,20
   11c8c:	d8800215 	stw	r2,8(sp)
   11c90:	d8800404 	addi	r2,sp,16
   11c94:	900b883a 	mov	r5,r18
   11c98:	d8800315 	stw	r2,12(sp)
   11c9c:	a009883a 	mov	r4,r20
   11ca0:	800d883a 	mov	r6,r16
   11ca4:	01c000c4 	movi	r7,3
   11ca8:	00139fc0 	call	139fc <_dtoa_r>
   11cac:	100b883a 	mov	r5,r2
   11cb0:	003f8306 	br	11ac0 <_gcvt+0xf4>
   11cb4:	da000615 	stw	r8,24(sp)
   11cb8:	003fa506 	br	11b50 <_gcvt+0x184>
   11cbc:	00800c04 	movi	r2,48
   11cc0:	18800005 	stb	r2,0(r3)
   11cc4:	18c00044 	addi	r3,r3,1
   11cc8:	003fa606 	br	11b64 <_gcvt+0x198>
   11ccc:	8809883a 	mov	r4,r17
   11cd0:	00136d40 	call	136d4 <strcpy>
   11cd4:	003fda06 	br	11c40 <_gcvt+0x274>
   11cd8:	2011883a 	mov	r8,r4
   11cdc:	8807883a 	mov	r3,r17
   11ce0:	980d883a 	mov	r6,r19
   11ce4:	003f8f06 	br	11b24 <_gcvt+0x158>
   11ce8:	8807883a 	mov	r3,r17
   11cec:	980d883a 	mov	r6,r19
   11cf0:	003f9706 	br	11b50 <_gcvt+0x184>

00011cf4 <_dcvt>:
   11cf4:	defff604 	addi	sp,sp,-40
   11cf8:	d8c00c17 	ldw	r3,48(sp)
   11cfc:	dc400815 	stw	r17,32(sp)
   11d00:	dc000715 	stw	r16,28(sp)
   11d04:	1a3feec4 	addi	r8,r3,-69
   11d08:	dfc00915 	stw	ra,36(sp)
   11d0c:	42003fcc 	andi	r8,r8,255
   11d10:	00800884 	movi	r2,34
   11d14:	2823883a 	mov	r17,r5
   11d18:	dc000a17 	ldw	r16,40(sp)
   11d1c:	12002d36 	bltu	r2,r8,11dd4 <_dcvt+0xe0>
   11d20:	4211883a 	add	r8,r8,r8
   11d24:	00800074 	movhi	r2,1
   11d28:	10874f04 	addi	r2,r2,7484
   11d2c:	4211883a 	add	r8,r8,r8
   11d30:	4091883a 	add	r8,r8,r2
   11d34:	40800017 	ldw	r2,0(r8)
   11d38:	1000683a 	jmp	r2
   11d3c:	00011fa0 	cmpeqi	zero,zero,1150
   11d40:	00011e38 	rdprs	zero,zero,1144
   11d44:	00011dec 	andhi	zero,zero,1143
   11d48:	00011dd4 	movui	zero,1143
   11d4c:	00011dd4 	movui	zero,1143
   11d50:	00011dd4 	movui	zero,1143
   11d54:	00011dd4 	movui	zero,1143
   11d58:	00011dd4 	movui	zero,1143
   11d5c:	00011dd4 	movui	zero,1143
   11d60:	00011dd4 	movui	zero,1143
   11d64:	00011dd4 	movui	zero,1143
   11d68:	00011dd4 	movui	zero,1143
   11d6c:	00011dd4 	movui	zero,1143
   11d70:	00011dd4 	movui	zero,1143
   11d74:	00011dd4 	movui	zero,1143
   11d78:	00011dd4 	movui	zero,1143
   11d7c:	00011dd4 	movui	zero,1143
   11d80:	00011dd4 	movui	zero,1143
   11d84:	00011dd4 	movui	zero,1143
   11d88:	00011dd4 	movui	zero,1143
   11d8c:	00011dd4 	movui	zero,1143
   11d90:	00011dd4 	movui	zero,1143
   11d94:	00011dd4 	movui	zero,1143
   11d98:	00011dd4 	movui	zero,1143
   11d9c:	00011dd4 	movui	zero,1143
   11da0:	00011dd4 	movui	zero,1143
   11da4:	00011dd4 	movui	zero,1143
   11da8:	00011dd4 	movui	zero,1143
   11dac:	00011dd4 	movui	zero,1143
   11db0:	00011dd4 	movui	zero,1143
   11db4:	00011dd4 	movui	zero,1143
   11db8:	00011dd4 	movui	zero,1143
   11dbc:	00011fa0 	cmpeqi	zero,zero,1150
   11dc0:	00011e38 	rdprs	zero,zero,1144
   11dc4:	00011dec 	andhi	zero,zero,1143
   11dc8:	8809883a 	mov	r4,r17
   11dcc:	100b883a 	mov	r5,r2
   11dd0:	00136d40 	call	136d4 <strcpy>
   11dd4:	8805883a 	mov	r2,r17
   11dd8:	dfc00917 	ldw	ra,36(sp)
   11ddc:	dc400817 	ldw	r17,32(sp)
   11de0:	dc000717 	ldw	r16,28(sp)
   11de4:	dec00a04 	addi	sp,sp,40
   11de8:	f800283a 	ret
   11dec:	8000011e 	bne	r16,zero,11df4 <_dcvt+0x100>
   11df0:	04000044 	movi	r16,1
   11df4:	d8800d17 	ldw	r2,52(sp)
   11df8:	18c03fcc 	andi	r3,r3,255
   11dfc:	18c0201c 	xori	r3,r3,128
   11e00:	18ffe004 	addi	r3,r3,-128
   11e04:	300b883a 	mov	r5,r6
   11e08:	dc400015 	stw	r17,0(sp)
   11e0c:	380d883a 	mov	r6,r7
   11e10:	d8c00115 	stw	r3,4(sp)
   11e14:	d8800215 	stw	r2,8(sp)
   11e18:	800f883a 	mov	r7,r16
   11e1c:	00119cc0 	call	119cc <_gcvt>
   11e20:	8805883a 	mov	r2,r17
   11e24:	dfc00917 	ldw	ra,36(sp)
   11e28:	dc400817 	ldw	r17,32(sp)
   11e2c:	dc000717 	ldw	r16,28(sp)
   11e30:	dec00a04 	addi	sp,sp,40
   11e34:	f800283a 	ret
   11e38:	80006b1e 	bne	r16,zero,11fe8 <_dcvt+0x2f4>
   11e3c:	d8800604 	addi	r2,sp,24
   11e40:	d8800115 	stw	r2,4(sp)
   11e44:	d8800504 	addi	r2,sp,20
   11e48:	d8800215 	stw	r2,8(sp)
   11e4c:	d8800404 	addi	r2,sp,16
   11e50:	300b883a 	mov	r5,r6
   11e54:	dc000015 	stw	r16,0(sp)
   11e58:	380d883a 	mov	r6,r7
   11e5c:	d8800315 	stw	r2,12(sp)
   11e60:	01c000c4 	movi	r7,3
   11e64:	00139fc0 	call	139fc <_dtoa_r>
   11e68:	d9c00617 	ldw	r7,24(sp)
   11e6c:	00c9c3c4 	movi	r3,9999
   11e70:	38ffd526 	beq	r7,r3,11dc8 <_dcvt+0xd4>
   11e74:	12000003 	ldbu	r8,0(r2)
   11e78:	100d883a 	mov	r6,r2
   11e7c:	40c03fcc 	andi	r3,r8,255
   11e80:	18c0201c 	xori	r3,r3,128
   11e84:	18ffe004 	addi	r3,r3,-128
   11e88:	18005e26 	beq	r3,zero,12004 <_dcvt+0x310>
   11e8c:	8807883a 	mov	r3,r17
   11e90:	01c00216 	blt	zero,r7,11e9c <_dcvt+0x1a8>
   11e94:	00001206 	br	11ee0 <_dcvt+0x1ec>
   11e98:	38001126 	beq	r7,zero,11ee0 <_dcvt+0x1ec>
   11e9c:	39ffffc4 	addi	r7,r7,-1
   11ea0:	1a000005 	stb	r8,0(r3)
   11ea4:	31800044 	addi	r6,r6,1
   11ea8:	d9c00615 	stw	r7,24(sp)
   11eac:	32000003 	ldbu	r8,0(r6)
   11eb0:	18c00044 	addi	r3,r3,1
   11eb4:	42403fcc 	andi	r9,r8,255
   11eb8:	4a40201c 	xori	r9,r9,128
   11ebc:	4a7fe004 	addi	r9,r9,-128
   11ec0:	483ff51e 	bne	r9,zero,11e98 <_dcvt+0x1a4>
   11ec4:	01c0060e 	bge	zero,r7,11ee0 <_dcvt+0x1ec>
   11ec8:	19cf883a 	add	r7,r3,r7
   11ecc:	01000c04 	movi	r4,48
   11ed0:	19000005 	stb	r4,0(r3)
   11ed4:	18c00044 	addi	r3,r3,1
   11ed8:	19fffd1e 	bne	r3,r7,11ed0 <_dcvt+0x1dc>
   11edc:	d8000615 	stw	zero,24(sp)
   11ee0:	d9000d17 	ldw	r4,52(sp)
   11ee4:	20003c26 	beq	r4,zero,11fd8 <_dcvt+0x2e4>
   11ee8:	11804226 	beq	r2,r6,11ff4 <_dcvt+0x300>
   11eec:	d9c00617 	ldw	r7,24(sp)
   11ef0:	00800b84 	movi	r2,46
   11ef4:	18800005 	stb	r2,0(r3)
   11ef8:	18c00044 	addi	r3,r3,1
   11efc:	38000a0e 	bge	r7,zero,11f28 <_dcvt+0x234>
   11f00:	0400200e 	bge	zero,r16,11f84 <_dcvt+0x290>
   11f04:	00800c04 	movi	r2,48
   11f08:	00000106 	br	11f10 <_dcvt+0x21c>
   11f0c:	80001d26 	beq	r16,zero,11f84 <_dcvt+0x290>
   11f10:	18800005 	stb	r2,0(r3)
   11f14:	39c00044 	addi	r7,r7,1
   11f18:	18c00044 	addi	r3,r3,1
   11f1c:	843fffc4 	addi	r16,r16,-1
   11f20:	383ffa1e 	bne	r7,zero,11f0c <_dcvt+0x218>
   11f24:	d8000615 	stw	zero,24(sp)
   11f28:	31c00003 	ldbu	r7,0(r6)
   11f2c:	38803fcc 	andi	r2,r7,255
   11f30:	1080201c 	xori	r2,r2,128
   11f34:	10bfe004 	addi	r2,r2,-128
   11f38:	10000c26 	beq	r2,zero,11f6c <_dcvt+0x278>
   11f3c:	04000216 	blt	zero,r16,11f48 <_dcvt+0x254>
   11f40:	00001006 	br	11f84 <_dcvt+0x290>
   11f44:	80000f26 	beq	r16,zero,11f84 <_dcvt+0x290>
   11f48:	19c00005 	stb	r7,0(r3)
   11f4c:	31800044 	addi	r6,r6,1
   11f50:	31c00003 	ldbu	r7,0(r6)
   11f54:	18c00044 	addi	r3,r3,1
   11f58:	843fffc4 	addi	r16,r16,-1
   11f5c:	3a003fcc 	andi	r8,r7,255
   11f60:	4200201c 	xori	r8,r8,128
   11f64:	423fe004 	addi	r8,r8,-128
   11f68:	403ff61e 	bne	r8,zero,11f44 <_dcvt+0x250>
   11f6c:	0400050e 	bge	zero,r16,11f84 <_dcvt+0x290>
   11f70:	1c21883a 	add	r16,r3,r16
   11f74:	00800c04 	movi	r2,48
   11f78:	18800005 	stb	r2,0(r3)
   11f7c:	18c00044 	addi	r3,r3,1
   11f80:	1c3ffd1e 	bne	r3,r16,11f78 <_dcvt+0x284>
   11f84:	18000005 	stb	zero,0(r3)
   11f88:	8805883a 	mov	r2,r17
   11f8c:	dfc00917 	ldw	ra,36(sp)
   11f90:	dc400817 	ldw	r17,32(sp)
   11f94:	dc000717 	ldw	r16,28(sp)
   11f98:	dec00a04 	addi	sp,sp,40
   11f9c:	f800283a 	ret
   11fa0:	d8800d17 	ldw	r2,52(sp)
   11fa4:	18c03fcc 	andi	r3,r3,255
   11fa8:	18c0201c 	xori	r3,r3,128
   11fac:	18ffe004 	addi	r3,r3,-128
   11fb0:	d8800215 	stw	r2,8(sp)
   11fb4:	dc000015 	stw	r16,0(sp)
   11fb8:	d8c00115 	stw	r3,4(sp)
   11fbc:	00114dc0 	call	114dc <print_e>
   11fc0:	8805883a 	mov	r2,r17
   11fc4:	dfc00917 	ldw	ra,36(sp)
   11fc8:	dc400817 	ldw	r17,32(sp)
   11fcc:	dc000717 	ldw	r16,28(sp)
   11fd0:	dec00a04 	addi	sp,sp,40
   11fd4:	f800283a 	ret
   11fd8:	31000007 	ldb	r4,0(r6)
   11fdc:	203fc21e 	bne	r4,zero,11ee8 <_dcvt+0x1f4>
   11fe0:	18000005 	stb	zero,0(r3)
   11fe4:	003fe806 	br	11f88 <_dcvt+0x294>
   11fe8:	00800044 	movi	r2,1
   11fec:	d8800d15 	stw	r2,52(sp)
   11ff0:	003f9206 	br	11e3c <_dcvt+0x148>
   11ff4:	00800c04 	movi	r2,48
   11ff8:	18800005 	stb	r2,0(r3)
   11ffc:	18c00044 	addi	r3,r3,1
   12000:	003fba06 	br	11eec <_dcvt+0x1f8>
   12004:	8807883a 	mov	r3,r17
   12008:	003fae06 	br	11ec4 <_dcvt+0x1d0>

0001200c <_Balloc>:
   1200c:	defffc04 	addi	sp,sp,-16
   12010:	dc000015 	stw	r16,0(sp)
   12014:	24000417 	ldw	r16,16(r4)
   12018:	dc800215 	stw	r18,8(sp)
   1201c:	dc400115 	stw	r17,4(sp)
   12020:	dfc00315 	stw	ra,12(sp)
   12024:	2025883a 	mov	r18,r4
   12028:	2823883a 	mov	r17,r5
   1202c:	80001126 	beq	r16,zero,12074 <_Balloc+0x68>
   12030:	80800317 	ldw	r2,12(r16)
   12034:	10001726 	beq	r2,zero,12094 <_Balloc+0x88>
   12038:	8c47883a 	add	r3,r17,r17
   1203c:	18c7883a 	add	r3,r3,r3
   12040:	10c7883a 	add	r3,r2,r3
   12044:	18800017 	ldw	r2,0(r3)
   12048:	10001c26 	beq	r2,zero,120bc <_Balloc+0xb0>
   1204c:	11000017 	ldw	r4,0(r2)
   12050:	19000015 	stw	r4,0(r3)
   12054:	10000415 	stw	zero,16(r2)
   12058:	10000315 	stw	zero,12(r2)
   1205c:	dfc00317 	ldw	ra,12(sp)
   12060:	dc800217 	ldw	r18,8(sp)
   12064:	dc400117 	ldw	r17,4(sp)
   12068:	dc000017 	ldw	r16,0(sp)
   1206c:	dec00404 	addi	sp,sp,16
   12070:	f800283a 	ret
   12074:	01000404 	movi	r4,16
   12078:	00154400 	call	15440 <malloc>
   1207c:	90800415 	stw	r2,16(r18)
   12080:	1021883a 	mov	r16,r2
   12084:	10000115 	stw	zero,4(r2)
   12088:	10000215 	stw	zero,8(r2)
   1208c:	10000015 	stw	zero,0(r2)
   12090:	10000315 	stw	zero,12(r2)
   12094:	9009883a 	mov	r4,r18
   12098:	01400104 	movi	r5,4
   1209c:	01800404 	movi	r6,16
   120a0:	00136f40 	call	136f4 <_calloc_r>
   120a4:	90c00417 	ldw	r3,16(r18)
   120a8:	80800315 	stw	r2,12(r16)
   120ac:	18800317 	ldw	r2,12(r3)
   120b0:	103fe11e 	bne	r2,zero,12038 <_Balloc+0x2c>
   120b4:	0005883a 	mov	r2,zero
   120b8:	003fe806 	br	1205c <_Balloc+0x50>
   120bc:	01400044 	movi	r5,1
   120c0:	2c60983a 	sll	r16,r5,r17
   120c4:	9009883a 	mov	r4,r18
   120c8:	81800144 	addi	r6,r16,5
   120cc:	318d883a 	add	r6,r6,r6
   120d0:	318d883a 	add	r6,r6,r6
   120d4:	00136f40 	call	136f4 <_calloc_r>
   120d8:	103ff626 	beq	r2,zero,120b4 <_Balloc+0xa8>
   120dc:	14400115 	stw	r17,4(r2)
   120e0:	14000215 	stw	r16,8(r2)
   120e4:	003fdb06 	br	12054 <_Balloc+0x48>

000120e8 <_Bfree>:
   120e8:	20800417 	ldw	r2,16(r4)
   120ec:	defffd04 	addi	sp,sp,-12
   120f0:	dc000115 	stw	r16,4(sp)
   120f4:	dfc00215 	stw	ra,8(sp)
   120f8:	2021883a 	mov	r16,r4
   120fc:	10000e26 	beq	r2,zero,12138 <_Bfree+0x50>
   12100:	28000926 	beq	r5,zero,12128 <_Bfree+0x40>
   12104:	80800417 	ldw	r2,16(r16)
   12108:	28c00117 	ldw	r3,4(r5)
   1210c:	10800317 	ldw	r2,12(r2)
   12110:	18c7883a 	add	r3,r3,r3
   12114:	18c7883a 	add	r3,r3,r3
   12118:	10c5883a 	add	r2,r2,r3
   1211c:	10c00017 	ldw	r3,0(r2)
   12120:	28c00015 	stw	r3,0(r5)
   12124:	11400015 	stw	r5,0(r2)
   12128:	dfc00217 	ldw	ra,8(sp)
   1212c:	dc000117 	ldw	r16,4(sp)
   12130:	dec00304 	addi	sp,sp,12
   12134:	f800283a 	ret
   12138:	01000404 	movi	r4,16
   1213c:	d9400015 	stw	r5,0(sp)
   12140:	00154400 	call	15440 <malloc>
   12144:	80800415 	stw	r2,16(r16)
   12148:	10000115 	stw	zero,4(r2)
   1214c:	10000215 	stw	zero,8(r2)
   12150:	10000015 	stw	zero,0(r2)
   12154:	10000315 	stw	zero,12(r2)
   12158:	d9400017 	ldw	r5,0(sp)
   1215c:	003fe806 	br	12100 <_Bfree+0x18>

00012160 <__multadd>:
   12160:	defff604 	addi	sp,sp,-40
   12164:	dd400515 	stw	r21,20(sp)
   12168:	2d400417 	ldw	r21,16(r5)
   1216c:	df000815 	stw	fp,32(sp)
   12170:	ddc00715 	stw	r23,28(sp)
   12174:	dd800615 	stw	r22,24(sp)
   12178:	dd000415 	stw	r20,16(sp)
   1217c:	dc400115 	stw	r17,4(sp)
   12180:	dc000015 	stw	r16,0(sp)
   12184:	dfc00915 	stw	ra,36(sp)
   12188:	dcc00315 	stw	r19,12(sp)
   1218c:	dc800215 	stw	r18,8(sp)
   12190:	282d883a 	mov	r22,r5
   12194:	202f883a 	mov	r23,r4
   12198:	3029883a 	mov	r20,r6
   1219c:	3839883a 	mov	fp,r7
   121a0:	2c000504 	addi	r16,r5,20
   121a4:	0023883a 	mov	r17,zero
   121a8:	84c00017 	ldw	r19,0(r16)
   121ac:	a00b883a 	mov	r5,r20
   121b0:	8c400044 	addi	r17,r17,1
   121b4:	993fffcc 	andi	r4,r19,65535
   121b8:	00112540 	call	11254 <__mulsi3>
   121bc:	1725883a 	add	r18,r2,fp
   121c0:	9808d43a 	srli	r4,r19,16
   121c4:	9026d43a 	srli	r19,r18,16
   121c8:	a00b883a 	mov	r5,r20
   121cc:	00112540 	call	11254 <__mulsi3>
   121d0:	988f883a 	add	r7,r19,r2
   121d4:	3804943a 	slli	r2,r7,16
   121d8:	94bfffcc 	andi	r18,r18,65535
   121dc:	3838d43a 	srli	fp,r7,16
   121e0:	14a5883a 	add	r18,r2,r18
   121e4:	84800015 	stw	r18,0(r16)
   121e8:	84000104 	addi	r16,r16,4
   121ec:	8d7fee16 	blt	r17,r21,121a8 <__multadd+0x48>
   121f0:	e0000926 	beq	fp,zero,12218 <__multadd+0xb8>
   121f4:	b0800217 	ldw	r2,8(r22)
   121f8:	a880140e 	bge	r21,r2,1224c <__multadd+0xec>
   121fc:	a8800144 	addi	r2,r21,5
   12200:	1085883a 	add	r2,r2,r2
   12204:	1085883a 	add	r2,r2,r2
   12208:	b085883a 	add	r2,r22,r2
   1220c:	ad400044 	addi	r21,r21,1
   12210:	17000015 	stw	fp,0(r2)
   12214:	b5400415 	stw	r21,16(r22)
   12218:	b005883a 	mov	r2,r22
   1221c:	dfc00917 	ldw	ra,36(sp)
   12220:	df000817 	ldw	fp,32(sp)
   12224:	ddc00717 	ldw	r23,28(sp)
   12228:	dd800617 	ldw	r22,24(sp)
   1222c:	dd400517 	ldw	r21,20(sp)
   12230:	dd000417 	ldw	r20,16(sp)
   12234:	dcc00317 	ldw	r19,12(sp)
   12238:	dc800217 	ldw	r18,8(sp)
   1223c:	dc400117 	ldw	r17,4(sp)
   12240:	dc000017 	ldw	r16,0(sp)
   12244:	dec00a04 	addi	sp,sp,40
   12248:	f800283a 	ret
   1224c:	b1400117 	ldw	r5,4(r22)
   12250:	b809883a 	mov	r4,r23
   12254:	29400044 	addi	r5,r5,1
   12258:	001200c0 	call	1200c <_Balloc>
   1225c:	b1800417 	ldw	r6,16(r22)
   12260:	b1400304 	addi	r5,r22,12
   12264:	11000304 	addi	r4,r2,12
   12268:	31800084 	addi	r6,r6,2
   1226c:	318d883a 	add	r6,r6,r6
   12270:	318d883a 	add	r6,r6,r6
   12274:	1021883a 	mov	r16,r2
   12278:	0015bec0 	call	15bec <memcpy>
   1227c:	b00b883a 	mov	r5,r22
   12280:	b809883a 	mov	r4,r23
   12284:	00120e80 	call	120e8 <_Bfree>
   12288:	802d883a 	mov	r22,r16
   1228c:	003fdb06 	br	121fc <__multadd+0x9c>

00012290 <__s2b>:
   12290:	defff904 	addi	sp,sp,-28
   12294:	dd000415 	stw	r20,16(sp)
   12298:	dc400115 	stw	r17,4(sp)
   1229c:	2829883a 	mov	r20,r5
   122a0:	2023883a 	mov	r17,r4
   122a4:	01400244 	movi	r5,9
   122a8:	39000204 	addi	r4,r7,8
   122ac:	dcc00315 	stw	r19,12(sp)
   122b0:	dc800215 	stw	r18,8(sp)
   122b4:	dfc00615 	stw	ra,24(sp)
   122b8:	dd400515 	stw	r21,20(sp)
   122bc:	dc000015 	stw	r16,0(sp)
   122c0:	3825883a 	mov	r18,r7
   122c4:	3027883a 	mov	r19,r6
   122c8:	00169900 	call	16990 <__divsi3>
   122cc:	00c00044 	movi	r3,1
   122d0:	000b883a 	mov	r5,zero
   122d4:	1880030e 	bge	r3,r2,122e4 <__s2b+0x54>
   122d8:	18c7883a 	add	r3,r3,r3
   122dc:	29400044 	addi	r5,r5,1
   122e0:	18bffd16 	blt	r3,r2,122d8 <__s2b+0x48>
   122e4:	8809883a 	mov	r4,r17
   122e8:	001200c0 	call	1200c <_Balloc>
   122ec:	d8c00717 	ldw	r3,28(sp)
   122f0:	10c00515 	stw	r3,20(r2)
   122f4:	00c00044 	movi	r3,1
   122f8:	10c00415 	stw	r3,16(r2)
   122fc:	00c00244 	movi	r3,9
   12300:	1cc0210e 	bge	r3,r19,12388 <__s2b+0xf8>
   12304:	a0eb883a 	add	r21,r20,r3
   12308:	a821883a 	mov	r16,r21
   1230c:	a4e9883a 	add	r20,r20,r19
   12310:	81c00007 	ldb	r7,0(r16)
   12314:	8809883a 	mov	r4,r17
   12318:	84000044 	addi	r16,r16,1
   1231c:	100b883a 	mov	r5,r2
   12320:	01800284 	movi	r6,10
   12324:	39fff404 	addi	r7,r7,-48
   12328:	00121600 	call	12160 <__multadd>
   1232c:	853ff81e 	bne	r16,r20,12310 <__s2b+0x80>
   12330:	ace1883a 	add	r16,r21,r19
   12334:	843ffe04 	addi	r16,r16,-8
   12338:	9c800a0e 	bge	r19,r18,12364 <__s2b+0xd4>
   1233c:	94e5c83a 	sub	r18,r18,r19
   12340:	84a5883a 	add	r18,r16,r18
   12344:	81c00007 	ldb	r7,0(r16)
   12348:	8809883a 	mov	r4,r17
   1234c:	84000044 	addi	r16,r16,1
   12350:	100b883a 	mov	r5,r2
   12354:	01800284 	movi	r6,10
   12358:	39fff404 	addi	r7,r7,-48
   1235c:	00121600 	call	12160 <__multadd>
   12360:	84bff81e 	bne	r16,r18,12344 <__s2b+0xb4>
   12364:	dfc00617 	ldw	ra,24(sp)
   12368:	dd400517 	ldw	r21,20(sp)
   1236c:	dd000417 	ldw	r20,16(sp)
   12370:	dcc00317 	ldw	r19,12(sp)
   12374:	dc800217 	ldw	r18,8(sp)
   12378:	dc400117 	ldw	r17,4(sp)
   1237c:	dc000017 	ldw	r16,0(sp)
   12380:	dec00704 	addi	sp,sp,28
   12384:	f800283a 	ret
   12388:	a4000284 	addi	r16,r20,10
   1238c:	1827883a 	mov	r19,r3
   12390:	003fe906 	br	12338 <__s2b+0xa8>

00012394 <__hi0bits>:
   12394:	20bfffec 	andhi	r2,r4,65535
   12398:	1000141e 	bne	r2,zero,123ec <__hi0bits+0x58>
   1239c:	2008943a 	slli	r4,r4,16
   123a0:	00800404 	movi	r2,16
   123a4:	20ffc02c 	andhi	r3,r4,65280
   123a8:	1800021e 	bne	r3,zero,123b4 <__hi0bits+0x20>
   123ac:	2008923a 	slli	r4,r4,8
   123b0:	10800204 	addi	r2,r2,8
   123b4:	20fc002c 	andhi	r3,r4,61440
   123b8:	1800021e 	bne	r3,zero,123c4 <__hi0bits+0x30>
   123bc:	2008913a 	slli	r4,r4,4
   123c0:	10800104 	addi	r2,r2,4
   123c4:	20f0002c 	andhi	r3,r4,49152
   123c8:	1800031e 	bne	r3,zero,123d8 <__hi0bits+0x44>
   123cc:	2109883a 	add	r4,r4,r4
   123d0:	10800084 	addi	r2,r2,2
   123d4:	2109883a 	add	r4,r4,r4
   123d8:	20000316 	blt	r4,zero,123e8 <__hi0bits+0x54>
   123dc:	2110002c 	andhi	r4,r4,16384
   123e0:	2000041e 	bne	r4,zero,123f4 <__hi0bits+0x60>
   123e4:	00800804 	movi	r2,32
   123e8:	f800283a 	ret
   123ec:	0005883a 	mov	r2,zero
   123f0:	003fec06 	br	123a4 <__hi0bits+0x10>
   123f4:	10800044 	addi	r2,r2,1
   123f8:	f800283a 	ret

000123fc <__lo0bits>:
   123fc:	20c00017 	ldw	r3,0(r4)
   12400:	188001cc 	andi	r2,r3,7
   12404:	10000826 	beq	r2,zero,12428 <__lo0bits+0x2c>
   12408:	1880004c 	andi	r2,r3,1
   1240c:	1000211e 	bne	r2,zero,12494 <__lo0bits+0x98>
   12410:	1880008c 	andi	r2,r3,2
   12414:	1000211e 	bne	r2,zero,1249c <__lo0bits+0xa0>
   12418:	1806d0ba 	srli	r3,r3,2
   1241c:	00800084 	movi	r2,2
   12420:	20c00015 	stw	r3,0(r4)
   12424:	f800283a 	ret
   12428:	18bfffcc 	andi	r2,r3,65535
   1242c:	10001326 	beq	r2,zero,1247c <__lo0bits+0x80>
   12430:	0005883a 	mov	r2,zero
   12434:	19403fcc 	andi	r5,r3,255
   12438:	2800021e 	bne	r5,zero,12444 <__lo0bits+0x48>
   1243c:	1806d23a 	srli	r3,r3,8
   12440:	10800204 	addi	r2,r2,8
   12444:	194003cc 	andi	r5,r3,15
   12448:	2800021e 	bne	r5,zero,12454 <__lo0bits+0x58>
   1244c:	1806d13a 	srli	r3,r3,4
   12450:	10800104 	addi	r2,r2,4
   12454:	194000cc 	andi	r5,r3,3
   12458:	2800021e 	bne	r5,zero,12464 <__lo0bits+0x68>
   1245c:	1806d0ba 	srli	r3,r3,2
   12460:	10800084 	addi	r2,r2,2
   12464:	1940004c 	andi	r5,r3,1
   12468:	2800081e 	bne	r5,zero,1248c <__lo0bits+0x90>
   1246c:	1806d07a 	srli	r3,r3,1
   12470:	1800051e 	bne	r3,zero,12488 <__lo0bits+0x8c>
   12474:	00800804 	movi	r2,32
   12478:	f800283a 	ret
   1247c:	1806d43a 	srli	r3,r3,16
   12480:	00800404 	movi	r2,16
   12484:	003feb06 	br	12434 <__lo0bits+0x38>
   12488:	10800044 	addi	r2,r2,1
   1248c:	20c00015 	stw	r3,0(r4)
   12490:	f800283a 	ret
   12494:	0005883a 	mov	r2,zero
   12498:	f800283a 	ret
   1249c:	1806d07a 	srli	r3,r3,1
   124a0:	00800044 	movi	r2,1
   124a4:	20c00015 	stw	r3,0(r4)
   124a8:	f800283a 	ret

000124ac <__i2b>:
   124ac:	defffd04 	addi	sp,sp,-12
   124b0:	dc000015 	stw	r16,0(sp)
   124b4:	04000044 	movi	r16,1
   124b8:	dc400115 	stw	r17,4(sp)
   124bc:	2823883a 	mov	r17,r5
   124c0:	800b883a 	mov	r5,r16
   124c4:	dfc00215 	stw	ra,8(sp)
   124c8:	001200c0 	call	1200c <_Balloc>
   124cc:	14400515 	stw	r17,20(r2)
   124d0:	14000415 	stw	r16,16(r2)
   124d4:	dfc00217 	ldw	ra,8(sp)
   124d8:	dc400117 	ldw	r17,4(sp)
   124dc:	dc000017 	ldw	r16,0(sp)
   124e0:	dec00304 	addi	sp,sp,12
   124e4:	f800283a 	ret

000124e8 <__multiply>:
   124e8:	defff004 	addi	sp,sp,-64
   124ec:	dc800815 	stw	r18,32(sp)
   124f0:	dc400715 	stw	r17,28(sp)
   124f4:	34800417 	ldw	r18,16(r6)
   124f8:	2c400417 	ldw	r17,16(r5)
   124fc:	ddc00d15 	stw	r23,52(sp)
   12500:	dc000615 	stw	r16,24(sp)
   12504:	dfc00f15 	stw	ra,60(sp)
   12508:	df000e15 	stw	fp,56(sp)
   1250c:	dd800c15 	stw	r22,48(sp)
   12510:	dd400b15 	stw	r21,44(sp)
   12514:	dd000a15 	stw	r20,40(sp)
   12518:	dcc00915 	stw	r19,36(sp)
   1251c:	2821883a 	mov	r16,r5
   12520:	302f883a 	mov	r23,r6
   12524:	8c80050e 	bge	r17,r18,1253c <__multiply+0x54>
   12528:	8807883a 	mov	r3,r17
   1252c:	3021883a 	mov	r16,r6
   12530:	9023883a 	mov	r17,r18
   12534:	282f883a 	mov	r23,r5
   12538:	1825883a 	mov	r18,r3
   1253c:	80800217 	ldw	r2,8(r16)
   12540:	8c87883a 	add	r3,r17,r18
   12544:	d8c00115 	stw	r3,4(sp)
   12548:	81400117 	ldw	r5,4(r16)
   1254c:	10c0010e 	bge	r2,r3,12554 <__multiply+0x6c>
   12550:	29400044 	addi	r5,r5,1
   12554:	001200c0 	call	1200c <_Balloc>
   12558:	d8c00117 	ldw	r3,4(sp)
   1255c:	d8800515 	stw	r2,20(sp)
   12560:	14c00504 	addi	r19,r2,20
   12564:	1d400144 	addi	r21,r3,5
   12568:	ad6b883a 	add	r21,r21,r21
   1256c:	ad6b883a 	add	r21,r21,r21
   12570:	156b883a 	add	r21,r2,r21
   12574:	dd400215 	stw	r21,8(sp)
   12578:	9805883a 	mov	r2,r19
   1257c:	9d40042e 	bgeu	r19,r21,12590 <__multiply+0xa8>
   12580:	d8c00217 	ldw	r3,8(sp)
   12584:	10000015 	stw	zero,0(r2)
   12588:	10800104 	addi	r2,r2,4
   1258c:	10fffc36 	bltu	r2,r3,12580 <__multiply+0x98>
   12590:	94800144 	addi	r18,r18,5
   12594:	94a5883a 	add	r18,r18,r18
   12598:	94ad883a 	add	r22,r18,r18
   1259c:	8c400144 	addi	r17,r17,5
   125a0:	8c63883a 	add	r17,r17,r17
   125a4:	bdad883a 	add	r22,r23,r22
   125a8:	80c00504 	addi	r3,r16,20
   125ac:	8c63883a 	add	r17,r17,r17
   125b0:	bc800504 	addi	r18,r23,20
   125b4:	dd800315 	stw	r22,12(sp)
   125b8:	d8c00415 	stw	r3,16(sp)
   125bc:	dcc00015 	stw	r19,0(sp)
   125c0:	8463883a 	add	r17,r16,r17
   125c4:	9580412e 	bgeu	r18,r22,126cc <__multiply+0x1e4>
   125c8:	90800017 	ldw	r2,0(r18)
   125cc:	173fffcc 	andi	fp,r2,65535
   125d0:	e0001a26 	beq	fp,zero,1263c <__multiply+0x154>
   125d4:	dd000017 	ldw	r20,0(sp)
   125d8:	dd800417 	ldw	r22,16(sp)
   125dc:	002b883a 	mov	r21,zero
   125e0:	b4c00017 	ldw	r19,0(r22)
   125e4:	a4000017 	ldw	r16,0(r20)
   125e8:	e00b883a 	mov	r5,fp
   125ec:	993fffcc 	andi	r4,r19,65535
   125f0:	00112540 	call	11254 <__mulsi3>
   125f4:	9808d43a 	srli	r4,r19,16
   125f8:	817fffcc 	andi	r5,r16,65535
   125fc:	1145883a 	add	r2,r2,r5
   12600:	e00b883a 	mov	r5,fp
   12604:	1567883a 	add	r19,r2,r21
   12608:	8020d43a 	srli	r16,r16,16
   1260c:	00112540 	call	11254 <__mulsi3>
   12610:	9808d43a 	srli	r4,r19,16
   12614:	1405883a 	add	r2,r2,r16
   12618:	a4c0000d 	sth	r19,0(r20)
   1261c:	110f883a 	add	r7,r2,r4
   12620:	a1c0008d 	sth	r7,2(r20)
   12624:	b5800104 	addi	r22,r22,4
   12628:	382ad43a 	srli	r21,r7,16
   1262c:	a5000104 	addi	r20,r20,4
   12630:	b47feb36 	bltu	r22,r17,125e0 <__multiply+0xf8>
   12634:	a5400015 	stw	r21,0(r20)
   12638:	90800017 	ldw	r2,0(r18)
   1263c:	1038d43a 	srli	fp,r2,16
   12640:	e0001c26 	beq	fp,zero,126b4 <__multiply+0x1cc>
   12644:	d8c00017 	ldw	r3,0(sp)
   12648:	dd000417 	ldw	r20,16(sp)
   1264c:	002b883a 	mov	r21,zero
   12650:	1d800017 	ldw	r22,0(r3)
   12654:	182f883a 	mov	r23,r3
   12658:	b021883a 	mov	r16,r22
   1265c:	a4c00017 	ldw	r19,0(r20)
   12660:	8020d43a 	srli	r16,r16,16
   12664:	e00b883a 	mov	r5,fp
   12668:	993fffcc 	andi	r4,r19,65535
   1266c:	00112540 	call	11254 <__mulsi3>
   12670:	1405883a 	add	r2,r2,r16
   12674:	9808d43a 	srli	r4,r19,16
   12678:	156b883a 	add	r21,r2,r21
   1267c:	bdc00104 	addi	r23,r23,4
   12680:	bdbfff0d 	sth	r22,-4(r23)
   12684:	bd7fff8d 	sth	r21,-2(r23)
   12688:	bc000017 	ldw	r16,0(r23)
   1268c:	e00b883a 	mov	r5,fp
   12690:	00112540 	call	11254 <__mulsi3>
   12694:	a80ed43a 	srli	r7,r21,16
   12698:	813fffcc 	andi	r4,r16,65535
   1269c:	2085883a 	add	r2,r4,r2
   126a0:	11ed883a 	add	r22,r2,r7
   126a4:	a5000104 	addi	r20,r20,4
   126a8:	b02ad43a 	srli	r21,r22,16
   126ac:	a47feb36 	bltu	r20,r17,1265c <__multiply+0x174>
   126b0:	bd800015 	stw	r22,0(r23)
   126b4:	d8c00017 	ldw	r3,0(sp)
   126b8:	94800104 	addi	r18,r18,4
   126bc:	18c00104 	addi	r3,r3,4
   126c0:	d8c00015 	stw	r3,0(sp)
   126c4:	d8c00317 	ldw	r3,12(sp)
   126c8:	90ffbf36 	bltu	r18,r3,125c8 <__multiply+0xe0>
   126cc:	d8c00117 	ldw	r3,4(sp)
   126d0:	00c00c0e 	bge	zero,r3,12704 <__multiply+0x21c>
   126d4:	d8c00217 	ldw	r3,8(sp)
   126d8:	18bfff17 	ldw	r2,-4(r3)
   126dc:	1d7fff04 	addi	r21,r3,-4
   126e0:	10000326 	beq	r2,zero,126f0 <__multiply+0x208>
   126e4:	00000706 	br	12704 <__multiply+0x21c>
   126e8:	a8800017 	ldw	r2,0(r21)
   126ec:	1000051e 	bne	r2,zero,12704 <__multiply+0x21c>
   126f0:	d8c00117 	ldw	r3,4(sp)
   126f4:	ad7fff04 	addi	r21,r21,-4
   126f8:	18ffffc4 	addi	r3,r3,-1
   126fc:	d8c00115 	stw	r3,4(sp)
   12700:	183ff91e 	bne	r3,zero,126e8 <__multiply+0x200>
   12704:	d8800517 	ldw	r2,20(sp)
   12708:	d8c00117 	ldw	r3,4(sp)
   1270c:	10c00415 	stw	r3,16(r2)
   12710:	dfc00f17 	ldw	ra,60(sp)
   12714:	df000e17 	ldw	fp,56(sp)
   12718:	ddc00d17 	ldw	r23,52(sp)
   1271c:	dd800c17 	ldw	r22,48(sp)
   12720:	dd400b17 	ldw	r21,44(sp)
   12724:	dd000a17 	ldw	r20,40(sp)
   12728:	dcc00917 	ldw	r19,36(sp)
   1272c:	dc800817 	ldw	r18,32(sp)
   12730:	dc400717 	ldw	r17,28(sp)
   12734:	dc000617 	ldw	r16,24(sp)
   12738:	dec01004 	addi	sp,sp,64
   1273c:	f800283a 	ret

00012740 <__pow5mult>:
   12740:	defffa04 	addi	sp,sp,-24
   12744:	dcc00315 	stw	r19,12(sp)
   12748:	dc800215 	stw	r18,8(sp)
   1274c:	dc000015 	stw	r16,0(sp)
   12750:	dfc00515 	stw	ra,20(sp)
   12754:	dd000415 	stw	r20,16(sp)
   12758:	dc400115 	stw	r17,4(sp)
   1275c:	308000cc 	andi	r2,r6,3
   12760:	3021883a 	mov	r16,r6
   12764:	2027883a 	mov	r19,r4
   12768:	2825883a 	mov	r18,r5
   1276c:	10002b1e 	bne	r2,zero,1281c <__pow5mult+0xdc>
   12770:	8021d0ba 	srai	r16,r16,2
   12774:	80001826 	beq	r16,zero,127d8 <__pow5mult+0x98>
   12778:	9d000417 	ldw	r20,16(r19)
   1277c:	a0003226 	beq	r20,zero,12848 <__pow5mult+0x108>
   12780:	a4400217 	ldw	r17,8(r20)
   12784:	88003826 	beq	r17,zero,12868 <__pow5mult+0x128>
   12788:	80c0004c 	andi	r3,r16,1
   1278c:	8021d07a 	srai	r16,r16,1
   12790:	1800071e 	bne	r3,zero,127b0 <__pow5mult+0x70>
   12794:	80001026 	beq	r16,zero,127d8 <__pow5mult+0x98>
   12798:	88c00017 	ldw	r3,0(r17)
   1279c:	18001726 	beq	r3,zero,127fc <__pow5mult+0xbc>
   127a0:	1823883a 	mov	r17,r3
   127a4:	80c0004c 	andi	r3,r16,1
   127a8:	8021d07a 	srai	r16,r16,1
   127ac:	183ff926 	beq	r3,zero,12794 <__pow5mult+0x54>
   127b0:	900b883a 	mov	r5,r18
   127b4:	880d883a 	mov	r6,r17
   127b8:	9809883a 	mov	r4,r19
   127bc:	00124e80 	call	124e8 <__multiply>
   127c0:	1029883a 	mov	r20,r2
   127c4:	900b883a 	mov	r5,r18
   127c8:	9809883a 	mov	r4,r19
   127cc:	00120e80 	call	120e8 <_Bfree>
   127d0:	a025883a 	mov	r18,r20
   127d4:	803ff01e 	bne	r16,zero,12798 <__pow5mult+0x58>
   127d8:	9005883a 	mov	r2,r18
   127dc:	dfc00517 	ldw	ra,20(sp)
   127e0:	dd000417 	ldw	r20,16(sp)
   127e4:	dcc00317 	ldw	r19,12(sp)
   127e8:	dc800217 	ldw	r18,8(sp)
   127ec:	dc400117 	ldw	r17,4(sp)
   127f0:	dc000017 	ldw	r16,0(sp)
   127f4:	dec00604 	addi	sp,sp,24
   127f8:	f800283a 	ret
   127fc:	880b883a 	mov	r5,r17
   12800:	880d883a 	mov	r6,r17
   12804:	9809883a 	mov	r4,r19
   12808:	00124e80 	call	124e8 <__multiply>
   1280c:	88800015 	stw	r2,0(r17)
   12810:	10000015 	stw	zero,0(r2)
   12814:	1023883a 	mov	r17,r2
   12818:	003fdb06 	br	12788 <__pow5mult+0x48>
   1281c:	10bfffc4 	addi	r2,r2,-1
   12820:	1085883a 	add	r2,r2,r2
   12824:	00c000b4 	movhi	r3,2
   12828:	18e27d04 	addi	r3,r3,-30220
   1282c:	1085883a 	add	r2,r2,r2
   12830:	1885883a 	add	r2,r3,r2
   12834:	11800017 	ldw	r6,0(r2)
   12838:	000f883a 	mov	r7,zero
   1283c:	00121600 	call	12160 <__multadd>
   12840:	1025883a 	mov	r18,r2
   12844:	003fca06 	br	12770 <__pow5mult+0x30>
   12848:	01000404 	movi	r4,16
   1284c:	00154400 	call	15440 <malloc>
   12850:	98800415 	stw	r2,16(r19)
   12854:	1029883a 	mov	r20,r2
   12858:	10000115 	stw	zero,4(r2)
   1285c:	10000215 	stw	zero,8(r2)
   12860:	10000015 	stw	zero,0(r2)
   12864:	10000315 	stw	zero,12(r2)
   12868:	9809883a 	mov	r4,r19
   1286c:	01409c44 	movi	r5,625
   12870:	00124ac0 	call	124ac <__i2b>
   12874:	a0800215 	stw	r2,8(r20)
   12878:	1023883a 	mov	r17,r2
   1287c:	10000015 	stw	zero,0(r2)
   12880:	003fc106 	br	12788 <__pow5mult+0x48>

00012884 <__lshift>:
   12884:	defff804 	addi	sp,sp,-32
   12888:	dd400615 	stw	r21,24(sp)
   1288c:	dc400215 	stw	r17,8(sp)
   12890:	2d400417 	ldw	r21,16(r5)
   12894:	3023d17a 	srai	r17,r6,5
   12898:	28800217 	ldw	r2,8(r5)
   1289c:	dd000515 	stw	r20,20(sp)
   128a0:	8d6b883a 	add	r21,r17,r21
   128a4:	dcc00415 	stw	r19,16(sp)
   128a8:	dc800315 	stw	r18,12(sp)
   128ac:	dc000115 	stw	r16,4(sp)
   128b0:	dfc00715 	stw	ra,28(sp)
   128b4:	ac000044 	addi	r16,r21,1
   128b8:	2825883a 	mov	r18,r5
   128bc:	3029883a 	mov	r20,r6
   128c0:	2027883a 	mov	r19,r4
   128c4:	29400117 	ldw	r5,4(r5)
   128c8:	1400030e 	bge	r2,r16,128d8 <__lshift+0x54>
   128cc:	1085883a 	add	r2,r2,r2
   128d0:	29400044 	addi	r5,r5,1
   128d4:	143ffd16 	blt	r2,r16,128cc <__lshift+0x48>
   128d8:	9809883a 	mov	r4,r19
   128dc:	001200c0 	call	1200c <_Balloc>
   128e0:	10c00504 	addi	r3,r2,20
   128e4:	0440090e 	bge	zero,r17,1290c <__lshift+0x88>
   128e8:	000f883a 	mov	r7,zero
   128ec:	18000015 	stw	zero,0(r3)
   128f0:	39c00044 	addi	r7,r7,1
   128f4:	18c00104 	addi	r3,r3,4
   128f8:	3c7ffc1e 	bne	r7,r17,128ec <__lshift+0x68>
   128fc:	38c00144 	addi	r3,r7,5
   12900:	18c7883a 	add	r3,r3,r3
   12904:	18c7883a 	add	r3,r3,r3
   12908:	10c7883a 	add	r3,r2,r3
   1290c:	92400417 	ldw	r9,16(r18)
   12910:	a18007cc 	andi	r6,r20,31
   12914:	91c00504 	addi	r7,r18,20
   12918:	4a400144 	addi	r9,r9,5
   1291c:	4a53883a 	add	r9,r9,r9
   12920:	4a53883a 	add	r9,r9,r9
   12924:	9253883a 	add	r9,r18,r9
   12928:	30001f26 	beq	r6,zero,129a8 <__lshift+0x124>
   1292c:	02800804 	movi	r10,32
   12930:	5195c83a 	sub	r10,r10,r6
   12934:	0011883a 	mov	r8,zero
   12938:	39400017 	ldw	r5,0(r7)
   1293c:	18c00104 	addi	r3,r3,4
   12940:	39c00104 	addi	r7,r7,4
   12944:	298a983a 	sll	r5,r5,r6
   12948:	4150b03a 	or	r8,r8,r5
   1294c:	1a3fff15 	stw	r8,-4(r3)
   12950:	3a3fff17 	ldw	r8,-4(r7)
   12954:	4290d83a 	srl	r8,r8,r10
   12958:	3a7ff736 	bltu	r7,r9,12938 <__lshift+0xb4>
   1295c:	1a000015 	stw	r8,0(r3)
   12960:	40000126 	beq	r8,zero,12968 <__lshift+0xe4>
   12964:	ac000084 	addi	r16,r21,2
   12968:	843fffc4 	addi	r16,r16,-1
   1296c:	14000415 	stw	r16,16(r2)
   12970:	9809883a 	mov	r4,r19
   12974:	900b883a 	mov	r5,r18
   12978:	d8800015 	stw	r2,0(sp)
   1297c:	00120e80 	call	120e8 <_Bfree>
   12980:	d8800017 	ldw	r2,0(sp)
   12984:	dfc00717 	ldw	ra,28(sp)
   12988:	dd400617 	ldw	r21,24(sp)
   1298c:	dd000517 	ldw	r20,20(sp)
   12990:	dcc00417 	ldw	r19,16(sp)
   12994:	dc800317 	ldw	r18,12(sp)
   12998:	dc400217 	ldw	r17,8(sp)
   1299c:	dc000117 	ldw	r16,4(sp)
   129a0:	dec00804 	addi	sp,sp,32
   129a4:	f800283a 	ret
   129a8:	39400017 	ldw	r5,0(r7)
   129ac:	18c00104 	addi	r3,r3,4
   129b0:	39c00104 	addi	r7,r7,4
   129b4:	197fff15 	stw	r5,-4(r3)
   129b8:	3a7feb2e 	bgeu	r7,r9,12968 <__lshift+0xe4>
   129bc:	39400017 	ldw	r5,0(r7)
   129c0:	18c00104 	addi	r3,r3,4
   129c4:	39c00104 	addi	r7,r7,4
   129c8:	197fff15 	stw	r5,-4(r3)
   129cc:	3a7ff636 	bltu	r7,r9,129a8 <__lshift+0x124>
   129d0:	003fe506 	br	12968 <__lshift+0xe4>

000129d4 <__mcmp>:
   129d4:	20800417 	ldw	r2,16(r4)
   129d8:	28c00417 	ldw	r3,16(r5)
   129dc:	10c5c83a 	sub	r2,r2,r3
   129e0:	10000f1e 	bne	r2,zero,12a20 <__mcmp+0x4c>
   129e4:	18c00144 	addi	r3,r3,5
   129e8:	18c7883a 	add	r3,r3,r3
   129ec:	18c7883a 	add	r3,r3,r3
   129f0:	21c00504 	addi	r7,r4,20
   129f4:	28cb883a 	add	r5,r5,r3
   129f8:	20c9883a 	add	r4,r4,r3
   129fc:	213fff04 	addi	r4,r4,-4
   12a00:	297fff04 	addi	r5,r5,-4
   12a04:	21800017 	ldw	r6,0(r4)
   12a08:	28c00017 	ldw	r3,0(r5)
   12a0c:	30c0021e 	bne	r6,r3,12a18 <__mcmp+0x44>
   12a10:	393ffa36 	bltu	r7,r4,129fc <__mcmp+0x28>
   12a14:	f800283a 	ret
   12a18:	30c00236 	bltu	r6,r3,12a24 <__mcmp+0x50>
   12a1c:	00800044 	movi	r2,1
   12a20:	f800283a 	ret
   12a24:	00bfffc4 	movi	r2,-1
   12a28:	f800283a 	ret

00012a2c <__mdiff>:
   12a2c:	defffb04 	addi	sp,sp,-20
   12a30:	dc000015 	stw	r16,0(sp)
   12a34:	2821883a 	mov	r16,r5
   12a38:	dc800215 	stw	r18,8(sp)
   12a3c:	300b883a 	mov	r5,r6
   12a40:	2025883a 	mov	r18,r4
   12a44:	8009883a 	mov	r4,r16
   12a48:	dc400115 	stw	r17,4(sp)
   12a4c:	dfc00415 	stw	ra,16(sp)
   12a50:	dcc00315 	stw	r19,12(sp)
   12a54:	3023883a 	mov	r17,r6
   12a58:	00129d40 	call	129d4 <__mcmp>
   12a5c:	10005026 	beq	r2,zero,12ba0 <__mdiff+0x174>
   12a60:	10004a16 	blt	r2,zero,12b8c <__mdiff+0x160>
   12a64:	0027883a 	mov	r19,zero
   12a68:	81400117 	ldw	r5,4(r16)
   12a6c:	9009883a 	mov	r4,r18
   12a70:	001200c0 	call	1200c <_Balloc>
   12a74:	82400417 	ldw	r9,16(r16)
   12a78:	89800417 	ldw	r6,16(r17)
   12a7c:	14c00315 	stw	r19,12(r2)
   12a80:	4b800144 	addi	r14,r9,5
   12a84:	31800144 	addi	r6,r6,5
   12a88:	739d883a 	add	r14,r14,r14
   12a8c:	318d883a 	add	r6,r6,r6
   12a90:	739d883a 	add	r14,r14,r14
   12a94:	318d883a 	add	r6,r6,r6
   12a98:	81c00504 	addi	r7,r16,20
   12a9c:	839d883a 	add	r14,r16,r14
   12aa0:	8a000504 	addi	r8,r17,20
   12aa4:	898d883a 	add	r6,r17,r6
   12aa8:	10c00504 	addi	r3,r2,20
   12aac:	0009883a 	mov	r4,zero
   12ab0:	3b000017 	ldw	r12,0(r7)
   12ab4:	42c00017 	ldw	r11,0(r8)
   12ab8:	42000104 	addi	r8,r8,4
   12abc:	62bfffcc 	andi	r10,r12,65535
   12ac0:	5b7fffcc 	andi	r13,r11,65535
   12ac4:	5109883a 	add	r4,r10,r4
   12ac8:	2355c83a 	sub	r10,r4,r13
   12acc:	5816d43a 	srli	r11,r11,16
   12ad0:	6008d43a 	srli	r4,r12,16
   12ad4:	501bd43a 	srai	r13,r10,16
   12ad8:	1a80000d 	sth	r10,0(r3)
   12adc:	22c9c83a 	sub	r4,r4,r11
   12ae0:	2349883a 	add	r4,r4,r13
   12ae4:	1900008d 	sth	r4,2(r3)
   12ae8:	39c00104 	addi	r7,r7,4
   12aec:	2009d43a 	srai	r4,r4,16
   12af0:	18c00104 	addi	r3,r3,4
   12af4:	41bfee36 	bltu	r8,r6,12ab0 <__mdiff+0x84>
   12af8:	180b883a 	mov	r5,r3
   12afc:	3815883a 	mov	r10,r7
   12b00:	3b80132e 	bgeu	r7,r14,12b50 <__mdiff+0x124>
   12b04:	3a000017 	ldw	r8,0(r7)
   12b08:	18c00104 	addi	r3,r3,4
   12b0c:	39c00104 	addi	r7,r7,4
   12b10:	41bfffcc 	andi	r6,r8,65535
   12b14:	310d883a 	add	r6,r6,r4
   12b18:	3009d43a 	srai	r4,r6,16
   12b1c:	4010d43a 	srli	r8,r8,16
   12b20:	19bfff0d 	sth	r6,-4(r3)
   12b24:	2209883a 	add	r4,r4,r8
   12b28:	193fff8d 	sth	r4,-2(r3)
   12b2c:	2009d43a 	srai	r4,r4,16
   12b30:	3bbff436 	bltu	r7,r14,12b04 <__mdiff+0xd8>
   12b34:	0286303a 	nor	r3,zero,r10
   12b38:	1b87883a 	add	r3,r3,r14
   12b3c:	1806d0ba 	srli	r3,r3,2
   12b40:	18c00044 	addi	r3,r3,1
   12b44:	18c7883a 	add	r3,r3,r3
   12b48:	18c7883a 	add	r3,r3,r3
   12b4c:	28c7883a 	add	r3,r5,r3
   12b50:	193fff17 	ldw	r4,-4(r3)
   12b54:	18ffff04 	addi	r3,r3,-4
   12b58:	2000041e 	bne	r4,zero,12b6c <__mdiff+0x140>
   12b5c:	18ffff04 	addi	r3,r3,-4
   12b60:	19000017 	ldw	r4,0(r3)
   12b64:	4a7fffc4 	addi	r9,r9,-1
   12b68:	203ffc26 	beq	r4,zero,12b5c <__mdiff+0x130>
   12b6c:	12400415 	stw	r9,16(r2)
   12b70:	dfc00417 	ldw	ra,16(sp)
   12b74:	dcc00317 	ldw	r19,12(sp)
   12b78:	dc800217 	ldw	r18,8(sp)
   12b7c:	dc400117 	ldw	r17,4(sp)
   12b80:	dc000017 	ldw	r16,0(sp)
   12b84:	dec00504 	addi	sp,sp,20
   12b88:	f800283a 	ret
   12b8c:	8005883a 	mov	r2,r16
   12b90:	04c00044 	movi	r19,1
   12b94:	8821883a 	mov	r16,r17
   12b98:	1023883a 	mov	r17,r2
   12b9c:	003fb206 	br	12a68 <__mdiff+0x3c>
   12ba0:	9009883a 	mov	r4,r18
   12ba4:	000b883a 	mov	r5,zero
   12ba8:	001200c0 	call	1200c <_Balloc>
   12bac:	00c00044 	movi	r3,1
   12bb0:	10c00415 	stw	r3,16(r2)
   12bb4:	10000515 	stw	zero,20(r2)
   12bb8:	dfc00417 	ldw	ra,16(sp)
   12bbc:	dcc00317 	ldw	r19,12(sp)
   12bc0:	dc800217 	ldw	r18,8(sp)
   12bc4:	dc400117 	ldw	r17,4(sp)
   12bc8:	dc000017 	ldw	r16,0(sp)
   12bcc:	dec00504 	addi	sp,sp,20
   12bd0:	f800283a 	ret

00012bd4 <__ulp>:
   12bd4:	295ffc2c 	andhi	r5,r5,32752
   12bd8:	00bf3034 	movhi	r2,64704
   12bdc:	2887883a 	add	r3,r5,r2
   12be0:	00c0020e 	bge	zero,r3,12bec <__ulp+0x18>
   12be4:	0005883a 	mov	r2,zero
   12be8:	f800283a 	ret
   12bec:	00c7c83a 	sub	r3,zero,r3
   12bf0:	1805d53a 	srai	r2,r3,20
   12bf4:	00c004c4 	movi	r3,19
   12bf8:	18800a0e 	bge	r3,r2,12c24 <__ulp+0x50>
   12bfc:	01000c84 	movi	r4,50
   12c00:	0007883a 	mov	r3,zero
   12c04:	20800516 	blt	r4,r2,12c1c <__ulp+0x48>
   12c08:	01000cc4 	movi	r4,51
   12c0c:	2085c83a 	sub	r2,r4,r2
   12c10:	01000044 	movi	r4,1
   12c14:	2084983a 	sll	r2,r4,r2
   12c18:	f800283a 	ret
   12c1c:	00800044 	movi	r2,1
   12c20:	f800283a 	ret
   12c24:	00c00234 	movhi	r3,8
   12c28:	1887d83a 	sra	r3,r3,r2
   12c2c:	0005883a 	mov	r2,zero
   12c30:	f800283a 	ret

00012c34 <__b2d>:
   12c34:	defffa04 	addi	sp,sp,-24
   12c38:	dc000015 	stw	r16,0(sp)
   12c3c:	24000417 	ldw	r16,16(r4)
   12c40:	dc400115 	stw	r17,4(sp)
   12c44:	dcc00315 	stw	r19,12(sp)
   12c48:	84000144 	addi	r16,r16,5
   12c4c:	8421883a 	add	r16,r16,r16
   12c50:	8421883a 	add	r16,r16,r16
   12c54:	2421883a 	add	r16,r4,r16
   12c58:	847fff17 	ldw	r17,-4(r16)
   12c5c:	24c00504 	addi	r19,r4,20
   12c60:	dd000415 	stw	r20,16(sp)
   12c64:	8809883a 	mov	r4,r17
   12c68:	dc800215 	stw	r18,8(sp)
   12c6c:	2829883a 	mov	r20,r5
   12c70:	dfc00515 	stw	ra,20(sp)
   12c74:	00123940 	call	12394 <__hi0bits>
   12c78:	00c00804 	movi	r3,32
   12c7c:	1887c83a 	sub	r3,r3,r2
   12c80:	a0c00015 	stw	r3,0(r20)
   12c84:	00c00284 	movi	r3,10
   12c88:	84bfff04 	addi	r18,r16,-4
   12c8c:	18801216 	blt	r3,r2,12cd8 <__b2d+0xa4>
   12c90:	010002c4 	movi	r4,11
   12c94:	2089c83a 	sub	r4,r4,r2
   12c98:	8906d83a 	srl	r3,r17,r4
   12c9c:	18cffc34 	orhi	r3,r3,16368
   12ca0:	9c80322e 	bgeu	r19,r18,12d6c <__b2d+0x138>
   12ca4:	817ffe17 	ldw	r5,-8(r16)
   12ca8:	2908d83a 	srl	r4,r5,r4
   12cac:	10800544 	addi	r2,r2,21
   12cb0:	88a2983a 	sll	r17,r17,r2
   12cb4:	2444b03a 	or	r2,r4,r17
   12cb8:	dfc00517 	ldw	ra,20(sp)
   12cbc:	dd000417 	ldw	r20,16(sp)
   12cc0:	dcc00317 	ldw	r19,12(sp)
   12cc4:	dc800217 	ldw	r18,8(sp)
   12cc8:	dc400117 	ldw	r17,4(sp)
   12ccc:	dc000017 	ldw	r16,0(sp)
   12cd0:	dec00604 	addi	sp,sp,24
   12cd4:	f800283a 	ret
   12cd8:	9c801636 	bltu	r19,r18,12d34 <__b2d+0x100>
   12cdc:	113ffd44 	addi	r4,r2,-11
   12ce0:	000b883a 	mov	r5,zero
   12ce4:	20001726 	beq	r4,zero,12d44 <__b2d+0x110>
   12ce8:	00c00ac4 	movi	r3,43
   12cec:	1885c83a 	sub	r2,r3,r2
   12cf0:	8906983a 	sll	r3,r17,r4
   12cf4:	288cd83a 	srl	r6,r5,r2
   12cf8:	18cffc34 	orhi	r3,r3,16368
   12cfc:	1986b03a 	or	r3,r3,r6
   12d00:	9c801c2e 	bgeu	r19,r18,12d74 <__b2d+0x140>
   12d04:	91bfff17 	ldw	r6,-4(r18)
   12d08:	3084d83a 	srl	r2,r6,r2
   12d0c:	2908983a 	sll	r4,r5,r4
   12d10:	1104b03a 	or	r2,r2,r4
   12d14:	dfc00517 	ldw	ra,20(sp)
   12d18:	dd000417 	ldw	r20,16(sp)
   12d1c:	dcc00317 	ldw	r19,12(sp)
   12d20:	dc800217 	ldw	r18,8(sp)
   12d24:	dc400117 	ldw	r17,4(sp)
   12d28:	dc000017 	ldw	r16,0(sp)
   12d2c:	dec00604 	addi	sp,sp,24
   12d30:	f800283a 	ret
   12d34:	113ffd44 	addi	r4,r2,-11
   12d38:	84bffe04 	addi	r18,r16,-8
   12d3c:	817ffe17 	ldw	r5,-8(r16)
   12d40:	203fe91e 	bne	r4,zero,12ce8 <__b2d+0xb4>
   12d44:	88cffc34 	orhi	r3,r17,16368
   12d48:	2805883a 	mov	r2,r5
   12d4c:	dfc00517 	ldw	ra,20(sp)
   12d50:	dd000417 	ldw	r20,16(sp)
   12d54:	dcc00317 	ldw	r19,12(sp)
   12d58:	dc800217 	ldw	r18,8(sp)
   12d5c:	dc400117 	ldw	r17,4(sp)
   12d60:	dc000017 	ldw	r16,0(sp)
   12d64:	dec00604 	addi	sp,sp,24
   12d68:	f800283a 	ret
   12d6c:	0009883a 	mov	r4,zero
   12d70:	003fce06 	br	12cac <__b2d+0x78>
   12d74:	0005883a 	mov	r2,zero
   12d78:	003fe406 	br	12d0c <__b2d+0xd8>

00012d7c <__d2b>:
   12d7c:	defff804 	addi	sp,sp,-32
   12d80:	dc400315 	stw	r17,12(sp)
   12d84:	3023883a 	mov	r17,r6
   12d88:	dc800415 	stw	r18,16(sp)
   12d8c:	8824907a 	slli	r18,r17,1
   12d90:	dcc00515 	stw	r19,20(sp)
   12d94:	2827883a 	mov	r19,r5
   12d98:	9024d57a 	srli	r18,r18,21
   12d9c:	01400044 	movi	r5,1
   12da0:	dd000615 	stw	r20,24(sp)
   12da4:	dc000215 	stw	r16,8(sp)
   12da8:	dfc00715 	stw	ra,28(sp)
   12dac:	3829883a 	mov	r20,r7
   12db0:	001200c0 	call	1200c <_Balloc>
   12db4:	1021883a 	mov	r16,r2
   12db8:	00800434 	movhi	r2,16
   12dbc:	10bfffc4 	addi	r2,r2,-1
   12dc0:	88a2703a 	and	r17,r17,r2
   12dc4:	90000126 	beq	r18,zero,12dcc <__d2b+0x50>
   12dc8:	8c400434 	orhi	r17,r17,16
   12dcc:	dc400015 	stw	r17,0(sp)
   12dd0:	98002226 	beq	r19,zero,12e5c <__d2b+0xe0>
   12dd4:	d9000104 	addi	r4,sp,4
   12dd8:	dcc00115 	stw	r19,4(sp)
   12ddc:	00123fc0 	call	123fc <__lo0bits>
   12de0:	d8c00017 	ldw	r3,0(sp)
   12de4:	10002d1e 	bne	r2,zero,12e9c <__d2b+0x120>
   12de8:	d9000117 	ldw	r4,4(sp)
   12dec:	81000515 	stw	r4,20(r16)
   12df0:	1823003a 	cmpeq	r17,r3,zero
   12df4:	01000084 	movi	r4,2
   12df8:	2463c83a 	sub	r17,r4,r17
   12dfc:	80c00615 	stw	r3,24(r16)
   12e00:	84400415 	stw	r17,16(r16)
   12e04:	90001d1e 	bne	r18,zero,12e7c <__d2b+0x100>
   12e08:	88c00104 	addi	r3,r17,4
   12e0c:	18c7883a 	add	r3,r3,r3
   12e10:	18c7883a 	add	r3,r3,r3
   12e14:	80c7883a 	add	r3,r16,r3
   12e18:	19000017 	ldw	r4,0(r3)
   12e1c:	10bef384 	addi	r2,r2,-1074
   12e20:	a0800015 	stw	r2,0(r20)
   12e24:	00123940 	call	12394 <__hi0bits>
   12e28:	8822917a 	slli	r17,r17,5
   12e2c:	d8c00817 	ldw	r3,32(sp)
   12e30:	8885c83a 	sub	r2,r17,r2
   12e34:	18800015 	stw	r2,0(r3)
   12e38:	8005883a 	mov	r2,r16
   12e3c:	dfc00717 	ldw	ra,28(sp)
   12e40:	dd000617 	ldw	r20,24(sp)
   12e44:	dcc00517 	ldw	r19,20(sp)
   12e48:	dc800417 	ldw	r18,16(sp)
   12e4c:	dc400317 	ldw	r17,12(sp)
   12e50:	dc000217 	ldw	r16,8(sp)
   12e54:	dec00804 	addi	sp,sp,32
   12e58:	f800283a 	ret
   12e5c:	d809883a 	mov	r4,sp
   12e60:	00123fc0 	call	123fc <__lo0bits>
   12e64:	d8c00017 	ldw	r3,0(sp)
   12e68:	04400044 	movi	r17,1
   12e6c:	84400415 	stw	r17,16(r16)
   12e70:	80c00515 	stw	r3,20(r16)
   12e74:	10800804 	addi	r2,r2,32
   12e78:	903fe326 	beq	r18,zero,12e08 <__d2b+0x8c>
   12e7c:	00c00d44 	movi	r3,53
   12e80:	94bef344 	addi	r18,r18,-1075
   12e84:	90a5883a 	add	r18,r18,r2
   12e88:	1885c83a 	sub	r2,r3,r2
   12e8c:	d8c00817 	ldw	r3,32(sp)
   12e90:	a4800015 	stw	r18,0(r20)
   12e94:	18800015 	stw	r2,0(r3)
   12e98:	003fe706 	br	12e38 <__d2b+0xbc>
   12e9c:	01000804 	movi	r4,32
   12ea0:	2089c83a 	sub	r4,r4,r2
   12ea4:	1908983a 	sll	r4,r3,r4
   12ea8:	d9400117 	ldw	r5,4(sp)
   12eac:	1886d83a 	srl	r3,r3,r2
   12eb0:	2148b03a 	or	r4,r4,r5
   12eb4:	81000515 	stw	r4,20(r16)
   12eb8:	d8c00015 	stw	r3,0(sp)
   12ebc:	003fcc06 	br	12df0 <__d2b+0x74>

00012ec0 <__ratio>:
   12ec0:	defff904 	addi	sp,sp,-28
   12ec4:	dc400315 	stw	r17,12(sp)
   12ec8:	2823883a 	mov	r17,r5
   12ecc:	d9400104 	addi	r5,sp,4
   12ed0:	dfc00615 	stw	ra,24(sp)
   12ed4:	dcc00515 	stw	r19,20(sp)
   12ed8:	dc800415 	stw	r18,16(sp)
   12edc:	2027883a 	mov	r19,r4
   12ee0:	dc000215 	stw	r16,8(sp)
   12ee4:	0012c340 	call	12c34 <__b2d>
   12ee8:	8809883a 	mov	r4,r17
   12eec:	d80b883a 	mov	r5,sp
   12ef0:	1025883a 	mov	r18,r2
   12ef4:	1821883a 	mov	r16,r3
   12ef8:	0012c340 	call	12c34 <__b2d>
   12efc:	99400417 	ldw	r5,16(r19)
   12f00:	89000417 	ldw	r4,16(r17)
   12f04:	d9800117 	ldw	r6,4(sp)
   12f08:	2909c83a 	sub	r4,r5,r4
   12f0c:	d9400017 	ldw	r5,0(sp)
   12f10:	2008917a 	slli	r4,r4,5
   12f14:	314bc83a 	sub	r5,r6,r5
   12f18:	290b883a 	add	r5,r5,r4
   12f1c:	01400e0e 	bge	zero,r5,12f58 <__ratio+0x98>
   12f20:	280a953a 	slli	r5,r5,20
   12f24:	2c21883a 	add	r16,r5,r16
   12f28:	9009883a 	mov	r4,r18
   12f2c:	800b883a 	mov	r5,r16
   12f30:	100d883a 	mov	r6,r2
   12f34:	180f883a 	mov	r7,r3
   12f38:	00164240 	call	16424 <__divdf3>
   12f3c:	dfc00617 	ldw	ra,24(sp)
   12f40:	dcc00517 	ldw	r19,20(sp)
   12f44:	dc800417 	ldw	r18,16(sp)
   12f48:	dc400317 	ldw	r17,12(sp)
   12f4c:	dc000217 	ldw	r16,8(sp)
   12f50:	dec00704 	addi	sp,sp,28
   12f54:	f800283a 	ret
   12f58:	280a953a 	slli	r5,r5,20
   12f5c:	1947c83a 	sub	r3,r3,r5
   12f60:	003ff106 	br	12f28 <__ratio+0x68>

00012f64 <_mprec_log10>:
   12f64:	defffe04 	addi	sp,sp,-8
   12f68:	dc000015 	stw	r16,0(sp)
   12f6c:	dfc00115 	stw	ra,4(sp)
   12f70:	008005c4 	movi	r2,23
   12f74:	2021883a 	mov	r16,r4
   12f78:	11000d0e 	bge	r2,r4,12fb0 <_mprec_log10+0x4c>
   12f7c:	0005883a 	mov	r2,zero
   12f80:	00cffc34 	movhi	r3,16368
   12f84:	843fffc4 	addi	r16,r16,-1
   12f88:	1009883a 	mov	r4,r2
   12f8c:	180b883a 	mov	r5,r3
   12f90:	000d883a 	mov	r6,zero
   12f94:	01d00934 	movhi	r7,16420
   12f98:	00161400 	call	16140 <__muldf3>
   12f9c:	803ff91e 	bne	r16,zero,12f84 <_mprec_log10+0x20>
   12fa0:	dfc00117 	ldw	ra,4(sp)
   12fa4:	dc000017 	ldw	r16,0(sp)
   12fa8:	dec00204 	addi	sp,sp,8
   12fac:	f800283a 	ret
   12fb0:	202090fa 	slli	r16,r4,3
   12fb4:	008000b4 	movhi	r2,2
   12fb8:	10a24b04 	addi	r2,r2,-30420
   12fbc:	1421883a 	add	r16,r2,r16
   12fc0:	80800017 	ldw	r2,0(r16)
   12fc4:	80c00117 	ldw	r3,4(r16)
   12fc8:	dfc00117 	ldw	ra,4(sp)
   12fcc:	dc000017 	ldw	r16,0(sp)
   12fd0:	dec00204 	addi	sp,sp,8
   12fd4:	f800283a 	ret

00012fd8 <__copybits>:
   12fd8:	297fffc4 	addi	r5,r5,-1
   12fdc:	31c00417 	ldw	r7,16(r6)
   12fe0:	2811d17a 	srai	r8,r5,5
   12fe4:	30800504 	addi	r2,r6,20
   12fe8:	39c00144 	addi	r7,r7,5
   12fec:	42000044 	addi	r8,r8,1
   12ff0:	39cf883a 	add	r7,r7,r7
   12ff4:	4211883a 	add	r8,r8,r8
   12ff8:	39cf883a 	add	r7,r7,r7
   12ffc:	4211883a 	add	r8,r8,r8
   13000:	31cf883a 	add	r7,r6,r7
   13004:	2211883a 	add	r8,r4,r8
   13008:	11c00d2e 	bgeu	r2,r7,13040 <__copybits+0x68>
   1300c:	2007883a 	mov	r3,r4
   13010:	11400017 	ldw	r5,0(r2)
   13014:	18c00104 	addi	r3,r3,4
   13018:	10800104 	addi	r2,r2,4
   1301c:	197fff15 	stw	r5,-4(r3)
   13020:	11fffb36 	bltu	r2,r7,13010 <__copybits+0x38>
   13024:	3985c83a 	sub	r2,r7,r6
   13028:	10bffac4 	addi	r2,r2,-21
   1302c:	1004d0ba 	srli	r2,r2,2
   13030:	10800044 	addi	r2,r2,1
   13034:	1085883a 	add	r2,r2,r2
   13038:	1085883a 	add	r2,r2,r2
   1303c:	2089883a 	add	r4,r4,r2
   13040:	2200032e 	bgeu	r4,r8,13050 <__copybits+0x78>
   13044:	20000015 	stw	zero,0(r4)
   13048:	21000104 	addi	r4,r4,4
   1304c:	223ffd36 	bltu	r4,r8,13044 <__copybits+0x6c>
   13050:	f800283a 	ret

00013054 <__any_on>:
   13054:	21800417 	ldw	r6,16(r4)
   13058:	2805d17a 	srai	r2,r5,5
   1305c:	20c00504 	addi	r3,r4,20
   13060:	30800f0e 	bge	r6,r2,130a0 <__any_on+0x4c>
   13064:	3005883a 	mov	r2,r6
   13068:	10800144 	addi	r2,r2,5
   1306c:	1085883a 	add	r2,r2,r2
   13070:	1085883a 	add	r2,r2,r2
   13074:	2089883a 	add	r4,r4,r2
   13078:	1900152e 	bgeu	r3,r4,130d0 <__any_on+0x7c>
   1307c:	20bfff17 	ldw	r2,-4(r4)
   13080:	213fff04 	addi	r4,r4,-4
   13084:	1000041e 	bne	r2,zero,13098 <__any_on+0x44>
   13088:	1900112e 	bgeu	r3,r4,130d0 <__any_on+0x7c>
   1308c:	213fff04 	addi	r4,r4,-4
   13090:	20800017 	ldw	r2,0(r4)
   13094:	103ffc26 	beq	r2,zero,13088 <__any_on+0x34>
   13098:	00800044 	movi	r2,1
   1309c:	f800283a 	ret
   130a0:	11bff10e 	bge	r2,r6,13068 <__any_on+0x14>
   130a4:	294007cc 	andi	r5,r5,31
   130a8:	283fef26 	beq	r5,zero,13068 <__any_on+0x14>
   130ac:	11800144 	addi	r6,r2,5
   130b0:	318d883a 	add	r6,r6,r6
   130b4:	318d883a 	add	r6,r6,r6
   130b8:	218d883a 	add	r6,r4,r6
   130bc:	31800017 	ldw	r6,0(r6)
   130c0:	314ed83a 	srl	r7,r6,r5
   130c4:	394a983a 	sll	r5,r7,r5
   130c8:	29bff31e 	bne	r5,r6,13098 <__any_on+0x44>
   130cc:	003fe606 	br	13068 <__any_on+0x14>
   130d0:	0005883a 	mov	r2,zero
   130d4:	f800283a 	ret

000130d8 <_realloc_r>:
   130d8:	defff504 	addi	sp,sp,-44
   130dc:	dd400615 	stw	r21,24(sp)
   130e0:	dc800315 	stw	r18,12(sp)
   130e4:	dc000115 	stw	r16,4(sp)
   130e8:	dfc00a15 	stw	ra,40(sp)
   130ec:	df000915 	stw	fp,36(sp)
   130f0:	ddc00815 	stw	r23,32(sp)
   130f4:	dd800715 	stw	r22,28(sp)
   130f8:	dd000515 	stw	r20,20(sp)
   130fc:	dcc00415 	stw	r19,16(sp)
   13100:	dc400215 	stw	r17,8(sp)
   13104:	2821883a 	mov	r16,r5
   13108:	202b883a 	mov	r21,r4
   1310c:	3025883a 	mov	r18,r6
   13110:	28009626 	beq	r5,zero,1336c <_realloc_r+0x294>
   13114:	0016d740 	call	16d74 <__malloc_lock>
   13118:	80bfff17 	ldw	r2,-4(r16)
   1311c:	04ffff04 	movi	r19,-4
   13120:	90c002c4 	addi	r3,r18,11
   13124:	01000584 	movi	r4,22
   13128:	85bffe04 	addi	r22,r16,-8
   1312c:	14e6703a 	and	r19,r2,r19
   13130:	20c0372e 	bgeu	r4,r3,13210 <_realloc_r+0x138>
   13134:	047ffe04 	movi	r17,-8
   13138:	1c62703a 	and	r17,r3,r17
   1313c:	8807883a 	mov	r3,r17
   13140:	88005a16 	blt	r17,zero,132ac <_realloc_r+0x1d4>
   13144:	8c805936 	bltu	r17,r18,132ac <_realloc_r+0x1d4>
   13148:	98c0340e 	bge	r19,r3,1321c <_realloc_r+0x144>
   1314c:	070000b4 	movhi	fp,2
   13150:	e722cd04 	addi	fp,fp,-29900
   13154:	e1400217 	ldw	r5,8(fp)
   13158:	b4c9883a 	add	r4,r22,r19
   1315c:	29009026 	beq	r5,r4,133a0 <_realloc_r+0x2c8>
   13160:	21800117 	ldw	r6,4(r4)
   13164:	01ffff84 	movi	r7,-2
   13168:	31ce703a 	and	r7,r6,r7
   1316c:	21cf883a 	add	r7,r4,r7
   13170:	39c00117 	ldw	r7,4(r7)
   13174:	39c0004c 	andi	r7,r7,1
   13178:	38004326 	beq	r7,zero,13288 <_realloc_r+0x1b0>
   1317c:	000d883a 	mov	r6,zero
   13180:	0009883a 	mov	r4,zero
   13184:	1080004c 	andi	r2,r2,1
   13188:	10005a1e 	bne	r2,zero,132f4 <_realloc_r+0x21c>
   1318c:	85fffe17 	ldw	r23,-8(r16)
   13190:	00bfff04 	movi	r2,-4
   13194:	b5efc83a 	sub	r23,r22,r23
   13198:	b9c00117 	ldw	r7,4(r23)
   1319c:	388e703a 	and	r7,r7,r2
   131a0:	3ccf883a 	add	r7,r7,r19
   131a4:	20005226 	beq	r4,zero,132f0 <_realloc_r+0x218>
   131a8:	31e9883a 	add	r20,r6,r7
   131ac:	2140c726 	beq	r4,r5,134cc <_realloc_r+0x3f4>
   131b0:	a0c04f16 	blt	r20,r3,132f0 <_realloc_r+0x218>
   131b4:	20800317 	ldw	r2,12(r4)
   131b8:	20c00217 	ldw	r3,8(r4)
   131bc:	99bfff04 	addi	r6,r19,-4
   131c0:	01000904 	movi	r4,36
   131c4:	18800315 	stw	r2,12(r3)
   131c8:	10c00215 	stw	r3,8(r2)
   131cc:	b8c00217 	ldw	r3,8(r23)
   131d0:	b8800317 	ldw	r2,12(r23)
   131d4:	bc800204 	addi	r18,r23,8
   131d8:	18800315 	stw	r2,12(r3)
   131dc:	10c00215 	stw	r3,8(r2)
   131e0:	2180ed36 	bltu	r4,r6,13598 <_realloc_r+0x4c0>
   131e4:	008004c4 	movi	r2,19
   131e8:	11809b2e 	bgeu	r2,r6,13458 <_realloc_r+0x380>
   131ec:	80800017 	ldw	r2,0(r16)
   131f0:	b8800215 	stw	r2,8(r23)
   131f4:	80800117 	ldw	r2,4(r16)
   131f8:	b8800315 	stw	r2,12(r23)
   131fc:	008006c4 	movi	r2,27
   13200:	1180f936 	bltu	r2,r6,135e8 <_realloc_r+0x510>
   13204:	b8800404 	addi	r2,r23,16
   13208:	80c00204 	addi	r3,r16,8
   1320c:	00009406 	br	13460 <_realloc_r+0x388>
   13210:	00c00404 	movi	r3,16
   13214:	1823883a 	mov	r17,r3
   13218:	003fca06 	br	13144 <_realloc_r+0x6c>
   1321c:	9829883a 	mov	r20,r19
   13220:	a447c83a 	sub	r3,r20,r17
   13224:	010003c4 	movi	r4,15
   13228:	1080004c 	andi	r2,r2,1
   1322c:	20c02336 	bltu	r4,r3,132bc <_realloc_r+0x1e4>
   13230:	1504b03a 	or	r2,r2,r20
   13234:	b0800115 	stw	r2,4(r22)
   13238:	b52d883a 	add	r22,r22,r20
   1323c:	b0800117 	ldw	r2,4(r22)
   13240:	10800054 	ori	r2,r2,1
   13244:	b0800115 	stw	r2,4(r22)
   13248:	a809883a 	mov	r4,r21
   1324c:	0016d940 	call	16d94 <__malloc_unlock>
   13250:	8025883a 	mov	r18,r16
   13254:	9005883a 	mov	r2,r18
   13258:	dfc00a17 	ldw	ra,40(sp)
   1325c:	df000917 	ldw	fp,36(sp)
   13260:	ddc00817 	ldw	r23,32(sp)
   13264:	dd800717 	ldw	r22,28(sp)
   13268:	dd400617 	ldw	r21,24(sp)
   1326c:	dd000517 	ldw	r20,20(sp)
   13270:	dcc00417 	ldw	r19,16(sp)
   13274:	dc800317 	ldw	r18,12(sp)
   13278:	dc400217 	ldw	r17,8(sp)
   1327c:	dc000117 	ldw	r16,4(sp)
   13280:	dec00b04 	addi	sp,sp,44
   13284:	f800283a 	ret
   13288:	01ffff04 	movi	r7,-4
   1328c:	31cc703a 	and	r6,r6,r7
   13290:	34e9883a 	add	r20,r6,r19
   13294:	a0ffbb16 	blt	r20,r3,13184 <_realloc_r+0xac>
   13298:	20c00317 	ldw	r3,12(r4)
   1329c:	21000217 	ldw	r4,8(r4)
   132a0:	20c00315 	stw	r3,12(r4)
   132a4:	19000215 	stw	r4,8(r3)
   132a8:	003fdd06 	br	13220 <_realloc_r+0x148>
   132ac:	00800304 	movi	r2,12
   132b0:	a8800015 	stw	r2,0(r21)
   132b4:	0025883a 	mov	r18,zero
   132b8:	003fe606 	br	13254 <_realloc_r+0x17c>
   132bc:	1444b03a 	or	r2,r2,r17
   132c0:	b0800115 	stw	r2,4(r22)
   132c4:	b44b883a 	add	r5,r22,r17
   132c8:	18800054 	ori	r2,r3,1
   132cc:	28800115 	stw	r2,4(r5)
   132d0:	28c7883a 	add	r3,r5,r3
   132d4:	18800117 	ldw	r2,4(r3)
   132d8:	a809883a 	mov	r4,r21
   132dc:	29400204 	addi	r5,r5,8
   132e0:	10800054 	ori	r2,r2,1
   132e4:	18800115 	stw	r2,4(r3)
   132e8:	00151700 	call	15170 <_free_r>
   132ec:	003fd606 	br	13248 <_realloc_r+0x170>
   132f0:	38c0330e 	bge	r7,r3,133c0 <_realloc_r+0x2e8>
   132f4:	900b883a 	mov	r5,r18
   132f8:	a809883a 	mov	r4,r21
   132fc:	00154680 	call	15468 <_malloc_r>
   13300:	1025883a 	mov	r18,r2
   13304:	10001626 	beq	r2,zero,13360 <_realloc_r+0x288>
   13308:	80bfff17 	ldw	r2,-4(r16)
   1330c:	00ffff84 	movi	r3,-2
   13310:	913ffe04 	addi	r4,r18,-8
   13314:	10c6703a 	and	r3,r2,r3
   13318:	b0c7883a 	add	r3,r22,r3
   1331c:	20c09926 	beq	r4,r3,13584 <_realloc_r+0x4ac>
   13320:	99bfff04 	addi	r6,r19,-4
   13324:	00800904 	movi	r2,36
   13328:	11806436 	bltu	r2,r6,134bc <_realloc_r+0x3e4>
   1332c:	00c004c4 	movi	r3,19
   13330:	19804036 	bltu	r3,r6,13434 <_realloc_r+0x35c>
   13334:	9005883a 	mov	r2,r18
   13338:	8007883a 	mov	r3,r16
   1333c:	19000017 	ldw	r4,0(r3)
   13340:	11000015 	stw	r4,0(r2)
   13344:	19000117 	ldw	r4,4(r3)
   13348:	11000115 	stw	r4,4(r2)
   1334c:	18c00217 	ldw	r3,8(r3)
   13350:	10c00215 	stw	r3,8(r2)
   13354:	a809883a 	mov	r4,r21
   13358:	800b883a 	mov	r5,r16
   1335c:	00151700 	call	15170 <_free_r>
   13360:	a809883a 	mov	r4,r21
   13364:	0016d940 	call	16d94 <__malloc_unlock>
   13368:	003fba06 	br	13254 <_realloc_r+0x17c>
   1336c:	300b883a 	mov	r5,r6
   13370:	dfc00a17 	ldw	ra,40(sp)
   13374:	df000917 	ldw	fp,36(sp)
   13378:	ddc00817 	ldw	r23,32(sp)
   1337c:	dd800717 	ldw	r22,28(sp)
   13380:	dd400617 	ldw	r21,24(sp)
   13384:	dd000517 	ldw	r20,20(sp)
   13388:	dcc00417 	ldw	r19,16(sp)
   1338c:	dc800317 	ldw	r18,12(sp)
   13390:	dc400217 	ldw	r17,8(sp)
   13394:	dc000117 	ldw	r16,4(sp)
   13398:	dec00b04 	addi	sp,sp,44
   1339c:	00154681 	jmpi	15468 <_malloc_r>
   133a0:	29800117 	ldw	r6,4(r5)
   133a4:	013fff04 	movi	r4,-4
   133a8:	89c00404 	addi	r7,r17,16
   133ac:	310c703a 	and	r6,r6,r4
   133b0:	34c9883a 	add	r4,r6,r19
   133b4:	21c0340e 	bge	r4,r7,13488 <_realloc_r+0x3b0>
   133b8:	2809883a 	mov	r4,r5
   133bc:	003f7106 	br	13184 <_realloc_r+0xac>
   133c0:	b8800317 	ldw	r2,12(r23)
   133c4:	b8c00217 	ldw	r3,8(r23)
   133c8:	99bfff04 	addi	r6,r19,-4
   133cc:	01000904 	movi	r4,36
   133d0:	18800315 	stw	r2,12(r3)
   133d4:	10c00215 	stw	r3,8(r2)
   133d8:	bc800204 	addi	r18,r23,8
   133dc:	21807836 	bltu	r4,r6,135c0 <_realloc_r+0x4e8>
   133e0:	008004c4 	movi	r2,19
   133e4:	1180732e 	bgeu	r2,r6,135b4 <_realloc_r+0x4dc>
   133e8:	80800017 	ldw	r2,0(r16)
   133ec:	b8800215 	stw	r2,8(r23)
   133f0:	80800117 	ldw	r2,4(r16)
   133f4:	b8800315 	stw	r2,12(r23)
   133f8:	008006c4 	movi	r2,27
   133fc:	11808936 	bltu	r2,r6,13624 <_realloc_r+0x54c>
   13400:	b8800404 	addi	r2,r23,16
   13404:	80c00204 	addi	r3,r16,8
   13408:	19000017 	ldw	r4,0(r3)
   1340c:	9021883a 	mov	r16,r18
   13410:	3829883a 	mov	r20,r7
   13414:	11000015 	stw	r4,0(r2)
   13418:	19000117 	ldw	r4,4(r3)
   1341c:	b82d883a 	mov	r22,r23
   13420:	11000115 	stw	r4,4(r2)
   13424:	18c00217 	ldw	r3,8(r3)
   13428:	10c00215 	stw	r3,8(r2)
   1342c:	b8800117 	ldw	r2,4(r23)
   13430:	003f7b06 	br	13220 <_realloc_r+0x148>
   13434:	80c00017 	ldw	r3,0(r16)
   13438:	90c00015 	stw	r3,0(r18)
   1343c:	80c00117 	ldw	r3,4(r16)
   13440:	90c00115 	stw	r3,4(r18)
   13444:	00c006c4 	movi	r3,27
   13448:	19804636 	bltu	r3,r6,13564 <_realloc_r+0x48c>
   1344c:	90800204 	addi	r2,r18,8
   13450:	80c00204 	addi	r3,r16,8
   13454:	003fb906 	br	1333c <_realloc_r+0x264>
   13458:	9005883a 	mov	r2,r18
   1345c:	8007883a 	mov	r3,r16
   13460:	19000017 	ldw	r4,0(r3)
   13464:	9021883a 	mov	r16,r18
   13468:	b82d883a 	mov	r22,r23
   1346c:	11000015 	stw	r4,0(r2)
   13470:	19000117 	ldw	r4,4(r3)
   13474:	11000115 	stw	r4,4(r2)
   13478:	18c00217 	ldw	r3,8(r3)
   1347c:	10c00215 	stw	r3,8(r2)
   13480:	b8800117 	ldw	r2,4(r23)
   13484:	003f6606 	br	13220 <_realloc_r+0x148>
   13488:	2445c83a 	sub	r2,r4,r17
   1348c:	b46d883a 	add	r22,r22,r17
   13490:	10800054 	ori	r2,r2,1
   13494:	b0800115 	stw	r2,4(r22)
   13498:	80bfff17 	ldw	r2,-4(r16)
   1349c:	a809883a 	mov	r4,r21
   134a0:	e5800215 	stw	r22,8(fp)
   134a4:	1080004c 	andi	r2,r2,1
   134a8:	88a2b03a 	or	r17,r17,r2
   134ac:	847fff15 	stw	r17,-4(r16)
   134b0:	0016d940 	call	16d94 <__malloc_unlock>
   134b4:	8025883a 	mov	r18,r16
   134b8:	003f6606 	br	13254 <_realloc_r+0x17c>
   134bc:	9009883a 	mov	r4,r18
   134c0:	800b883a 	mov	r5,r16
   134c4:	0015c140 	call	15c14 <memmove>
   134c8:	003fa206 	br	13354 <_realloc_r+0x27c>
   134cc:	88800404 	addi	r2,r17,16
   134d0:	a0bf8716 	blt	r20,r2,132f0 <_realloc_r+0x218>
   134d4:	b8800317 	ldw	r2,12(r23)
   134d8:	b8c00217 	ldw	r3,8(r23)
   134dc:	99bfff04 	addi	r6,r19,-4
   134e0:	01000904 	movi	r4,36
   134e4:	18800315 	stw	r2,12(r3)
   134e8:	10c00215 	stw	r3,8(r2)
   134ec:	bc800204 	addi	r18,r23,8
   134f0:	21806536 	bltu	r4,r6,13688 <_realloc_r+0x5b0>
   134f4:	008004c4 	movi	r2,19
   134f8:	1180592e 	bgeu	r2,r6,13660 <_realloc_r+0x588>
   134fc:	80800017 	ldw	r2,0(r16)
   13500:	b8800215 	stw	r2,8(r23)
   13504:	80800117 	ldw	r2,4(r16)
   13508:	b8800315 	stw	r2,12(r23)
   1350c:	008006c4 	movi	r2,27
   13510:	11806136 	bltu	r2,r6,13698 <_realloc_r+0x5c0>
   13514:	b8800404 	addi	r2,r23,16
   13518:	80c00204 	addi	r3,r16,8
   1351c:	19000017 	ldw	r4,0(r3)
   13520:	11000015 	stw	r4,0(r2)
   13524:	19000117 	ldw	r4,4(r3)
   13528:	11000115 	stw	r4,4(r2)
   1352c:	18c00217 	ldw	r3,8(r3)
   13530:	10c00215 	stw	r3,8(r2)
   13534:	a447c83a 	sub	r3,r20,r17
   13538:	bc45883a 	add	r2,r23,r17
   1353c:	18c00054 	ori	r3,r3,1
   13540:	10c00115 	stw	r3,4(r2)
   13544:	b8c00117 	ldw	r3,4(r23)
   13548:	e0800215 	stw	r2,8(fp)
   1354c:	a809883a 	mov	r4,r21
   13550:	1880004c 	andi	r2,r3,1
   13554:	88a2b03a 	or	r17,r17,r2
   13558:	bc400115 	stw	r17,4(r23)
   1355c:	0016d940 	call	16d94 <__malloc_unlock>
   13560:	003f3c06 	br	13254 <_realloc_r+0x17c>
   13564:	80c00217 	ldw	r3,8(r16)
   13568:	90c00215 	stw	r3,8(r18)
   1356c:	80c00317 	ldw	r3,12(r16)
   13570:	90c00315 	stw	r3,12(r18)
   13574:	30802426 	beq	r6,r2,13608 <_realloc_r+0x530>
   13578:	90800404 	addi	r2,r18,16
   1357c:	80c00404 	addi	r3,r16,16
   13580:	003f6e06 	br	1333c <_realloc_r+0x264>
   13584:	953fff17 	ldw	r20,-4(r18)
   13588:	00ffff04 	movi	r3,-4
   1358c:	a0e8703a 	and	r20,r20,r3
   13590:	a4e9883a 	add	r20,r20,r19
   13594:	003f2206 	br	13220 <_realloc_r+0x148>
   13598:	800b883a 	mov	r5,r16
   1359c:	9009883a 	mov	r4,r18
   135a0:	0015c140 	call	15c14 <memmove>
   135a4:	9021883a 	mov	r16,r18
   135a8:	b8800117 	ldw	r2,4(r23)
   135ac:	b82d883a 	mov	r22,r23
   135b0:	003f1b06 	br	13220 <_realloc_r+0x148>
   135b4:	9005883a 	mov	r2,r18
   135b8:	8007883a 	mov	r3,r16
   135bc:	003f9206 	br	13408 <_realloc_r+0x330>
   135c0:	800b883a 	mov	r5,r16
   135c4:	9009883a 	mov	r4,r18
   135c8:	d9c00015 	stw	r7,0(sp)
   135cc:	0015c140 	call	15c14 <memmove>
   135d0:	d9c00017 	ldw	r7,0(sp)
   135d4:	9021883a 	mov	r16,r18
   135d8:	b8800117 	ldw	r2,4(r23)
   135dc:	3829883a 	mov	r20,r7
   135e0:	b82d883a 	mov	r22,r23
   135e4:	003f0e06 	br	13220 <_realloc_r+0x148>
   135e8:	80800217 	ldw	r2,8(r16)
   135ec:	b8800415 	stw	r2,16(r23)
   135f0:	80800317 	ldw	r2,12(r16)
   135f4:	b8800515 	stw	r2,20(r23)
   135f8:	31001226 	beq	r6,r4,13644 <_realloc_r+0x56c>
   135fc:	b8800604 	addi	r2,r23,24
   13600:	80c00404 	addi	r3,r16,16
   13604:	003f9606 	br	13460 <_realloc_r+0x388>
   13608:	81000417 	ldw	r4,16(r16)
   1360c:	90800604 	addi	r2,r18,24
   13610:	80c00604 	addi	r3,r16,24
   13614:	91000415 	stw	r4,16(r18)
   13618:	81000517 	ldw	r4,20(r16)
   1361c:	91000515 	stw	r4,20(r18)
   13620:	003f4606 	br	1333c <_realloc_r+0x264>
   13624:	80800217 	ldw	r2,8(r16)
   13628:	b8800415 	stw	r2,16(r23)
   1362c:	80800317 	ldw	r2,12(r16)
   13630:	b8800515 	stw	r2,20(r23)
   13634:	31000d26 	beq	r6,r4,1366c <_realloc_r+0x594>
   13638:	b8800604 	addi	r2,r23,24
   1363c:	80c00404 	addi	r3,r16,16
   13640:	003f7106 	br	13408 <_realloc_r+0x330>
   13644:	81000417 	ldw	r4,16(r16)
   13648:	b8800804 	addi	r2,r23,32
   1364c:	80c00604 	addi	r3,r16,24
   13650:	b9000615 	stw	r4,24(r23)
   13654:	81000517 	ldw	r4,20(r16)
   13658:	b9000715 	stw	r4,28(r23)
   1365c:	003f8006 	br	13460 <_realloc_r+0x388>
   13660:	9005883a 	mov	r2,r18
   13664:	8007883a 	mov	r3,r16
   13668:	003fac06 	br	1351c <_realloc_r+0x444>
   1366c:	81000417 	ldw	r4,16(r16)
   13670:	b8800804 	addi	r2,r23,32
   13674:	80c00604 	addi	r3,r16,24
   13678:	b9000615 	stw	r4,24(r23)
   1367c:	81000517 	ldw	r4,20(r16)
   13680:	b9000715 	stw	r4,28(r23)
   13684:	003f6006 	br	13408 <_realloc_r+0x330>
   13688:	9009883a 	mov	r4,r18
   1368c:	800b883a 	mov	r5,r16
   13690:	0015c140 	call	15c14 <memmove>
   13694:	003fa706 	br	13534 <_realloc_r+0x45c>
   13698:	80800217 	ldw	r2,8(r16)
   1369c:	b8800415 	stw	r2,16(r23)
   136a0:	80800317 	ldw	r2,12(r16)
   136a4:	b8800515 	stw	r2,20(r23)
   136a8:	31000326 	beq	r6,r4,136b8 <_realloc_r+0x5e0>
   136ac:	b8800604 	addi	r2,r23,24
   136b0:	80c00404 	addi	r3,r16,16
   136b4:	003f9906 	br	1351c <_realloc_r+0x444>
   136b8:	81000417 	ldw	r4,16(r16)
   136bc:	b8800804 	addi	r2,r23,32
   136c0:	80c00604 	addi	r3,r16,24
   136c4:	b9000615 	stw	r4,24(r23)
   136c8:	81000517 	ldw	r4,20(r16)
   136cc:	b9000715 	stw	r4,28(r23)
   136d0:	003f9206 	br	1351c <_realloc_r+0x444>

000136d4 <strcpy>:
   136d4:	2005883a 	mov	r2,r4
   136d8:	2007883a 	mov	r3,r4
   136dc:	29800007 	ldb	r6,0(r5)
   136e0:	18c00044 	addi	r3,r3,1
   136e4:	29400044 	addi	r5,r5,1
   136e8:	19bfffc5 	stb	r6,-1(r3)
   136ec:	303ffb1e 	bne	r6,zero,136dc <strcpy+0x8>
   136f0:	f800283a 	ret

000136f4 <_calloc_r>:
   136f4:	defffe04 	addi	sp,sp,-8
   136f8:	dc000015 	stw	r16,0(sp)
   136fc:	2021883a 	mov	r16,r4
   13700:	3009883a 	mov	r4,r6
   13704:	dfc00115 	stw	ra,4(sp)
   13708:	00112540 	call	11254 <__mulsi3>
   1370c:	8009883a 	mov	r4,r16
   13710:	100b883a 	mov	r5,r2
   13714:	00154680 	call	15468 <_malloc_r>
   13718:	1021883a 	mov	r16,r2
   1371c:	10000c26 	beq	r2,zero,13750 <_calloc_r+0x5c>
   13720:	11bfff17 	ldw	r6,-4(r2)
   13724:	00ffff04 	movi	r3,-4
   13728:	00800904 	movi	r2,36
   1372c:	30cc703a 	and	r6,r6,r3
   13730:	30cd883a 	add	r6,r6,r3
   13734:	11801436 	bltu	r2,r6,13788 <_calloc_r+0x94>
   13738:	00c004c4 	movi	r3,19
   1373c:	19800936 	bltu	r3,r6,13764 <_calloc_r+0x70>
   13740:	8005883a 	mov	r2,r16
   13744:	10000015 	stw	zero,0(r2)
   13748:	10000115 	stw	zero,4(r2)
   1374c:	10000215 	stw	zero,8(r2)
   13750:	8005883a 	mov	r2,r16
   13754:	dfc00117 	ldw	ra,4(sp)
   13758:	dc000017 	ldw	r16,0(sp)
   1375c:	dec00204 	addi	sp,sp,8
   13760:	f800283a 	ret
   13764:	80000015 	stw	zero,0(r16)
   13768:	80000115 	stw	zero,4(r16)
   1376c:	00c006c4 	movi	r3,27
   13770:	19800d2e 	bgeu	r3,r6,137a8 <_calloc_r+0xb4>
   13774:	80000215 	stw	zero,8(r16)
   13778:	80000315 	stw	zero,12(r16)
   1377c:	30800c26 	beq	r6,r2,137b0 <_calloc_r+0xbc>
   13780:	80800404 	addi	r2,r16,16
   13784:	003fef06 	br	13744 <_calloc_r+0x50>
   13788:	8009883a 	mov	r4,r16
   1378c:	000b883a 	mov	r5,zero
   13790:	0015c700 	call	15c70 <memset>
   13794:	8005883a 	mov	r2,r16
   13798:	dfc00117 	ldw	ra,4(sp)
   1379c:	dc000017 	ldw	r16,0(sp)
   137a0:	dec00204 	addi	sp,sp,8
   137a4:	f800283a 	ret
   137a8:	80800204 	addi	r2,r16,8
   137ac:	003fe506 	br	13744 <_calloc_r+0x50>
   137b0:	80000415 	stw	zero,16(r16)
   137b4:	80000515 	stw	zero,20(r16)
   137b8:	80800604 	addi	r2,r16,24
   137bc:	003fe106 	br	13744 <_calloc_r+0x50>

000137c0 <quorem>:
   137c0:	defff204 	addi	sp,sp,-56
   137c4:	dd000815 	stw	r20,32(sp)
   137c8:	20800417 	ldw	r2,16(r4)
   137cc:	2d000417 	ldw	r20,16(r5)
   137d0:	dcc00715 	stw	r19,28(sp)
   137d4:	dfc00d15 	stw	ra,52(sp)
   137d8:	df000c15 	stw	fp,48(sp)
   137dc:	ddc00b15 	stw	r23,44(sp)
   137e0:	dd800a15 	stw	r22,40(sp)
   137e4:	dd400915 	stw	r21,36(sp)
   137e8:	dc800615 	stw	r18,24(sp)
   137ec:	dc400515 	stw	r17,20(sp)
   137f0:	dc000415 	stw	r16,16(sp)
   137f4:	d9400015 	stw	r5,0(sp)
   137f8:	2027883a 	mov	r19,r4
   137fc:	15007d16 	blt	r2,r20,139f4 <quorem+0x234>
   13800:	a0800104 	addi	r2,r20,4
   13804:	1085883a 	add	r2,r2,r2
   13808:	1085883a 	add	r2,r2,r2
   1380c:	28ad883a 	add	r22,r5,r2
   13810:	2085883a 	add	r2,r4,r2
   13814:	10800017 	ldw	r2,0(r2)
   13818:	b1400017 	ldw	r5,0(r22)
   1381c:	a53fffc4 	addi	r20,r20,-1
   13820:	1009883a 	mov	r4,r2
   13824:	29400044 	addi	r5,r5,1
   13828:	d8800115 	stw	r2,4(sp)
   1382c:	0016a3c0 	call	16a3c <__udivsi3>
   13830:	1025883a 	mov	r18,r2
   13834:	d8800017 	ldw	r2,0(sp)
   13838:	9f000504 	addi	fp,r19,20
   1383c:	14000504 	addi	r16,r2,20
   13840:	90003626 	beq	r18,zero,1391c <quorem+0x15c>
   13844:	802b883a 	mov	r21,r16
   13848:	e023883a 	mov	r17,fp
   1384c:	0007883a 	mov	r3,zero
   13850:	002f883a 	mov	r23,zero
   13854:	a9800017 	ldw	r6,0(r21)
   13858:	900b883a 	mov	r5,r18
   1385c:	d8c00315 	stw	r3,12(sp)
   13860:	313fffcc 	andi	r4,r6,65535
   13864:	d9800215 	stw	r6,8(sp)
   13868:	00112540 	call	11254 <__mulsi3>
   1386c:	d9800217 	ldw	r6,8(sp)
   13870:	d8c00317 	ldw	r3,12(sp)
   13874:	900b883a 	mov	r5,r18
   13878:	3008d43a 	srli	r4,r6,16
   1387c:	1887883a 	add	r3,r3,r2
   13880:	d8c00315 	stw	r3,12(sp)
   13884:	00112540 	call	11254 <__mulsi3>
   13888:	89400017 	ldw	r5,0(r17)
   1388c:	d8c00317 	ldw	r3,12(sp)
   13890:	ad400104 	addi	r21,r21,4
   13894:	293fffcc 	andi	r4,r5,65535
   13898:	1810d43a 	srli	r8,r3,16
   1389c:	25c9883a 	add	r4,r4,r23
   138a0:	18ffffcc 	andi	r3,r3,65535
   138a4:	20c9c83a 	sub	r4,r4,r3
   138a8:	280cd43a 	srli	r6,r5,16
   138ac:	4085883a 	add	r2,r8,r2
   138b0:	2007d43a 	srai	r3,r4,16
   138b4:	117fffcc 	andi	r5,r2,65535
   138b8:	314bc83a 	sub	r5,r6,r5
   138bc:	28cb883a 	add	r5,r5,r3
   138c0:	8940008d 	sth	r5,2(r17)
   138c4:	8900000d 	sth	r4,0(r17)
   138c8:	1006d43a 	srli	r3,r2,16
   138cc:	282fd43a 	srai	r23,r5,16
   138d0:	8c400104 	addi	r17,r17,4
   138d4:	b57fdf2e 	bgeu	r22,r21,13854 <quorem+0x94>
   138d8:	d8c00117 	ldw	r3,4(sp)
   138dc:	18000f1e 	bne	r3,zero,1391c <quorem+0x15c>
   138e0:	a0800144 	addi	r2,r20,5
   138e4:	1085883a 	add	r2,r2,r2
   138e8:	1085883a 	add	r2,r2,r2
   138ec:	9887883a 	add	r3,r19,r2
   138f0:	18bfff04 	addi	r2,r3,-4
   138f4:	e080082e 	bgeu	fp,r2,13918 <quorem+0x158>
   138f8:	18ffff17 	ldw	r3,-4(r3)
   138fc:	18000326 	beq	r3,zero,1390c <quorem+0x14c>
   13900:	00000506 	br	13918 <quorem+0x158>
   13904:	10c00017 	ldw	r3,0(r2)
   13908:	1800031e 	bne	r3,zero,13918 <quorem+0x158>
   1390c:	10bfff04 	addi	r2,r2,-4
   13910:	a53fffc4 	addi	r20,r20,-1
   13914:	e0bffb36 	bltu	fp,r2,13904 <quorem+0x144>
   13918:	9d000415 	stw	r20,16(r19)
   1391c:	d9400017 	ldw	r5,0(sp)
   13920:	9809883a 	mov	r4,r19
   13924:	00129d40 	call	129d4 <__mcmp>
   13928:	10002516 	blt	r2,zero,139c0 <quorem+0x200>
   1392c:	94800044 	addi	r18,r18,1
   13930:	e007883a 	mov	r3,fp
   13934:	000d883a 	mov	r6,zero
   13938:	18800017 	ldw	r2,0(r3)
   1393c:	82000017 	ldw	r8,0(r16)
   13940:	84000104 	addi	r16,r16,4
   13944:	11ffffcc 	andi	r7,r2,65535
   13948:	413fffcc 	andi	r4,r8,65535
   1394c:	398d883a 	add	r6,r7,r6
   13950:	310fc83a 	sub	r7,r6,r4
   13954:	4010d43a 	srli	r8,r8,16
   13958:	100cd43a 	srli	r6,r2,16
   1395c:	3809d43a 	srai	r4,r7,16
   13960:	19c0000d 	sth	r7,0(r3)
   13964:	320dc83a 	sub	r6,r6,r8
   13968:	310d883a 	add	r6,r6,r4
   1396c:	1980008d 	sth	r6,2(r3)
   13970:	300dd43a 	srai	r6,r6,16
   13974:	18c00104 	addi	r3,r3,4
   13978:	b43fef2e 	bgeu	r22,r16,13938 <quorem+0x178>
   1397c:	a0800144 	addi	r2,r20,5
   13980:	1085883a 	add	r2,r2,r2
   13984:	1085883a 	add	r2,r2,r2
   13988:	9885883a 	add	r2,r19,r2
   1398c:	10c00017 	ldw	r3,0(r2)
   13990:	18000b1e 	bne	r3,zero,139c0 <quorem+0x200>
   13994:	10ffff04 	addi	r3,r2,-4
   13998:	e0c0082e 	bgeu	fp,r3,139bc <quorem+0x1fc>
   1399c:	10bfff17 	ldw	r2,-4(r2)
   139a0:	10000326 	beq	r2,zero,139b0 <quorem+0x1f0>
   139a4:	00000506 	br	139bc <quorem+0x1fc>
   139a8:	18800017 	ldw	r2,0(r3)
   139ac:	1000031e 	bne	r2,zero,139bc <quorem+0x1fc>
   139b0:	18ffff04 	addi	r3,r3,-4
   139b4:	a53fffc4 	addi	r20,r20,-1
   139b8:	e0fffb36 	bltu	fp,r3,139a8 <quorem+0x1e8>
   139bc:	9d000415 	stw	r20,16(r19)
   139c0:	9005883a 	mov	r2,r18
   139c4:	dfc00d17 	ldw	ra,52(sp)
   139c8:	df000c17 	ldw	fp,48(sp)
   139cc:	ddc00b17 	ldw	r23,44(sp)
   139d0:	dd800a17 	ldw	r22,40(sp)
   139d4:	dd400917 	ldw	r21,36(sp)
   139d8:	dd000817 	ldw	r20,32(sp)
   139dc:	dcc00717 	ldw	r19,28(sp)
   139e0:	dc800617 	ldw	r18,24(sp)
   139e4:	dc400517 	ldw	r17,20(sp)
   139e8:	dc000417 	ldw	r16,16(sp)
   139ec:	dec00e04 	addi	sp,sp,56
   139f0:	f800283a 	ret
   139f4:	0005883a 	mov	r2,zero
   139f8:	003ff206 	br	139c4 <quorem+0x204>

000139fc <_dtoa_r>:
   139fc:	20c00417 	ldw	r3,16(r4)
   13a00:	deffdf04 	addi	sp,sp,-132
   13a04:	df001f15 	stw	fp,124(sp)
   13a08:	dcc01a15 	stw	r19,104(sp)
   13a0c:	dc801915 	stw	r18,100(sp)
   13a10:	dc401815 	stw	r17,96(sp)
   13a14:	dc001715 	stw	r16,92(sp)
   13a18:	dfc02015 	stw	ra,128(sp)
   13a1c:	ddc01e15 	stw	r23,120(sp)
   13a20:	dd801d15 	stw	r22,116(sp)
   13a24:	dd401c15 	stw	r21,112(sp)
   13a28:	dd001b15 	stw	r20,108(sp)
   13a2c:	d9c00315 	stw	r7,12(sp)
   13a30:	2021883a 	mov	r16,r4
   13a34:	3025883a 	mov	r18,r6
   13a38:	2839883a 	mov	fp,r5
   13a3c:	dcc02317 	ldw	r19,140(sp)
   13a40:	3023883a 	mov	r17,r6
   13a44:	18030b26 	beq	r3,zero,14674 <_dtoa_r+0xc78>
   13a48:	18800017 	ldw	r2,0(r3)
   13a4c:	10000926 	beq	r2,zero,13a74 <_dtoa_r+0x78>
   13a50:	18c00117 	ldw	r3,4(r3)
   13a54:	01800044 	movi	r6,1
   13a58:	100b883a 	mov	r5,r2
   13a5c:	30cc983a 	sll	r6,r6,r3
   13a60:	10c00115 	stw	r3,4(r2)
   13a64:	11800215 	stw	r6,8(r2)
   13a68:	00120e80 	call	120e8 <_Bfree>
   13a6c:	80800417 	ldw	r2,16(r16)
   13a70:	10000015 	stw	zero,0(r2)
   13a74:	90002e16 	blt	r18,zero,13b30 <_dtoa_r+0x134>
   13a78:	98000015 	stw	zero,0(r19)
   13a7c:	90dffc2c 	andhi	r3,r18,32752
   13a80:	009ffc34 	movhi	r2,32752
   13a84:	18801c26 	beq	r3,r2,13af8 <_dtoa_r+0xfc>
   13a88:	e009883a 	mov	r4,fp
   13a8c:	880b883a 	mov	r5,r17
   13a90:	000d883a 	mov	r6,zero
   13a94:	000f883a 	mov	r7,zero
   13a98:	00165d80 	call	165d8 <__eqdf2>
   13a9c:	10002b1e 	bne	r2,zero,13b4c <_dtoa_r+0x150>
   13aa0:	d9c02217 	ldw	r7,136(sp)
   13aa4:	00800044 	movi	r2,1
   13aa8:	38800015 	stw	r2,0(r7)
   13aac:	d8802417 	ldw	r2,144(sp)
   13ab0:	10019926 	beq	r2,zero,14118 <_dtoa_r+0x71c>
   13ab4:	d8c02417 	ldw	r3,144(sp)
   13ab8:	008000b4 	movhi	r2,2
   13abc:	10a28444 	addi	r2,r2,-30191
   13ac0:	18800015 	stw	r2,0(r3)
   13ac4:	10bfffc4 	addi	r2,r2,-1
   13ac8:	dfc02017 	ldw	ra,128(sp)
   13acc:	df001f17 	ldw	fp,124(sp)
   13ad0:	ddc01e17 	ldw	r23,120(sp)
   13ad4:	dd801d17 	ldw	r22,116(sp)
   13ad8:	dd401c17 	ldw	r21,112(sp)
   13adc:	dd001b17 	ldw	r20,108(sp)
   13ae0:	dcc01a17 	ldw	r19,104(sp)
   13ae4:	dc801917 	ldw	r18,100(sp)
   13ae8:	dc401817 	ldw	r17,96(sp)
   13aec:	dc001717 	ldw	r16,92(sp)
   13af0:	dec02104 	addi	sp,sp,132
   13af4:	f800283a 	ret
   13af8:	d8c02217 	ldw	r3,136(sp)
   13afc:	0089c3c4 	movi	r2,9999
   13b00:	18800015 	stw	r2,0(r3)
   13b04:	e0017226 	beq	fp,zero,140d0 <_dtoa_r+0x6d4>
   13b08:	008000b4 	movhi	r2,2
   13b0c:	10a28304 	addi	r2,r2,-30196
   13b10:	d9002417 	ldw	r4,144(sp)
   13b14:	203fec26 	beq	r4,zero,13ac8 <_dtoa_r+0xcc>
   13b18:	10c000c7 	ldb	r3,3(r2)
   13b1c:	1801731e 	bne	r3,zero,140ec <_dtoa_r+0x6f0>
   13b20:	10c000c4 	addi	r3,r2,3
   13b24:	d9802417 	ldw	r6,144(sp)
   13b28:	30c00015 	stw	r3,0(r6)
   13b2c:	003fe606 	br	13ac8 <_dtoa_r+0xcc>
   13b30:	04600034 	movhi	r17,32768
   13b34:	8c7fffc4 	addi	r17,r17,-1
   13b38:	9462703a 	and	r17,r18,r17
   13b3c:	00800044 	movi	r2,1
   13b40:	98800015 	stw	r2,0(r19)
   13b44:	8825883a 	mov	r18,r17
   13b48:	003fcc06 	br	13a7c <_dtoa_r+0x80>
   13b4c:	9028d53a 	srli	r20,r18,20
   13b50:	d8800204 	addi	r2,sp,8
   13b54:	d8800015 	stw	r2,0(sp)
   13b58:	8009883a 	mov	r4,r16
   13b5c:	e00b883a 	mov	r5,fp
   13b60:	880d883a 	mov	r6,r17
   13b64:	d9c00104 	addi	r7,sp,4
   13b68:	0012d7c0 	call	12d7c <__d2b>
   13b6c:	a501ffcc 	andi	r20,r20,2047
   13b70:	102f883a 	mov	r23,r2
   13b74:	a0015f1e 	bne	r20,zero,140f4 <_dtoa_r+0x6f8>
   13b78:	dd400217 	ldw	r21,8(sp)
   13b7c:	dd000117 	ldw	r20,4(sp)
   13b80:	00befbc4 	movi	r2,-1041
   13b84:	ad29883a 	add	r20,r21,r20
   13b88:	a082e016 	blt	r20,r2,1470c <_dtoa_r+0xd10>
   13b8c:	013f0384 	movi	r4,-1010
   13b90:	2509c83a 	sub	r4,r4,r20
   13b94:	a0810484 	addi	r2,r20,1042
   13b98:	9124983a 	sll	r18,r18,r4
   13b9c:	e084d83a 	srl	r2,fp,r2
   13ba0:	9088b03a 	or	r4,r18,r2
   13ba4:	0010b640 	call	10b64 <__floatunsidf>
   13ba8:	017f8434 	movhi	r5,65040
   13bac:	01800044 	movi	r6,1
   13bb0:	1009883a 	mov	r4,r2
   13bb4:	194b883a 	add	r5,r3,r5
   13bb8:	a53fffc4 	addi	r20,r20,-1
   13bbc:	d9800f15 	stw	r6,60(sp)
   13bc0:	000d883a 	mov	r6,zero
   13bc4:	01cffe34 	movhi	r7,16376
   13bc8:	00160e00 	call	160e0 <__subdf3>
   13bcc:	1009883a 	mov	r4,r2
   13bd0:	180b883a 	mov	r5,r3
   13bd4:	0198dbf4 	movhi	r6,25455
   13bd8:	3190d844 	addi	r6,r6,17249
   13bdc:	01cff4f4 	movhi	r7,16339
   13be0:	39e1e9c4 	addi	r7,r7,-30809
   13be4:	00161400 	call	16140 <__muldf3>
   13be8:	180b883a 	mov	r5,r3
   13bec:	01a2d874 	movhi	r6,35681
   13bf0:	31b22cc4 	addi	r6,r6,-14157
   13bf4:	01cff1f4 	movhi	r7,16327
   13bf8:	39e28a04 	addi	r7,r7,-30168
   13bfc:	1009883a 	mov	r4,r2
   13c00:	001608c0 	call	1608c <__adddf3>
   13c04:	a009883a 	mov	r4,r20
   13c08:	1027883a 	mov	r19,r2
   13c0c:	1825883a 	mov	r18,r3
   13c10:	0010a900 	call	10a90 <__floatsidf>
   13c14:	1009883a 	mov	r4,r2
   13c18:	180b883a 	mov	r5,r3
   13c1c:	019427f4 	movhi	r6,20639
   13c20:	319e7ec4 	addi	r6,r6,31227
   13c24:	01cff4f4 	movhi	r7,16339
   13c28:	39d104c4 	addi	r7,r7,17427
   13c2c:	00161400 	call	16140 <__muldf3>
   13c30:	9809883a 	mov	r4,r19
   13c34:	900b883a 	mov	r5,r18
   13c38:	100d883a 	mov	r6,r2
   13c3c:	180f883a 	mov	r7,r3
   13c40:	001608c0 	call	1608c <__adddf3>
   13c44:	1009883a 	mov	r4,r2
   13c48:	180b883a 	mov	r5,r3
   13c4c:	1027883a 	mov	r19,r2
   13c50:	1825883a 	mov	r18,r3
   13c54:	00168100 	call	16810 <__fixdfsi>
   13c58:	9809883a 	mov	r4,r19
   13c5c:	900b883a 	mov	r5,r18
   13c60:	000d883a 	mov	r6,zero
   13c64:	000f883a 	mov	r7,zero
   13c68:	d8800515 	stw	r2,20(sp)
   13c6c:	00167580 	call	16758 <__ltdf2>
   13c70:	10028816 	blt	r2,zero,14694 <_dtoa_r+0xc98>
   13c74:	d8c00517 	ldw	r3,20(sp)
   13c78:	00800584 	movi	r2,22
   13c7c:	10c27a36 	bltu	r2,r3,14668 <_dtoa_r+0xc6c>
   13c80:	180490fa 	slli	r2,r3,3
   13c84:	00c000b4 	movhi	r3,2
   13c88:	18e24b04 	addi	r3,r3,-30420
   13c8c:	e00d883a 	mov	r6,fp
   13c90:	1885883a 	add	r2,r3,r2
   13c94:	11000017 	ldw	r4,0(r2)
   13c98:	11400117 	ldw	r5,4(r2)
   13c9c:	880f883a 	mov	r7,r17
   13ca0:	00166900 	call	16690 <__gtdf2>
   13ca4:	00829d0e 	bge	zero,r2,1471c <_dtoa_r+0xd20>
   13ca8:	d8800517 	ldw	r2,20(sp)
   13cac:	d8000d15 	stw	zero,52(sp)
   13cb0:	10bfffc4 	addi	r2,r2,-1
   13cb4:	d8800515 	stw	r2,20(sp)
   13cb8:	ad29c83a 	sub	r20,r21,r20
   13cbc:	a53fffc4 	addi	r20,r20,-1
   13cc0:	a0028816 	blt	r20,zero,146e4 <_dtoa_r+0xce8>
   13cc4:	dd000615 	stw	r20,24(sp)
   13cc8:	d8000815 	stw	zero,32(sp)
   13ccc:	d8800517 	ldw	r2,20(sp)
   13cd0:	10027c16 	blt	r2,zero,146c4 <_dtoa_r+0xcc8>
   13cd4:	d9800617 	ldw	r6,24(sp)
   13cd8:	d8800b15 	stw	r2,44(sp)
   13cdc:	d8000a15 	stw	zero,40(sp)
   13ce0:	308d883a 	add	r6,r6,r2
   13ce4:	d9800615 	stw	r6,24(sp)
   13ce8:	d9c00317 	ldw	r7,12(sp)
   13cec:	00800244 	movi	r2,9
   13cf0:	11c10c36 	bltu	r2,r7,14124 <_dtoa_r+0x728>
   13cf4:	00800144 	movi	r2,5
   13cf8:	11c4c80e 	bge	r2,r7,1501c <_dtoa_r+0x1620>
   13cfc:	39ffff04 	addi	r7,r7,-4
   13d00:	d9c00315 	stw	r7,12(sp)
   13d04:	0029883a 	mov	r20,zero
   13d08:	d9c00317 	ldw	r7,12(sp)
   13d0c:	008000c4 	movi	r2,3
   13d10:	3883ae26 	beq	r7,r2,14bcc <_dtoa_r+0x11d0>
   13d14:	11c2c916 	blt	r2,r7,1483c <_dtoa_r+0xe40>
   13d18:	00800084 	movi	r2,2
   13d1c:	3881021e 	bne	r7,r2,14128 <_dtoa_r+0x72c>
   13d20:	d8000c15 	stw	zero,48(sp)
   13d24:	d9002117 	ldw	r4,132(sp)
   13d28:	0103b60e 	bge	zero,r4,14c04 <_dtoa_r+0x1208>
   13d2c:	2025883a 	mov	r18,r4
   13d30:	d9000e15 	stw	r4,56(sp)
   13d34:	d9000915 	stw	r4,36(sp)
   13d38:	84c00417 	ldw	r19,16(r16)
   13d3c:	008005c4 	movi	r2,23
   13d40:	98000115 	stw	zero,4(r19)
   13d44:	1480082e 	bgeu	r2,r18,13d68 <_dtoa_r+0x36c>
   13d48:	00c00044 	movi	r3,1
   13d4c:	00800104 	movi	r2,4
   13d50:	1085883a 	add	r2,r2,r2
   13d54:	11000504 	addi	r4,r2,20
   13d58:	180b883a 	mov	r5,r3
   13d5c:	18c00044 	addi	r3,r3,1
   13d60:	913ffb2e 	bgeu	r18,r4,13d50 <_dtoa_r+0x354>
   13d64:	99400115 	stw	r5,4(r19)
   13d68:	99400117 	ldw	r5,4(r19)
   13d6c:	8009883a 	mov	r4,r16
   13d70:	001200c0 	call	1200c <_Balloc>
   13d74:	80c00417 	ldw	r3,16(r16)
   13d78:	98800015 	stw	r2,0(r19)
   13d7c:	00800384 	movi	r2,14
   13d80:	18c00017 	ldw	r3,0(r3)
   13d84:	d8c00715 	stw	r3,28(sp)
   13d88:	1480f636 	bltu	r2,r18,14164 <_dtoa_r+0x768>
   13d8c:	a000f526 	beq	r20,zero,14164 <_dtoa_r+0x768>
   13d90:	d8800517 	ldw	r2,20(sp)
   13d94:	0083a00e 	bge	zero,r2,14c18 <_dtoa_r+0x121c>
   13d98:	d8c00517 	ldw	r3,20(sp)
   13d9c:	108003cc 	andi	r2,r2,15
   13da0:	100490fa 	slli	r2,r2,3
   13da4:	182bd13a 	srai	r21,r3,4
   13da8:	00c000b4 	movhi	r3,2
   13dac:	18e24b04 	addi	r3,r3,-30420
   13db0:	1885883a 	add	r2,r3,r2
   13db4:	a8c0040c 	andi	r3,r21,16
   13db8:	12800017 	ldw	r10,0(r2)
   13dbc:	15800117 	ldw	r22,4(r2)
   13dc0:	18038c26 	beq	r3,zero,14bf4 <_dtoa_r+0x11f8>
   13dc4:	008000b4 	movhi	r2,2
   13dc8:	10a24104 	addi	r2,r2,-30460
   13dcc:	11800817 	ldw	r6,32(r2)
   13dd0:	11c00917 	ldw	r7,36(r2)
   13dd4:	e009883a 	mov	r4,fp
   13dd8:	880b883a 	mov	r5,r17
   13ddc:	da801515 	stw	r10,84(sp)
   13de0:	00164240 	call	16424 <__divdf3>
   13de4:	da801517 	ldw	r10,84(sp)
   13de8:	d8801015 	stw	r2,64(sp)
   13dec:	1829883a 	mov	r20,r3
   13df0:	ad4003cc 	andi	r21,r21,15
   13df4:	048000c4 	movi	r18,3
   13df8:	a8001126 	beq	r21,zero,13e40 <_dtoa_r+0x444>
   13dfc:	04c000b4 	movhi	r19,2
   13e00:	9ce24104 	addi	r19,r19,-30460
   13e04:	5005883a 	mov	r2,r10
   13e08:	b007883a 	mov	r3,r22
   13e0c:	a980004c 	andi	r6,r21,1
   13e10:	1009883a 	mov	r4,r2
   13e14:	a82bd07a 	srai	r21,r21,1
   13e18:	180b883a 	mov	r5,r3
   13e1c:	30000426 	beq	r6,zero,13e30 <_dtoa_r+0x434>
   13e20:	99800017 	ldw	r6,0(r19)
   13e24:	99c00117 	ldw	r7,4(r19)
   13e28:	94800044 	addi	r18,r18,1
   13e2c:	00161400 	call	16140 <__muldf3>
   13e30:	9cc00204 	addi	r19,r19,8
   13e34:	a83ff51e 	bne	r21,zero,13e0c <_dtoa_r+0x410>
   13e38:	1015883a 	mov	r10,r2
   13e3c:	182d883a 	mov	r22,r3
   13e40:	d9001017 	ldw	r4,64(sp)
   13e44:	a00b883a 	mov	r5,r20
   13e48:	500d883a 	mov	r6,r10
   13e4c:	b00f883a 	mov	r7,r22
   13e50:	00164240 	call	16424 <__divdf3>
   13e54:	1027883a 	mov	r19,r2
   13e58:	1829883a 	mov	r20,r3
   13e5c:	d8c00d17 	ldw	r3,52(sp)
   13e60:	18000626 	beq	r3,zero,13e7c <_dtoa_r+0x480>
   13e64:	9809883a 	mov	r4,r19
   13e68:	a00b883a 	mov	r5,r20
   13e6c:	000d883a 	mov	r6,zero
   13e70:	01cffc34 	movhi	r7,16368
   13e74:	00167580 	call	16758 <__ltdf2>
   13e78:	10041516 	blt	r2,zero,14ed0 <_dtoa_r+0x14d4>
   13e7c:	9009883a 	mov	r4,r18
   13e80:	0010a900 	call	10a90 <__floatsidf>
   13e84:	1009883a 	mov	r4,r2
   13e88:	180b883a 	mov	r5,r3
   13e8c:	980d883a 	mov	r6,r19
   13e90:	a00f883a 	mov	r7,r20
   13e94:	00161400 	call	16140 <__muldf3>
   13e98:	1009883a 	mov	r4,r2
   13e9c:	180b883a 	mov	r5,r3
   13ea0:	000d883a 	mov	r6,zero
   13ea4:	01d00734 	movhi	r7,16412
   13ea8:	001608c0 	call	1608c <__adddf3>
   13eac:	1025883a 	mov	r18,r2
   13eb0:	d8800917 	ldw	r2,36(sp)
   13eb4:	057f3034 	movhi	r21,64704
   13eb8:	1d6b883a 	add	r21,r3,r21
   13ebc:	10032426 	beq	r2,zero,14b50 <_dtoa_r+0x1154>
   13ec0:	d8800517 	ldw	r2,20(sp)
   13ec4:	dac00917 	ldw	r11,36(sp)
   13ec8:	d8801215 	stw	r2,72(sp)
   13ecc:	d8c00c17 	ldw	r3,48(sp)
   13ed0:	18039326 	beq	r3,zero,14d20 <_dtoa_r+0x1324>
   13ed4:	58bfffc4 	addi	r2,r11,-1
   13ed8:	100490fa 	slli	r2,r2,3
   13edc:	00c000b4 	movhi	r3,2
   13ee0:	18e24b04 	addi	r3,r3,-30420
   13ee4:	0009883a 	mov	r4,zero
   13ee8:	1885883a 	add	r2,r3,r2
   13eec:	11800017 	ldw	r6,0(r2)
   13ef0:	11c00117 	ldw	r7,4(r2)
   13ef4:	d8800717 	ldw	r2,28(sp)
   13ef8:	014ff834 	movhi	r5,16352
   13efc:	dac01615 	stw	r11,88(sp)
   13f00:	15800044 	addi	r22,r2,1
   13f04:	00164240 	call	16424 <__divdf3>
   13f08:	900d883a 	mov	r6,r18
   13f0c:	a80f883a 	mov	r7,r21
   13f10:	1009883a 	mov	r4,r2
   13f14:	180b883a 	mov	r5,r3
   13f18:	00160e00 	call	160e0 <__subdf3>
   13f1c:	a00b883a 	mov	r5,r20
   13f20:	9809883a 	mov	r4,r19
   13f24:	182b883a 	mov	r21,r3
   13f28:	d8801015 	stw	r2,64(sp)
   13f2c:	00168100 	call	16810 <__fixdfsi>
   13f30:	1009883a 	mov	r4,r2
   13f34:	d8801515 	stw	r2,84(sp)
   13f38:	0010a900 	call	10a90 <__floatsidf>
   13f3c:	9809883a 	mov	r4,r19
   13f40:	a00b883a 	mov	r5,r20
   13f44:	100d883a 	mov	r6,r2
   13f48:	180f883a 	mov	r7,r3
   13f4c:	00160e00 	call	160e0 <__subdf3>
   13f50:	da401517 	ldw	r9,84(sp)
   13f54:	1827883a 	mov	r19,r3
   13f58:	d8c00717 	ldw	r3,28(sp)
   13f5c:	d9001017 	ldw	r4,64(sp)
   13f60:	1025883a 	mov	r18,r2
   13f64:	4d000c04 	addi	r20,r9,48
   13f68:	1d000005 	stb	r20,0(r3)
   13f6c:	a80b883a 	mov	r5,r21
   13f70:	900d883a 	mov	r6,r18
   13f74:	980f883a 	mov	r7,r19
   13f78:	00166900 	call	16690 <__gtdf2>
   13f7c:	00842416 	blt	zero,r2,15010 <_dtoa_r+0x1614>
   13f80:	0009883a 	mov	r4,zero
   13f84:	014ffc34 	movhi	r5,16368
   13f88:	900d883a 	mov	r6,r18
   13f8c:	980f883a 	mov	r7,r19
   13f90:	00160e00 	call	160e0 <__subdf3>
   13f94:	d9001017 	ldw	r4,64(sp)
   13f98:	a80b883a 	mov	r5,r21
   13f9c:	100d883a 	mov	r6,r2
   13fa0:	180f883a 	mov	r7,r3
   13fa4:	00166900 	call	16690 <__gtdf2>
   13fa8:	dac01617 	ldw	r11,88(sp)
   13fac:	00841516 	blt	zero,r2,15004 <_dtoa_r+0x1608>
   13fb0:	00800044 	movi	r2,1
   13fb4:	12c06b0e 	bge	r2,r11,14164 <_dtoa_r+0x768>
   13fb8:	d9000717 	ldw	r4,28(sp)
   13fbc:	dc401115 	stw	r17,68(sp)
   13fc0:	dc401017 	ldw	r17,64(sp)
   13fc4:	22d7883a 	add	r11,r4,r11
   13fc8:	df001015 	stw	fp,64(sp)
   13fcc:	5839883a 	mov	fp,r11
   13fd0:	00000806 	br	13ff4 <_dtoa_r+0x5f8>
   13fd4:	00160e00 	call	160e0 <__subdf3>
   13fd8:	1009883a 	mov	r4,r2
   13fdc:	180b883a 	mov	r5,r3
   13fe0:	880d883a 	mov	r6,r17
   13fe4:	a80f883a 	mov	r7,r21
   13fe8:	00167580 	call	16758 <__ltdf2>
   13fec:	1003f016 	blt	r2,zero,14fb0 <_dtoa_r+0x15b4>
   13ff0:	b703f226 	beq	r22,fp,14fbc <_dtoa_r+0x15c0>
   13ff4:	8809883a 	mov	r4,r17
   13ff8:	a80b883a 	mov	r5,r21
   13ffc:	000d883a 	mov	r6,zero
   14000:	01d00934 	movhi	r7,16420
   14004:	00161400 	call	16140 <__muldf3>
   14008:	000d883a 	mov	r6,zero
   1400c:	01d00934 	movhi	r7,16420
   14010:	9009883a 	mov	r4,r18
   14014:	980b883a 	mov	r5,r19
   14018:	1023883a 	mov	r17,r2
   1401c:	182b883a 	mov	r21,r3
   14020:	00161400 	call	16140 <__muldf3>
   14024:	180b883a 	mov	r5,r3
   14028:	1009883a 	mov	r4,r2
   1402c:	1825883a 	mov	r18,r3
   14030:	1027883a 	mov	r19,r2
   14034:	00168100 	call	16810 <__fixdfsi>
   14038:	1009883a 	mov	r4,r2
   1403c:	1029883a 	mov	r20,r2
   14040:	0010a900 	call	10a90 <__floatsidf>
   14044:	9809883a 	mov	r4,r19
   14048:	900b883a 	mov	r5,r18
   1404c:	100d883a 	mov	r6,r2
   14050:	180f883a 	mov	r7,r3
   14054:	00160e00 	call	160e0 <__subdf3>
   14058:	a5000c04 	addi	r20,r20,48
   1405c:	b5000005 	stb	r20,0(r22)
   14060:	1009883a 	mov	r4,r2
   14064:	180b883a 	mov	r5,r3
   14068:	880d883a 	mov	r6,r17
   1406c:	a80f883a 	mov	r7,r21
   14070:	1025883a 	mov	r18,r2
   14074:	1827883a 	mov	r19,r3
   14078:	00167580 	call	16758 <__ltdf2>
   1407c:	b5800044 	addi	r22,r22,1
   14080:	0009883a 	mov	r4,zero
   14084:	014ffc34 	movhi	r5,16368
   14088:	900d883a 	mov	r6,r18
   1408c:	980f883a 	mov	r7,r19
   14090:	103fd00e 	bge	r2,zero,13fd4 <_dtoa_r+0x5d8>
   14094:	d9801217 	ldw	r6,72(sp)
   14098:	d9800515 	stw	r6,20(sp)
   1409c:	8009883a 	mov	r4,r16
   140a0:	b80b883a 	mov	r5,r23
   140a4:	00120e80 	call	120e8 <_Bfree>
   140a8:	d9c00517 	ldw	r7,20(sp)
   140ac:	d8c02217 	ldw	r3,136(sp)
   140b0:	d9002417 	ldw	r4,144(sp)
   140b4:	b0000005 	stb	zero,0(r22)
   140b8:	38800044 	addi	r2,r7,1
   140bc:	18800015 	stw	r2,0(r3)
   140c0:	20027926 	beq	r4,zero,14aa8 <_dtoa_r+0x10ac>
   140c4:	25800015 	stw	r22,0(r4)
   140c8:	d8800717 	ldw	r2,28(sp)
   140cc:	003e7e06 	br	13ac8 <_dtoa_r+0xcc>
   140d0:	00800434 	movhi	r2,16
   140d4:	10bfffc4 	addi	r2,r2,-1
   140d8:	90a4703a 	and	r18,r18,r2
   140dc:	903e8a1e 	bne	r18,zero,13b08 <_dtoa_r+0x10c>
   140e0:	008000b4 	movhi	r2,2
   140e4:	10a28004 	addi	r2,r2,-30208
   140e8:	003e8906 	br	13b10 <_dtoa_r+0x114>
   140ec:	10c00204 	addi	r3,r2,8
   140f0:	003e8c06 	br	13b24 <_dtoa_r+0x128>
   140f4:	01400434 	movhi	r5,16
   140f8:	297fffc4 	addi	r5,r5,-1
   140fc:	894a703a 	and	r5,r17,r5
   14100:	e009883a 	mov	r4,fp
   14104:	294ffc34 	orhi	r5,r5,16368
   14108:	a53f0044 	addi	r20,r20,-1023
   1410c:	dd400217 	ldw	r21,8(sp)
   14110:	d8000f15 	stw	zero,60(sp)
   14114:	003eaa06 	br	13bc0 <_dtoa_r+0x1c4>
   14118:	008000b4 	movhi	r2,2
   1411c:	10a28404 	addi	r2,r2,-30192
   14120:	003e6906 	br	13ac8 <_dtoa_r+0xcc>
   14124:	d8000315 	stw	zero,12(sp)
   14128:	84800417 	ldw	r18,16(r16)
   1412c:	8009883a 	mov	r4,r16
   14130:	000b883a 	mov	r5,zero
   14134:	90000115 	stw	zero,4(r18)
   14138:	001200c0 	call	1200c <_Balloc>
   1413c:	80c00417 	ldw	r3,16(r16)
   14140:	90800015 	stw	r2,0(r18)
   14144:	01bfffc4 	movi	r6,-1
   14148:	18c00017 	ldw	r3,0(r3)
   1414c:	01c00044 	movi	r7,1
   14150:	d9800915 	stw	r6,36(sp)
   14154:	d8c00715 	stw	r3,28(sp)
   14158:	d8002115 	stw	zero,132(sp)
   1415c:	d9800e15 	stw	r6,56(sp)
   14160:	d9c00c15 	stw	r7,48(sp)
   14164:	d8800117 	ldw	r2,4(sp)
   14168:	10008e16 	blt	r2,zero,143a4 <_dtoa_r+0x9a8>
   1416c:	d9000517 	ldw	r4,20(sp)
   14170:	00c00384 	movi	r3,14
   14174:	19008b16 	blt	r3,r4,143a4 <_dtoa_r+0x9a8>
   14178:	200490fa 	slli	r2,r4,3
   1417c:	d9802117 	ldw	r6,132(sp)
   14180:	00c000b4 	movhi	r3,2
   14184:	18e24b04 	addi	r3,r3,-30420
   14188:	1885883a 	add	r2,r3,r2
   1418c:	14800017 	ldw	r18,0(r2)
   14190:	14c00117 	ldw	r19,4(r2)
   14194:	3001cb16 	blt	r6,zero,148c4 <_dtoa_r+0xec8>
   14198:	900d883a 	mov	r6,r18
   1419c:	980f883a 	mov	r7,r19
   141a0:	e009883a 	mov	r4,fp
   141a4:	880b883a 	mov	r5,r17
   141a8:	00164240 	call	16424 <__divdf3>
   141ac:	180b883a 	mov	r5,r3
   141b0:	1009883a 	mov	r4,r2
   141b4:	00168100 	call	16810 <__fixdfsi>
   141b8:	1009883a 	mov	r4,r2
   141bc:	102b883a 	mov	r21,r2
   141c0:	0010a900 	call	10a90 <__floatsidf>
   141c4:	1009883a 	mov	r4,r2
   141c8:	180b883a 	mov	r5,r3
   141cc:	900d883a 	mov	r6,r18
   141d0:	980f883a 	mov	r7,r19
   141d4:	00161400 	call	16140 <__muldf3>
   141d8:	e009883a 	mov	r4,fp
   141dc:	880b883a 	mov	r5,r17
   141e0:	100d883a 	mov	r6,r2
   141e4:	180f883a 	mov	r7,r3
   141e8:	00160e00 	call	160e0 <__subdf3>
   141ec:	d9c00717 	ldw	r7,28(sp)
   141f0:	1009883a 	mov	r4,r2
   141f4:	a8800c04 	addi	r2,r21,48
   141f8:	38800005 	stb	r2,0(r7)
   141fc:	3d800044 	addi	r22,r7,1
   14200:	d9c00917 	ldw	r7,36(sp)
   14204:	01800044 	movi	r6,1
   14208:	180b883a 	mov	r5,r3
   1420c:	2005883a 	mov	r2,r4
   14210:	39803826 	beq	r7,r6,142f4 <_dtoa_r+0x8f8>
   14214:	000d883a 	mov	r6,zero
   14218:	01d00934 	movhi	r7,16420
   1421c:	00161400 	call	16140 <__muldf3>
   14220:	1009883a 	mov	r4,r2
   14224:	180b883a 	mov	r5,r3
   14228:	000d883a 	mov	r6,zero
   1422c:	000f883a 	mov	r7,zero
   14230:	1029883a 	mov	r20,r2
   14234:	1823883a 	mov	r17,r3
   14238:	00165d80 	call	165d8 <__eqdf2>
   1423c:	103f9726 	beq	r2,zero,1409c <_dtoa_r+0x6a0>
   14240:	df000917 	ldw	fp,36(sp)
   14244:	dd400717 	ldw	r21,28(sp)
   14248:	dc000315 	stw	r16,12(sp)
   1424c:	00000906 	br	14274 <_dtoa_r+0x878>
   14250:	00161400 	call	16140 <__muldf3>
   14254:	1009883a 	mov	r4,r2
   14258:	180b883a 	mov	r5,r3
   1425c:	000d883a 	mov	r6,zero
   14260:	000f883a 	mov	r7,zero
   14264:	1029883a 	mov	r20,r2
   14268:	1823883a 	mov	r17,r3
   1426c:	00165d80 	call	165d8 <__eqdf2>
   14270:	10022626 	beq	r2,zero,14b0c <_dtoa_r+0x1110>
   14274:	900d883a 	mov	r6,r18
   14278:	980f883a 	mov	r7,r19
   1427c:	a009883a 	mov	r4,r20
   14280:	880b883a 	mov	r5,r17
   14284:	00164240 	call	16424 <__divdf3>
   14288:	180b883a 	mov	r5,r3
   1428c:	1009883a 	mov	r4,r2
   14290:	00168100 	call	16810 <__fixdfsi>
   14294:	1009883a 	mov	r4,r2
   14298:	1021883a 	mov	r16,r2
   1429c:	0010a900 	call	10a90 <__floatsidf>
   142a0:	1009883a 	mov	r4,r2
   142a4:	180b883a 	mov	r5,r3
   142a8:	900d883a 	mov	r6,r18
   142ac:	980f883a 	mov	r7,r19
   142b0:	00161400 	call	16140 <__muldf3>
   142b4:	a009883a 	mov	r4,r20
   142b8:	880b883a 	mov	r5,r17
   142bc:	100d883a 	mov	r6,r2
   142c0:	180f883a 	mov	r7,r3
   142c4:	00160e00 	call	160e0 <__subdf3>
   142c8:	82400c04 	addi	r9,r16,48
   142cc:	b2400005 	stb	r9,0(r22)
   142d0:	b5800044 	addi	r22,r22,1
   142d4:	b553c83a 	sub	r9,r22,r21
   142d8:	000d883a 	mov	r6,zero
   142dc:	01d00934 	movhi	r7,16420
   142e0:	1009883a 	mov	r4,r2
   142e4:	180b883a 	mov	r5,r3
   142e8:	e27fd91e 	bne	fp,r9,14250 <_dtoa_r+0x854>
   142ec:	802b883a 	mov	r21,r16
   142f0:	dc000317 	ldw	r16,12(sp)
   142f4:	1009883a 	mov	r4,r2
   142f8:	180b883a 	mov	r5,r3
   142fc:	100d883a 	mov	r6,r2
   14300:	180f883a 	mov	r7,r3
   14304:	001608c0 	call	1608c <__adddf3>
   14308:	9009883a 	mov	r4,r18
   1430c:	980b883a 	mov	r5,r19
   14310:	100d883a 	mov	r6,r2
   14314:	180f883a 	mov	r7,r3
   14318:	1023883a 	mov	r17,r2
   1431c:	1829883a 	mov	r20,r3
   14320:	00167580 	call	16758 <__ltdf2>
   14324:	10000816 	blt	r2,zero,14348 <_dtoa_r+0x94c>
   14328:	9009883a 	mov	r4,r18
   1432c:	980b883a 	mov	r5,r19
   14330:	880d883a 	mov	r6,r17
   14334:	a00f883a 	mov	r7,r20
   14338:	00165d80 	call	165d8 <__eqdf2>
   1433c:	103f571e 	bne	r2,zero,1409c <_dtoa_r+0x6a0>
   14340:	ad40004c 	andi	r21,r21,1
   14344:	a83f5526 	beq	r21,zero,1409c <_dtoa_r+0x6a0>
   14348:	b53fffc3 	ldbu	r20,-1(r22)
   1434c:	b0ffff84 	addi	r3,r22,-2
   14350:	01400e44 	movi	r5,57
   14354:	d9800717 	ldw	r6,28(sp)
   14358:	00000306 	br	14368 <_dtoa_r+0x96c>
   1435c:	1d000003 	ldbu	r20,0(r3)
   14360:	102d883a 	mov	r22,r2
   14364:	18ffffc4 	addi	r3,r3,-1
   14368:	a1003fcc 	andi	r4,r20,255
   1436c:	2100201c 	xori	r4,r4,128
   14370:	213fe004 	addi	r4,r4,-128
   14374:	b0bfffc4 	addi	r2,r22,-1
   14378:	2142c81e 	bne	r4,r5,14e9c <_dtoa_r+0x14a0>
   1437c:	11bff71e 	bne	r2,r6,1435c <_dtoa_r+0x960>
   14380:	d8c00517 	ldw	r3,20(sp)
   14384:	d9000717 	ldw	r4,28(sp)
   14388:	05000c44 	movi	r20,49
   1438c:	18c00044 	addi	r3,r3,1
   14390:	d8c00515 	stw	r3,20(sp)
   14394:	00c00c04 	movi	r3,48
   14398:	20c00005 	stb	r3,0(r4)
   1439c:	15000005 	stb	r20,0(r2)
   143a0:	003f3e06 	br	1409c <_dtoa_r+0x6a0>
   143a4:	d8c00c17 	ldw	r3,48(sp)
   143a8:	1800d226 	beq	r3,zero,146f4 <_dtoa_r+0xcf8>
   143ac:	d9c00317 	ldw	r7,12(sp)
   143b0:	00c00044 	movi	r3,1
   143b4:	19c16b0e 	bge	r3,r7,14964 <_dtoa_r+0xf68>
   143b8:	d9000917 	ldw	r4,36(sp)
   143bc:	d9800a17 	ldw	r6,40(sp)
   143c0:	24ffffc4 	addi	r19,r4,-1
   143c4:	34c20316 	blt	r6,r19,14bd4 <_dtoa_r+0x11d8>
   143c8:	34e7c83a 	sub	r19,r6,r19
   143cc:	d8800917 	ldw	r2,36(sp)
   143d0:	1002ac16 	blt	r2,zero,14e84 <_dtoa_r+0x1488>
   143d4:	dc800817 	ldw	r18,32(sp)
   143d8:	d8800917 	ldw	r2,36(sp)
   143dc:	d9800817 	ldw	r6,32(sp)
   143e0:	8009883a 	mov	r4,r16
   143e4:	01400044 	movi	r5,1
   143e8:	308d883a 	add	r6,r6,r2
   143ec:	d9800815 	stw	r6,32(sp)
   143f0:	d9800617 	ldw	r6,24(sp)
   143f4:	308d883a 	add	r6,r6,r2
   143f8:	d9800615 	stw	r6,24(sp)
   143fc:	00124ac0 	call	124ac <__i2b>
   14400:	102b883a 	mov	r21,r2
   14404:	90000b26 	beq	r18,zero,14434 <_dtoa_r+0xa38>
   14408:	d9800617 	ldw	r6,24(sp)
   1440c:	0180090e 	bge	zero,r6,14434 <_dtoa_r+0xa38>
   14410:	3005883a 	mov	r2,r6
   14414:	91812916 	blt	r18,r6,148bc <_dtoa_r+0xec0>
   14418:	d9800817 	ldw	r6,32(sp)
   1441c:	90a5c83a 	sub	r18,r18,r2
   14420:	308dc83a 	sub	r6,r6,r2
   14424:	d9800815 	stw	r6,32(sp)
   14428:	d9800617 	ldw	r6,24(sp)
   1442c:	308dc83a 	sub	r6,r6,r2
   14430:	d9800615 	stw	r6,24(sp)
   14434:	d9800a17 	ldw	r6,40(sp)
   14438:	0180140e 	bge	zero,r6,1448c <_dtoa_r+0xa90>
   1443c:	d9c00c17 	ldw	r7,48(sp)
   14440:	3801d926 	beq	r7,zero,14ba8 <_dtoa_r+0x11ac>
   14444:	04c00e0e 	bge	zero,r19,14480 <_dtoa_r+0xa84>
   14448:	a80b883a 	mov	r5,r21
   1444c:	8009883a 	mov	r4,r16
   14450:	980d883a 	mov	r6,r19
   14454:	00127400 	call	12740 <__pow5mult>
   14458:	b80d883a 	mov	r6,r23
   1445c:	8009883a 	mov	r4,r16
   14460:	100b883a 	mov	r5,r2
   14464:	102b883a 	mov	r21,r2
   14468:	00124e80 	call	124e8 <__multiply>
   1446c:	1029883a 	mov	r20,r2
   14470:	b80b883a 	mov	r5,r23
   14474:	8009883a 	mov	r4,r16
   14478:	00120e80 	call	120e8 <_Bfree>
   1447c:	a02f883a 	mov	r23,r20
   14480:	d8800a17 	ldw	r2,40(sp)
   14484:	14cdc83a 	sub	r6,r2,r19
   14488:	3001271e 	bne	r6,zero,14928 <_dtoa_r+0xf2c>
   1448c:	8009883a 	mov	r4,r16
   14490:	01400044 	movi	r5,1
   14494:	00124ac0 	call	124ac <__i2b>
   14498:	d8c00b17 	ldw	r3,44(sp)
   1449c:	1029883a 	mov	r20,r2
   144a0:	00c0050e 	bge	zero,r3,144b8 <_dtoa_r+0xabc>
   144a4:	8009883a 	mov	r4,r16
   144a8:	100b883a 	mov	r5,r2
   144ac:	180d883a 	mov	r6,r3
   144b0:	00127400 	call	12740 <__pow5mult>
   144b4:	1029883a 	mov	r20,r2
   144b8:	d9c00317 	ldw	r7,12(sp)
   144bc:	00800044 	movi	r2,1
   144c0:	11c0ef0e 	bge	r2,r7,14880 <_dtoa_r+0xe84>
   144c4:	0023883a 	mov	r17,zero
   144c8:	d9c00b17 	ldw	r7,44(sp)
   144cc:	38015a1e 	bne	r7,zero,14a38 <_dtoa_r+0x103c>
   144d0:	00800044 	movi	r2,1
   144d4:	d9800617 	ldw	r6,24(sp)
   144d8:	1185883a 	add	r2,r2,r6
   144dc:	108007cc 	andi	r2,r2,31
   144e0:	10008826 	beq	r2,zero,14704 <_dtoa_r+0xd08>
   144e4:	01000804 	movi	r4,32
   144e8:	2089c83a 	sub	r4,r4,r2
   144ec:	00c00104 	movi	r3,4
   144f0:	1902cc0e 	bge	r3,r4,15024 <_dtoa_r+0x1628>
   144f4:	00c00704 	movi	r3,28
   144f8:	1885c83a 	sub	r2,r3,r2
   144fc:	d9800817 	ldw	r6,32(sp)
   14500:	90a5883a 	add	r18,r18,r2
   14504:	308d883a 	add	r6,r6,r2
   14508:	d9800815 	stw	r6,32(sp)
   1450c:	d9800617 	ldw	r6,24(sp)
   14510:	308d883a 	add	r6,r6,r2
   14514:	d9800615 	stw	r6,24(sp)
   14518:	d9800817 	ldw	r6,32(sp)
   1451c:	0180040e 	bge	zero,r6,14530 <_dtoa_r+0xb34>
   14520:	b80b883a 	mov	r5,r23
   14524:	8009883a 	mov	r4,r16
   14528:	00128840 	call	12884 <__lshift>
   1452c:	102f883a 	mov	r23,r2
   14530:	d9800617 	ldw	r6,24(sp)
   14534:	0180040e 	bge	zero,r6,14548 <_dtoa_r+0xb4c>
   14538:	a00b883a 	mov	r5,r20
   1453c:	8009883a 	mov	r4,r16
   14540:	00128840 	call	12884 <__lshift>
   14544:	1029883a 	mov	r20,r2
   14548:	d9c00d17 	ldw	r7,52(sp)
   1454c:	3801441e 	bne	r7,zero,14a60 <_dtoa_r+0x1064>
   14550:	d9c00917 	ldw	r7,36(sp)
   14554:	01c1560e 	bge	zero,r7,14ab0 <_dtoa_r+0x10b4>
   14558:	d8c00c17 	ldw	r3,48(sp)
   1455c:	1800711e 	bne	r3,zero,14724 <_dtoa_r+0xd28>
   14560:	dc400717 	ldw	r17,28(sp)
   14564:	dc800917 	ldw	r18,36(sp)
   14568:	8827883a 	mov	r19,r17
   1456c:	00000206 	br	14578 <_dtoa_r+0xb7c>
   14570:	00121600 	call	12160 <__multadd>
   14574:	102f883a 	mov	r23,r2
   14578:	b809883a 	mov	r4,r23
   1457c:	a00b883a 	mov	r5,r20
   14580:	00137c00 	call	137c0 <quorem>
   14584:	10800c04 	addi	r2,r2,48
   14588:	88800005 	stb	r2,0(r17)
   1458c:	8c400044 	addi	r17,r17,1
   14590:	8cc7c83a 	sub	r3,r17,r19
   14594:	8009883a 	mov	r4,r16
   14598:	b80b883a 	mov	r5,r23
   1459c:	01800284 	movi	r6,10
   145a0:	000f883a 	mov	r7,zero
   145a4:	1cbff216 	blt	r3,r18,14570 <_dtoa_r+0xb74>
   145a8:	dd800917 	ldw	r22,36(sp)
   145ac:	1039883a 	mov	fp,r2
   145b0:	0582380e 	bge	zero,r22,14e94 <_dtoa_r+0x1498>
   145b4:	d9000717 	ldw	r4,28(sp)
   145b8:	0023883a 	mov	r17,zero
   145bc:	25ad883a 	add	r22,r4,r22
   145c0:	b80b883a 	mov	r5,r23
   145c4:	8009883a 	mov	r4,r16
   145c8:	01800044 	movi	r6,1
   145cc:	00128840 	call	12884 <__lshift>
   145d0:	1009883a 	mov	r4,r2
   145d4:	a00b883a 	mov	r5,r20
   145d8:	102f883a 	mov	r23,r2
   145dc:	00129d40 	call	129d4 <__mcmp>
   145e0:	0080d60e 	bge	zero,r2,1493c <_dtoa_r+0xf40>
   145e4:	b13fffc3 	ldbu	r4,-1(r22)
   145e8:	b0ffff84 	addi	r3,r22,-2
   145ec:	01800e44 	movi	r6,57
   145f0:	d9c00717 	ldw	r7,28(sp)
   145f4:	00000306 	br	14604 <_dtoa_r+0xc08>
   145f8:	19000003 	ldbu	r4,0(r3)
   145fc:	102d883a 	mov	r22,r2
   14600:	18ffffc4 	addi	r3,r3,-1
   14604:	21403fcc 	andi	r5,r4,255
   14608:	2940201c 	xori	r5,r5,128
   1460c:	297fe004 	addi	r5,r5,-128
   14610:	b0bfffc4 	addi	r2,r22,-1
   14614:	2981b31e 	bne	r5,r6,14ce4 <_dtoa_r+0x12e8>
   14618:	11fff71e 	bne	r2,r7,145f8 <_dtoa_r+0xbfc>
   1461c:	d8800517 	ldw	r2,20(sp)
   14620:	d8c00717 	ldw	r3,28(sp)
   14624:	10800044 	addi	r2,r2,1
   14628:	d8800515 	stw	r2,20(sp)
   1462c:	00800c44 	movi	r2,49
   14630:	18800005 	stb	r2,0(r3)
   14634:	8009883a 	mov	r4,r16
   14638:	a00b883a 	mov	r5,r20
   1463c:	00120e80 	call	120e8 <_Bfree>
   14640:	a83e9626 	beq	r21,zero,1409c <_dtoa_r+0x6a0>
   14644:	88000426 	beq	r17,zero,14658 <_dtoa_r+0xc5c>
   14648:	8d400326 	beq	r17,r21,14658 <_dtoa_r+0xc5c>
   1464c:	8009883a 	mov	r4,r16
   14650:	880b883a 	mov	r5,r17
   14654:	00120e80 	call	120e8 <_Bfree>
   14658:	8009883a 	mov	r4,r16
   1465c:	a80b883a 	mov	r5,r21
   14660:	00120e80 	call	120e8 <_Bfree>
   14664:	003e8d06 	br	1409c <_dtoa_r+0x6a0>
   14668:	00c00044 	movi	r3,1
   1466c:	d8c00d15 	stw	r3,52(sp)
   14670:	003d9106 	br	13cb8 <_dtoa_r+0x2bc>
   14674:	01000404 	movi	r4,16
   14678:	00154400 	call	15440 <malloc>
   1467c:	80800415 	stw	r2,16(r16)
   14680:	10000115 	stw	zero,4(r2)
   14684:	10000215 	stw	zero,8(r2)
   14688:	10000015 	stw	zero,0(r2)
   1468c:	10000315 	stw	zero,12(r2)
   14690:	003cf806 	br	13a74 <_dtoa_r+0x78>
   14694:	d9000517 	ldw	r4,20(sp)
   14698:	0010a900 	call	10a90 <__floatsidf>
   1469c:	1009883a 	mov	r4,r2
   146a0:	180b883a 	mov	r5,r3
   146a4:	980d883a 	mov	r6,r19
   146a8:	900f883a 	mov	r7,r18
   146ac:	00166340 	call	16634 <__nedf2>
   146b0:	103d7026 	beq	r2,zero,13c74 <_dtoa_r+0x278>
   146b4:	d8800517 	ldw	r2,20(sp)
   146b8:	10bfffc4 	addi	r2,r2,-1
   146bc:	d8800515 	stw	r2,20(sp)
   146c0:	003d6c06 	br	13c74 <_dtoa_r+0x278>
   146c4:	d9800817 	ldw	r6,32(sp)
   146c8:	d8800517 	ldw	r2,20(sp)
   146cc:	d8000b15 	stw	zero,44(sp)
   146d0:	308dc83a 	sub	r6,r6,r2
   146d4:	d9800815 	stw	r6,32(sp)
   146d8:	008dc83a 	sub	r6,zero,r2
   146dc:	d9800a15 	stw	r6,40(sp)
   146e0:	003d8106 	br	13ce8 <_dtoa_r+0x2ec>
   146e4:	0529c83a 	sub	r20,zero,r20
   146e8:	dd000815 	stw	r20,32(sp)
   146ec:	d8000615 	stw	zero,24(sp)
   146f0:	003d7606 	br	13ccc <_dtoa_r+0x2d0>
   146f4:	dcc00a17 	ldw	r19,40(sp)
   146f8:	dc800817 	ldw	r18,32(sp)
   146fc:	002b883a 	mov	r21,zero
   14700:	003f4006 	br	14404 <_dtoa_r+0xa08>
   14704:	00800704 	movi	r2,28
   14708:	003f7c06 	br	144fc <_dtoa_r+0xb00>
   1470c:	013efb84 	movi	r4,-1042
   14710:	2509c83a 	sub	r4,r4,r20
   14714:	e108983a 	sll	r4,fp,r4
   14718:	003d2206 	br	13ba4 <_dtoa_r+0x1a8>
   1471c:	d8000d15 	stw	zero,52(sp)
   14720:	003d6506 	br	13cb8 <_dtoa_r+0x2bc>
   14724:	0480050e 	bge	zero,r18,1473c <_dtoa_r+0xd40>
   14728:	a80b883a 	mov	r5,r21
   1472c:	8009883a 	mov	r4,r16
   14730:	900d883a 	mov	r6,r18
   14734:	00128840 	call	12884 <__lshift>
   14738:	102b883a 	mov	r21,r2
   1473c:	8801581e 	bne	r17,zero,14ca0 <_dtoa_r+0x12a4>
   14740:	a827883a 	mov	r19,r21
   14744:	d9000717 	ldw	r4,28(sp)
   14748:	d9800917 	ldw	r6,36(sp)
   1474c:	e700004c 	andi	fp,fp,1
   14750:	20bfffc4 	addi	r2,r4,-1
   14754:	1185883a 	add	r2,r2,r6
   14758:	2025883a 	mov	r18,r4
   1475c:	d8800415 	stw	r2,16(sp)
   14760:	a823883a 	mov	r17,r21
   14764:	df000615 	stw	fp,24(sp)
   14768:	b809883a 	mov	r4,r23
   1476c:	a00b883a 	mov	r5,r20
   14770:	00137c00 	call	137c0 <quorem>
   14774:	b809883a 	mov	r4,r23
   14778:	880b883a 	mov	r5,r17
   1477c:	102d883a 	mov	r22,r2
   14780:	00129d40 	call	129d4 <__mcmp>
   14784:	8009883a 	mov	r4,r16
   14788:	a00b883a 	mov	r5,r20
   1478c:	980d883a 	mov	r6,r19
   14790:	102b883a 	mov	r21,r2
   14794:	0012a2c0 	call	12a2c <__mdiff>
   14798:	1007883a 	mov	r3,r2
   1479c:	10800317 	ldw	r2,12(r2)
   147a0:	b7000c04 	addi	fp,r22,48
   147a4:	10008726 	beq	r2,zero,149c4 <_dtoa_r+0xfc8>
   147a8:	8009883a 	mov	r4,r16
   147ac:	180b883a 	mov	r5,r3
   147b0:	00120e80 	call	120e8 <_Bfree>
   147b4:	00800044 	movi	r2,1
   147b8:	a8007016 	blt	r21,zero,1497c <_dtoa_r+0xf80>
   147bc:	a800041e 	bne	r21,zero,147d0 <_dtoa_r+0xdd4>
   147c0:	d9c00317 	ldw	r7,12(sp)
   147c4:	3800021e 	bne	r7,zero,147d0 <_dtoa_r+0xdd4>
   147c8:	d8c00617 	ldw	r3,24(sp)
   147cc:	18006b26 	beq	r3,zero,1497c <_dtoa_r+0xf80>
   147d0:	00814716 	blt	zero,r2,14cf0 <_dtoa_r+0x12f4>
   147d4:	d8c00417 	ldw	r3,16(sp)
   147d8:	95400044 	addi	r21,r18,1
   147dc:	97000005 	stb	fp,0(r18)
   147e0:	a82d883a 	mov	r22,r21
   147e4:	90c14926 	beq	r18,r3,14d0c <_dtoa_r+0x1310>
   147e8:	b80b883a 	mov	r5,r23
   147ec:	8009883a 	mov	r4,r16
   147f0:	01800284 	movi	r6,10
   147f4:	000f883a 	mov	r7,zero
   147f8:	00121600 	call	12160 <__multadd>
   147fc:	102f883a 	mov	r23,r2
   14800:	8cc08426 	beq	r17,r19,14a14 <_dtoa_r+0x1018>
   14804:	880b883a 	mov	r5,r17
   14808:	01800284 	movi	r6,10
   1480c:	000f883a 	mov	r7,zero
   14810:	8009883a 	mov	r4,r16
   14814:	00121600 	call	12160 <__multadd>
   14818:	980b883a 	mov	r5,r19
   1481c:	8009883a 	mov	r4,r16
   14820:	01800284 	movi	r6,10
   14824:	000f883a 	mov	r7,zero
   14828:	1023883a 	mov	r17,r2
   1482c:	00121600 	call	12160 <__multadd>
   14830:	1027883a 	mov	r19,r2
   14834:	a825883a 	mov	r18,r21
   14838:	003fcb06 	br	14768 <_dtoa_r+0xd6c>
   1483c:	d9c00317 	ldw	r7,12(sp)
   14840:	00800104 	movi	r2,4
   14844:	3880de26 	beq	r7,r2,14bc0 <_dtoa_r+0x11c4>
   14848:	00800144 	movi	r2,5
   1484c:	38be361e 	bne	r7,r2,14128 <_dtoa_r+0x72c>
   14850:	00c00044 	movi	r3,1
   14854:	d8c00c15 	stw	r3,48(sp)
   14858:	d9802117 	ldw	r6,132(sp)
   1485c:	d8800517 	ldw	r2,20(sp)
   14860:	308d883a 	add	r6,r6,r2
   14864:	34800044 	addi	r18,r6,1
   14868:	d9800e15 	stw	r6,56(sp)
   1486c:	dc800915 	stw	r18,36(sp)
   14870:	04bd3116 	blt	zero,r18,13d38 <_dtoa_r+0x33c>
   14874:	84c00417 	ldw	r19,16(r16)
   14878:	98000115 	stw	zero,4(r19)
   1487c:	003d3a06 	br	13d68 <_dtoa_r+0x36c>
   14880:	e03f101e 	bne	fp,zero,144c4 <_dtoa_r+0xac8>
   14884:	00c00434 	movhi	r3,16
   14888:	18ffffc4 	addi	r3,r3,-1
   1488c:	88c6703a 	and	r3,r17,r3
   14890:	183f0c1e 	bne	r3,zero,144c4 <_dtoa_r+0xac8>
   14894:	8c5ffc2c 	andhi	r17,r17,32752
   14898:	883f0a26 	beq	r17,zero,144c4 <_dtoa_r+0xac8>
   1489c:	d9800817 	ldw	r6,32(sp)
   148a0:	1023883a 	mov	r17,r2
   148a4:	308d883a 	add	r6,r6,r2
   148a8:	d9800815 	stw	r6,32(sp)
   148ac:	d9800617 	ldw	r6,24(sp)
   148b0:	308d883a 	add	r6,r6,r2
   148b4:	d9800615 	stw	r6,24(sp)
   148b8:	003f0306 	br	144c8 <_dtoa_r+0xacc>
   148bc:	9005883a 	mov	r2,r18
   148c0:	003ed506 	br	14418 <_dtoa_r+0xa1c>
   148c4:	d8800917 	ldw	r2,36(sp)
   148c8:	00be3316 	blt	zero,r2,14198 <_dtoa_r+0x79c>
   148cc:	1000b31e 	bne	r2,zero,14b9c <_dtoa_r+0x11a0>
   148d0:	9009883a 	mov	r4,r18
   148d4:	980b883a 	mov	r5,r19
   148d8:	000d883a 	mov	r6,zero
   148dc:	01d00534 	movhi	r7,16404
   148e0:	00161400 	call	16140 <__muldf3>
   148e4:	1009883a 	mov	r4,r2
   148e8:	180b883a 	mov	r5,r3
   148ec:	e00d883a 	mov	r6,fp
   148f0:	880f883a 	mov	r7,r17
   148f4:	00166f40 	call	166f4 <__gedf2>
   148f8:	0029883a 	mov	r20,zero
   148fc:	002b883a 	mov	r21,zero
   14900:	10007a16 	blt	r2,zero,14aec <_dtoa_r+0x10f0>
   14904:	d8802117 	ldw	r2,132(sp)
   14908:	dd800717 	ldw	r22,28(sp)
   1490c:	0084303a 	nor	r2,zero,r2
   14910:	d8800515 	stw	r2,20(sp)
   14914:	8009883a 	mov	r4,r16
   14918:	a00b883a 	mov	r5,r20
   1491c:	00120e80 	call	120e8 <_Bfree>
   14920:	a83f4d1e 	bne	r21,zero,14658 <_dtoa_r+0xc5c>
   14924:	003ddd06 	br	1409c <_dtoa_r+0x6a0>
   14928:	b80b883a 	mov	r5,r23
   1492c:	8009883a 	mov	r4,r16
   14930:	00127400 	call	12740 <__pow5mult>
   14934:	102f883a 	mov	r23,r2
   14938:	003ed406 	br	1448c <_dtoa_r+0xa90>
   1493c:	1000021e 	bne	r2,zero,14948 <_dtoa_r+0xf4c>
   14940:	e0c0004c 	andi	r3,fp,1
   14944:	183f271e 	bne	r3,zero,145e4 <_dtoa_r+0xbe8>
   14948:	01000c04 	movi	r4,48
   1494c:	00000106 	br	14954 <_dtoa_r+0xf58>
   14950:	102d883a 	mov	r22,r2
   14954:	b0bfffc4 	addi	r2,r22,-1
   14958:	10c00007 	ldb	r3,0(r2)
   1495c:	193ffc26 	beq	r3,r4,14950 <_dtoa_r+0xf54>
   14960:	003f3406 	br	14634 <_dtoa_r+0xc38>
   14964:	d8c00f17 	ldw	r3,60(sp)
   14968:	18014f26 	beq	r3,zero,14ea8 <_dtoa_r+0x14ac>
   1496c:	10810cc4 	addi	r2,r2,1075
   14970:	dcc00a17 	ldw	r19,40(sp)
   14974:	dc800817 	ldw	r18,32(sp)
   14978:	003e9806 	br	143dc <_dtoa_r+0x9e0>
   1497c:	e02b883a 	mov	r21,fp
   14980:	00800c0e 	bge	zero,r2,149b4 <_dtoa_r+0xfb8>
   14984:	b80b883a 	mov	r5,r23
   14988:	8009883a 	mov	r4,r16
   1498c:	01800044 	movi	r6,1
   14990:	00128840 	call	12884 <__lshift>
   14994:	1009883a 	mov	r4,r2
   14998:	a00b883a 	mov	r5,r20
   1499c:	102f883a 	mov	r23,r2
   149a0:	00129d40 	call	129d4 <__mcmp>
   149a4:	0081880e 	bge	zero,r2,14fc8 <_dtoa_r+0x15cc>
   149a8:	00800e44 	movi	r2,57
   149ac:	b7000c44 	addi	fp,r22,49
   149b0:	a8816626 	beq	r21,r2,14f4c <_dtoa_r+0x1550>
   149b4:	97000005 	stb	fp,0(r18)
   149b8:	95800044 	addi	r22,r18,1
   149bc:	982b883a 	mov	r21,r19
   149c0:	003f1c06 	br	14634 <_dtoa_r+0xc38>
   149c4:	180b883a 	mov	r5,r3
   149c8:	b809883a 	mov	r4,r23
   149cc:	d8c01515 	stw	r3,84(sp)
   149d0:	00129d40 	call	129d4 <__mcmp>
   149d4:	d8c01517 	ldw	r3,84(sp)
   149d8:	8009883a 	mov	r4,r16
   149dc:	d8801515 	stw	r2,84(sp)
   149e0:	180b883a 	mov	r5,r3
   149e4:	00120e80 	call	120e8 <_Bfree>
   149e8:	d8801517 	ldw	r2,84(sp)
   149ec:	103f721e 	bne	r2,zero,147b8 <_dtoa_r+0xdbc>
   149f0:	d9c00317 	ldw	r7,12(sp)
   149f4:	383f701e 	bne	r7,zero,147b8 <_dtoa_r+0xdbc>
   149f8:	d8c00617 	ldw	r3,24(sp)
   149fc:	183f6e1e 	bne	r3,zero,147b8 <_dtoa_r+0xdbc>
   14a00:	00800e44 	movi	r2,57
   14a04:	e0815126 	beq	fp,r2,14f4c <_dtoa_r+0x1550>
   14a08:	057fea0e 	bge	zero,r21,149b4 <_dtoa_r+0xfb8>
   14a0c:	b7000c44 	addi	fp,r22,49
   14a10:	003fe806 	br	149b4 <_dtoa_r+0xfb8>
   14a14:	880b883a 	mov	r5,r17
   14a18:	8009883a 	mov	r4,r16
   14a1c:	01800284 	movi	r6,10
   14a20:	000f883a 	mov	r7,zero
   14a24:	00121600 	call	12160 <__multadd>
   14a28:	1023883a 	mov	r17,r2
   14a2c:	1027883a 	mov	r19,r2
   14a30:	a825883a 	mov	r18,r21
   14a34:	003f4c06 	br	14768 <_dtoa_r+0xd6c>
   14a38:	a0800417 	ldw	r2,16(r20)
   14a3c:	10800104 	addi	r2,r2,4
   14a40:	1085883a 	add	r2,r2,r2
   14a44:	1085883a 	add	r2,r2,r2
   14a48:	a085883a 	add	r2,r20,r2
   14a4c:	11000017 	ldw	r4,0(r2)
   14a50:	00123940 	call	12394 <__hi0bits>
   14a54:	00c00804 	movi	r3,32
   14a58:	1885c83a 	sub	r2,r3,r2
   14a5c:	003e9d06 	br	144d4 <_dtoa_r+0xad8>
   14a60:	b809883a 	mov	r4,r23
   14a64:	a00b883a 	mov	r5,r20
   14a68:	00129d40 	call	129d4 <__mcmp>
   14a6c:	103eb80e 	bge	r2,zero,14550 <_dtoa_r+0xb54>
   14a70:	b80b883a 	mov	r5,r23
   14a74:	8009883a 	mov	r4,r16
   14a78:	01800284 	movi	r6,10
   14a7c:	000f883a 	mov	r7,zero
   14a80:	00121600 	call	12160 <__multadd>
   14a84:	102f883a 	mov	r23,r2
   14a88:	d8800517 	ldw	r2,20(sp)
   14a8c:	d8c00c17 	ldw	r3,48(sp)
   14a90:	10bfffc4 	addi	r2,r2,-1
   14a94:	d8800515 	stw	r2,20(sp)
   14a98:	18014f1e 	bne	r3,zero,14fd8 <_dtoa_r+0x15dc>
   14a9c:	d9800e17 	ldw	r6,56(sp)
   14aa0:	d9800915 	stw	r6,36(sp)
   14aa4:	003eaa06 	br	14550 <_dtoa_r+0xb54>
   14aa8:	d8800717 	ldw	r2,28(sp)
   14aac:	003c0606 	br	13ac8 <_dtoa_r+0xcc>
   14ab0:	d9c00317 	ldw	r7,12(sp)
   14ab4:	00800084 	movi	r2,2
   14ab8:	11fea70e 	bge	r2,r7,14558 <_dtoa_r+0xb5c>
   14abc:	d8800917 	ldw	r2,36(sp)
   14ac0:	103f901e 	bne	r2,zero,14904 <_dtoa_r+0xf08>
   14ac4:	a00b883a 	mov	r5,r20
   14ac8:	8009883a 	mov	r4,r16
   14acc:	01800144 	movi	r6,5
   14ad0:	000f883a 	mov	r7,zero
   14ad4:	00121600 	call	12160 <__multadd>
   14ad8:	b809883a 	mov	r4,r23
   14adc:	100b883a 	mov	r5,r2
   14ae0:	1029883a 	mov	r20,r2
   14ae4:	00129d40 	call	129d4 <__mcmp>
   14ae8:	00bf860e 	bge	zero,r2,14904 <_dtoa_r+0xf08>
   14aec:	d8c00717 	ldw	r3,28(sp)
   14af0:	00800c44 	movi	r2,49
   14af4:	18800005 	stb	r2,0(r3)
   14af8:	d8800517 	ldw	r2,20(sp)
   14afc:	1d800044 	addi	r22,r3,1
   14b00:	10800044 	addi	r2,r2,1
   14b04:	d8800515 	stw	r2,20(sp)
   14b08:	003f8206 	br	14914 <_dtoa_r+0xf18>
   14b0c:	dc000317 	ldw	r16,12(sp)
   14b10:	003d6206 	br	1409c <_dtoa_r+0x6a0>
   14b14:	9009883a 	mov	r4,r18
   14b18:	0010a900 	call	10a90 <__floatsidf>
   14b1c:	1009883a 	mov	r4,r2
   14b20:	180b883a 	mov	r5,r3
   14b24:	980d883a 	mov	r6,r19
   14b28:	a00f883a 	mov	r7,r20
   14b2c:	00161400 	call	16140 <__muldf3>
   14b30:	1009883a 	mov	r4,r2
   14b34:	180b883a 	mov	r5,r3
   14b38:	000d883a 	mov	r6,zero
   14b3c:	01d00734 	movhi	r7,16412
   14b40:	001608c0 	call	1608c <__adddf3>
   14b44:	057f3034 	movhi	r21,64704
   14b48:	1025883a 	mov	r18,r2
   14b4c:	1d6b883a 	add	r21,r3,r21
   14b50:	9809883a 	mov	r4,r19
   14b54:	a00b883a 	mov	r5,r20
   14b58:	000d883a 	mov	r6,zero
   14b5c:	01d00534 	movhi	r7,16404
   14b60:	00160e00 	call	160e0 <__subdf3>
   14b64:	1009883a 	mov	r4,r2
   14b68:	180b883a 	mov	r5,r3
   14b6c:	900d883a 	mov	r6,r18
   14b70:	a80f883a 	mov	r7,r21
   14b74:	1027883a 	mov	r19,r2
   14b78:	1829883a 	mov	r20,r3
   14b7c:	00166900 	call	16690 <__gtdf2>
   14b80:	00806416 	blt	zero,r2,14d14 <_dtoa_r+0x1318>
   14b84:	a9e0003c 	xorhi	r7,r21,32768
   14b88:	9809883a 	mov	r4,r19
   14b8c:	a00b883a 	mov	r5,r20
   14b90:	900d883a 	mov	r6,r18
   14b94:	00167580 	call	16758 <__ltdf2>
   14b98:	103d720e 	bge	r2,zero,14164 <_dtoa_r+0x768>
   14b9c:	0029883a 	mov	r20,zero
   14ba0:	002b883a 	mov	r21,zero
   14ba4:	003f5706 	br	14904 <_dtoa_r+0xf08>
   14ba8:	d9800a17 	ldw	r6,40(sp)
   14bac:	b80b883a 	mov	r5,r23
   14bb0:	8009883a 	mov	r4,r16
   14bb4:	00127400 	call	12740 <__pow5mult>
   14bb8:	102f883a 	mov	r23,r2
   14bbc:	003e3306 	br	1448c <_dtoa_r+0xa90>
   14bc0:	00800044 	movi	r2,1
   14bc4:	d8800c15 	stw	r2,48(sp)
   14bc8:	003c5606 	br	13d24 <_dtoa_r+0x328>
   14bcc:	d8000c15 	stw	zero,48(sp)
   14bd0:	003f2106 	br	14858 <_dtoa_r+0xe5c>
   14bd4:	d9800a17 	ldw	r6,40(sp)
   14bd8:	d9c00b17 	ldw	r7,44(sp)
   14bdc:	dcc00a15 	stw	r19,40(sp)
   14be0:	9985c83a 	sub	r2,r19,r6
   14be4:	388f883a 	add	r7,r7,r2
   14be8:	d9c00b15 	stw	r7,44(sp)
   14bec:	0027883a 	mov	r19,zero
   14bf0:	003df606 	br	143cc <_dtoa_r+0x9d0>
   14bf4:	df001015 	stw	fp,64(sp)
   14bf8:	8829883a 	mov	r20,r17
   14bfc:	04800084 	movi	r18,2
   14c00:	003c7d06 	br	13df8 <_dtoa_r+0x3fc>
   14c04:	04800044 	movi	r18,1
   14c08:	dc800e15 	stw	r18,56(sp)
   14c0c:	dc800915 	stw	r18,36(sp)
   14c10:	dc802115 	stw	r18,132(sp)
   14c14:	003f1706 	br	14874 <_dtoa_r+0xe78>
   14c18:	d8800517 	ldw	r2,20(sp)
   14c1c:	00abc83a 	sub	r21,zero,r2
   14c20:	a800a726 	beq	r21,zero,14ec0 <_dtoa_r+0x14c4>
   14c24:	a88003cc 	andi	r2,r21,15
   14c28:	100490fa 	slli	r2,r2,3
   14c2c:	00c000b4 	movhi	r3,2
   14c30:	18e24b04 	addi	r3,r3,-30420
   14c34:	a82bd13a 	srai	r21,r21,4
   14c38:	1885883a 	add	r2,r3,r2
   14c3c:	11800017 	ldw	r6,0(r2)
   14c40:	11c00117 	ldw	r7,4(r2)
   14c44:	e009883a 	mov	r4,fp
   14c48:	880b883a 	mov	r5,r17
   14c4c:	00161400 	call	16140 <__muldf3>
   14c50:	1027883a 	mov	r19,r2
   14c54:	1829883a 	mov	r20,r3
   14c58:	a800e826 	beq	r21,zero,14ffc <_dtoa_r+0x1600>
   14c5c:	058000b4 	movhi	r22,2
   14c60:	b5a24104 	addi	r22,r22,-30460
   14c64:	04800084 	movi	r18,2
   14c68:	a980004c 	andi	r6,r21,1
   14c6c:	1009883a 	mov	r4,r2
   14c70:	a82bd07a 	srai	r21,r21,1
   14c74:	180b883a 	mov	r5,r3
   14c78:	30000426 	beq	r6,zero,14c8c <_dtoa_r+0x1290>
   14c7c:	b1800017 	ldw	r6,0(r22)
   14c80:	b1c00117 	ldw	r7,4(r22)
   14c84:	94800044 	addi	r18,r18,1
   14c88:	00161400 	call	16140 <__muldf3>
   14c8c:	b5800204 	addi	r22,r22,8
   14c90:	a83ff51e 	bne	r21,zero,14c68 <_dtoa_r+0x126c>
   14c94:	1027883a 	mov	r19,r2
   14c98:	1829883a 	mov	r20,r3
   14c9c:	003c6f06 	br	13e5c <_dtoa_r+0x460>
   14ca0:	a9400117 	ldw	r5,4(r21)
   14ca4:	8009883a 	mov	r4,r16
   14ca8:	001200c0 	call	1200c <_Balloc>
   14cac:	a9800417 	ldw	r6,16(r21)
   14cb0:	11000304 	addi	r4,r2,12
   14cb4:	a9400304 	addi	r5,r21,12
   14cb8:	31800084 	addi	r6,r6,2
   14cbc:	318d883a 	add	r6,r6,r6
   14cc0:	318d883a 	add	r6,r6,r6
   14cc4:	1023883a 	mov	r17,r2
   14cc8:	0015bec0 	call	15bec <memcpy>
   14ccc:	8009883a 	mov	r4,r16
   14cd0:	880b883a 	mov	r5,r17
   14cd4:	01800044 	movi	r6,1
   14cd8:	00128840 	call	12884 <__lshift>
   14cdc:	1027883a 	mov	r19,r2
   14ce0:	003e9806 	br	14744 <_dtoa_r+0xd48>
   14ce4:	21000044 	addi	r4,r4,1
   14ce8:	11000005 	stb	r4,0(r2)
   14cec:	003e5106 	br	14634 <_dtoa_r+0xc38>
   14cf0:	00800e44 	movi	r2,57
   14cf4:	e0809526 	beq	fp,r2,14f4c <_dtoa_r+0x1550>
   14cf8:	e0c00044 	addi	r3,fp,1
   14cfc:	90c00005 	stb	r3,0(r18)
   14d00:	95800044 	addi	r22,r18,1
   14d04:	982b883a 	mov	r21,r19
   14d08:	003e4a06 	br	14634 <_dtoa_r+0xc38>
   14d0c:	982b883a 	mov	r21,r19
   14d10:	003e2b06 	br	145c0 <_dtoa_r+0xbc4>
   14d14:	0029883a 	mov	r20,zero
   14d18:	002b883a 	mov	r21,zero
   14d1c:	003f7306 	br	14aec <_dtoa_r+0x10f0>
   14d20:	59bfffc4 	addi	r6,r11,-1
   14d24:	300490fa 	slli	r2,r6,3
   14d28:	00c000b4 	movhi	r3,2
   14d2c:	18e24b04 	addi	r3,r3,-30420
   14d30:	a80f883a 	mov	r7,r21
   14d34:	1885883a 	add	r2,r3,r2
   14d38:	11000017 	ldw	r4,0(r2)
   14d3c:	11400117 	ldw	r5,4(r2)
   14d40:	d8800717 	ldw	r2,28(sp)
   14d44:	d9801015 	stw	r6,64(sp)
   14d48:	900d883a 	mov	r6,r18
   14d4c:	dac01615 	stw	r11,88(sp)
   14d50:	15800044 	addi	r22,r2,1
   14d54:	00161400 	call	16140 <__muldf3>
   14d58:	a00b883a 	mov	r5,r20
   14d5c:	9809883a 	mov	r4,r19
   14d60:	d8c01315 	stw	r3,76(sp)
   14d64:	d8801115 	stw	r2,68(sp)
   14d68:	00168100 	call	16810 <__fixdfsi>
   14d6c:	1009883a 	mov	r4,r2
   14d70:	1025883a 	mov	r18,r2
   14d74:	0010a900 	call	10a90 <__floatsidf>
   14d78:	9809883a 	mov	r4,r19
   14d7c:	a00b883a 	mov	r5,r20
   14d80:	100d883a 	mov	r6,r2
   14d84:	180f883a 	mov	r7,r3
   14d88:	00160e00 	call	160e0 <__subdf3>
   14d8c:	1815883a 	mov	r10,r3
   14d90:	d8c00717 	ldw	r3,28(sp)
   14d94:	94800c04 	addi	r18,r18,48
   14d98:	102b883a 	mov	r21,r2
   14d9c:	1c800005 	stb	r18,0(r3)
   14da0:	dac01617 	ldw	r11,88(sp)
   14da4:	00800044 	movi	r2,1
   14da8:	58802426 	beq	r11,r2,14e3c <_dtoa_r+0x1440>
   14dac:	d9c00717 	ldw	r7,28(sp)
   14db0:	dc001415 	stw	r16,80(sp)
   14db4:	a805883a 	mov	r2,r21
   14db8:	3ad7883a 	add	r11,r7,r11
   14dbc:	b027883a 	mov	r19,r22
   14dc0:	5821883a 	mov	r16,r11
   14dc4:	5007883a 	mov	r3,r10
   14dc8:	882b883a 	mov	r21,r17
   14dcc:	000d883a 	mov	r6,zero
   14dd0:	01d00934 	movhi	r7,16420
   14dd4:	1009883a 	mov	r4,r2
   14dd8:	180b883a 	mov	r5,r3
   14ddc:	00161400 	call	16140 <__muldf3>
   14de0:	180b883a 	mov	r5,r3
   14de4:	1009883a 	mov	r4,r2
   14de8:	1829883a 	mov	r20,r3
   14dec:	1023883a 	mov	r17,r2
   14df0:	00168100 	call	16810 <__fixdfsi>
   14df4:	1009883a 	mov	r4,r2
   14df8:	1025883a 	mov	r18,r2
   14dfc:	0010a900 	call	10a90 <__floatsidf>
   14e00:	8809883a 	mov	r4,r17
   14e04:	a00b883a 	mov	r5,r20
   14e08:	100d883a 	mov	r6,r2
   14e0c:	180f883a 	mov	r7,r3
   14e10:	94800c04 	addi	r18,r18,48
   14e14:	00160e00 	call	160e0 <__subdf3>
   14e18:	9cc00044 	addi	r19,r19,1
   14e1c:	9cbfffc5 	stb	r18,-1(r19)
   14e20:	9c3fea1e 	bne	r19,r16,14dcc <_dtoa_r+0x13d0>
   14e24:	a823883a 	mov	r17,r21
   14e28:	102b883a 	mov	r21,r2
   14e2c:	d8801017 	ldw	r2,64(sp)
   14e30:	dc001417 	ldw	r16,80(sp)
   14e34:	1815883a 	mov	r10,r3
   14e38:	b0ad883a 	add	r22,r22,r2
   14e3c:	d9001117 	ldw	r4,68(sp)
   14e40:	d9401317 	ldw	r5,76(sp)
   14e44:	000d883a 	mov	r6,zero
   14e48:	01cff834 	movhi	r7,16352
   14e4c:	da801515 	stw	r10,84(sp)
   14e50:	001608c0 	call	1608c <__adddf3>
   14e54:	da801517 	ldw	r10,84(sp)
   14e58:	1009883a 	mov	r4,r2
   14e5c:	180b883a 	mov	r5,r3
   14e60:	500f883a 	mov	r7,r10
   14e64:	a80d883a 	mov	r6,r21
   14e68:	00167580 	call	16758 <__ltdf2>
   14e6c:	da801517 	ldw	r10,84(sp)
   14e70:	10003b0e 	bge	r2,zero,14f60 <_dtoa_r+0x1564>
   14e74:	d9001217 	ldw	r4,72(sp)
   14e78:	b53fffc3 	ldbu	r20,-1(r22)
   14e7c:	d9000515 	stw	r4,20(sp)
   14e80:	003d3206 	br	1434c <_dtoa_r+0x950>
   14e84:	d9800817 	ldw	r6,32(sp)
   14e88:	30a5c83a 	sub	r18,r6,r2
   14e8c:	0005883a 	mov	r2,zero
   14e90:	003d5206 	br	143dc <_dtoa_r+0x9e0>
   14e94:	05800044 	movi	r22,1
   14e98:	003dc606 	br	145b4 <_dtoa_r+0xbb8>
   14e9c:	a5000044 	addi	r20,r20,1
   14ea0:	15000005 	stb	r20,0(r2)
   14ea4:	003c7d06 	br	1409c <_dtoa_r+0x6a0>
   14ea8:	d8800217 	ldw	r2,8(sp)
   14eac:	00c00d84 	movi	r3,54
   14eb0:	dcc00a17 	ldw	r19,40(sp)
   14eb4:	1885c83a 	sub	r2,r3,r2
   14eb8:	dc800817 	ldw	r18,32(sp)
   14ebc:	003d4706 	br	143dc <_dtoa_r+0x9e0>
   14ec0:	e027883a 	mov	r19,fp
   14ec4:	8829883a 	mov	r20,r17
   14ec8:	04800084 	movi	r18,2
   14ecc:	003be306 	br	13e5c <_dtoa_r+0x460>
   14ed0:	d9000917 	ldw	r4,36(sp)
   14ed4:	203f0f26 	beq	r4,zero,14b14 <_dtoa_r+0x1118>
   14ed8:	d9800e17 	ldw	r6,56(sp)
   14edc:	01bca10e 	bge	zero,r6,14164 <_dtoa_r+0x768>
   14ee0:	a00b883a 	mov	r5,r20
   14ee4:	9809883a 	mov	r4,r19
   14ee8:	000d883a 	mov	r6,zero
   14eec:	01d00934 	movhi	r7,16420
   14ef0:	00161400 	call	16140 <__muldf3>
   14ef4:	91000044 	addi	r4,r18,1
   14ef8:	1027883a 	mov	r19,r2
   14efc:	1829883a 	mov	r20,r3
   14f00:	0010a900 	call	10a90 <__floatsidf>
   14f04:	9809883a 	mov	r4,r19
   14f08:	a00b883a 	mov	r5,r20
   14f0c:	100d883a 	mov	r6,r2
   14f10:	180f883a 	mov	r7,r3
   14f14:	00161400 	call	16140 <__muldf3>
   14f18:	01d00734 	movhi	r7,16412
   14f1c:	1009883a 	mov	r4,r2
   14f20:	180b883a 	mov	r5,r3
   14f24:	000d883a 	mov	r6,zero
   14f28:	001608c0 	call	1608c <__adddf3>
   14f2c:	d9c00517 	ldw	r7,20(sp)
   14f30:	057f3034 	movhi	r21,64704
   14f34:	1025883a 	mov	r18,r2
   14f38:	39ffffc4 	addi	r7,r7,-1
   14f3c:	d9c01215 	stw	r7,72(sp)
   14f40:	1d6b883a 	add	r21,r3,r21
   14f44:	dac00e17 	ldw	r11,56(sp)
   14f48:	003be006 	br	13ecc <_dtoa_r+0x4d0>
   14f4c:	01000e44 	movi	r4,57
   14f50:	91000005 	stb	r4,0(r18)
   14f54:	95800044 	addi	r22,r18,1
   14f58:	982b883a 	mov	r21,r19
   14f5c:	003da206 	br	145e8 <_dtoa_r+0xbec>
   14f60:	d9801117 	ldw	r6,68(sp)
   14f64:	d9c01317 	ldw	r7,76(sp)
   14f68:	0009883a 	mov	r4,zero
   14f6c:	014ff834 	movhi	r5,16352
   14f70:	da801515 	stw	r10,84(sp)
   14f74:	00160e00 	call	160e0 <__subdf3>
   14f78:	da801517 	ldw	r10,84(sp)
   14f7c:	1009883a 	mov	r4,r2
   14f80:	180b883a 	mov	r5,r3
   14f84:	a80d883a 	mov	r6,r21
   14f88:	500f883a 	mov	r7,r10
   14f8c:	00166900 	call	16690 <__gtdf2>
   14f90:	00bc740e 	bge	zero,r2,14164 <_dtoa_r+0x768>
   14f94:	01000c04 	movi	r4,48
   14f98:	00000106 	br	14fa0 <_dtoa_r+0x15a4>
   14f9c:	102d883a 	mov	r22,r2
   14fa0:	b0bfffc4 	addi	r2,r22,-1
   14fa4:	10c00007 	ldb	r3,0(r2)
   14fa8:	193ffc26 	beq	r3,r4,14f9c <_dtoa_r+0x15a0>
   14fac:	003c3906 	br	14094 <_dtoa_r+0x698>
   14fb0:	d9c01217 	ldw	r7,72(sp)
   14fb4:	d9c00515 	stw	r7,20(sp)
   14fb8:	003ce406 	br	1434c <_dtoa_r+0x950>
   14fbc:	dc401117 	ldw	r17,68(sp)
   14fc0:	df001017 	ldw	fp,64(sp)
   14fc4:	003c6706 	br	14164 <_dtoa_r+0x768>
   14fc8:	103e7a1e 	bne	r2,zero,149b4 <_dtoa_r+0xfb8>
   14fcc:	e080004c 	andi	r2,fp,1
   14fd0:	103e7826 	beq	r2,zero,149b4 <_dtoa_r+0xfb8>
   14fd4:	003e7406 	br	149a8 <_dtoa_r+0xfac>
   14fd8:	8009883a 	mov	r4,r16
   14fdc:	a80b883a 	mov	r5,r21
   14fe0:	01800284 	movi	r6,10
   14fe4:	000f883a 	mov	r7,zero
   14fe8:	00121600 	call	12160 <__multadd>
   14fec:	d9000e17 	ldw	r4,56(sp)
   14ff0:	102b883a 	mov	r21,r2
   14ff4:	d9000915 	stw	r4,36(sp)
   14ff8:	003d5506 	br	14550 <_dtoa_r+0xb54>
   14ffc:	04800084 	movi	r18,2
   15000:	003b9606 	br	13e5c <_dtoa_r+0x460>
   15004:	d9801217 	ldw	r6,72(sp)
   15008:	d9800515 	stw	r6,20(sp)
   1500c:	003ccf06 	br	1434c <_dtoa_r+0x950>
   15010:	d9001217 	ldw	r4,72(sp)
   15014:	d9000515 	stw	r4,20(sp)
   15018:	003c2006 	br	1409c <_dtoa_r+0x6a0>
   1501c:	05000044 	movi	r20,1
   15020:	003b3906 	br	13d08 <_dtoa_r+0x30c>
   15024:	20fd3c26 	beq	r4,r3,14518 <_dtoa_r+0xb1c>
   15028:	00c00f04 	movi	r3,60
   1502c:	1885c83a 	sub	r2,r3,r2
   15030:	003d3206 	br	144fc <_dtoa_r+0xb00>

00015034 <_malloc_trim_r>:
   15034:	defffb04 	addi	sp,sp,-20
   15038:	dcc00315 	stw	r19,12(sp)
   1503c:	dc800215 	stw	r18,8(sp)
   15040:	dc400115 	stw	r17,4(sp)
   15044:	dc000015 	stw	r16,0(sp)
   15048:	2827883a 	mov	r19,r5
   1504c:	dfc00415 	stw	ra,16(sp)
   15050:	044000b4 	movhi	r17,2
   15054:	8c62cd04 	addi	r17,r17,-29900
   15058:	2021883a 	mov	r16,r4
   1505c:	0016d740 	call	16d74 <__malloc_lock>
   15060:	88800217 	ldw	r2,8(r17)
   15064:	14800117 	ldw	r18,4(r2)
   15068:	00bfff04 	movi	r2,-4
   1506c:	90a4703a 	and	r18,r18,r2
   15070:	90801bc4 	addi	r2,r18,111
   15074:	14e7c83a 	sub	r19,r2,r19
   15078:	9826d1fa 	srli	r19,r19,7
   1507c:	00801fc4 	movi	r2,127
   15080:	9cffffc4 	addi	r19,r19,-1
   15084:	982691fa 	slli	r19,r19,7
   15088:	14c0060e 	bge	r2,r19,150a4 <_malloc_trim_r+0x70>
   1508c:	8009883a 	mov	r4,r16
   15090:	000b883a 	mov	r5,zero
   15094:	0015c900 	call	15c90 <_sbrk_r>
   15098:	88c00217 	ldw	r3,8(r17)
   1509c:	1c87883a 	add	r3,r3,r18
   150a0:	10c00a26 	beq	r2,r3,150cc <_malloc_trim_r+0x98>
   150a4:	8009883a 	mov	r4,r16
   150a8:	0016d940 	call	16d94 <__malloc_unlock>
   150ac:	0005883a 	mov	r2,zero
   150b0:	dfc00417 	ldw	ra,16(sp)
   150b4:	dcc00317 	ldw	r19,12(sp)
   150b8:	dc800217 	ldw	r18,8(sp)
   150bc:	dc400117 	ldw	r17,4(sp)
   150c0:	dc000017 	ldw	r16,0(sp)
   150c4:	dec00504 	addi	sp,sp,20
   150c8:	f800283a 	ret
   150cc:	8009883a 	mov	r4,r16
   150d0:	04cbc83a 	sub	r5,zero,r19
   150d4:	0015c900 	call	15c90 <_sbrk_r>
   150d8:	00ffffc4 	movi	r3,-1
   150dc:	10c01326 	beq	r2,r3,1512c <_malloc_trim_r+0xf8>
   150e0:	008000b4 	movhi	r2,2
   150e4:	10a61904 	addi	r2,r2,-26524
   150e8:	11000017 	ldw	r4,0(r2)
   150ec:	88c00217 	ldw	r3,8(r17)
   150f0:	94e5c83a 	sub	r18,r18,r19
   150f4:	94800054 	ori	r18,r18,1
   150f8:	24e7c83a 	sub	r19,r4,r19
   150fc:	1c800115 	stw	r18,4(r3)
   15100:	8009883a 	mov	r4,r16
   15104:	14c00015 	stw	r19,0(r2)
   15108:	0016d940 	call	16d94 <__malloc_unlock>
   1510c:	00800044 	movi	r2,1
   15110:	dfc00417 	ldw	ra,16(sp)
   15114:	dcc00317 	ldw	r19,12(sp)
   15118:	dc800217 	ldw	r18,8(sp)
   1511c:	dc400117 	ldw	r17,4(sp)
   15120:	dc000017 	ldw	r16,0(sp)
   15124:	dec00504 	addi	sp,sp,20
   15128:	f800283a 	ret
   1512c:	8009883a 	mov	r4,r16
   15130:	000b883a 	mov	r5,zero
   15134:	0015c900 	call	15c90 <_sbrk_r>
   15138:	88c00217 	ldw	r3,8(r17)
   1513c:	014003c4 	movi	r5,15
   15140:	10c9c83a 	sub	r4,r2,r3
   15144:	293fd70e 	bge	r5,r4,150a4 <_malloc_trim_r+0x70>
   15148:	014000b4 	movhi	r5,2
   1514c:	29644604 	addi	r5,r5,-28392
   15150:	29400017 	ldw	r5,0(r5)
   15154:	21000054 	ori	r4,r4,1
   15158:	19000115 	stw	r4,4(r3)
   1515c:	1145c83a 	sub	r2,r2,r5
   15160:	014000b4 	movhi	r5,2
   15164:	29661904 	addi	r5,r5,-26524
   15168:	28800015 	stw	r2,0(r5)
   1516c:	003fcd06 	br	150a4 <_malloc_trim_r+0x70>

00015170 <_free_r>:
   15170:	defffd04 	addi	sp,sp,-12
   15174:	dc400115 	stw	r17,4(sp)
   15178:	dc000015 	stw	r16,0(sp)
   1517c:	dfc00215 	stw	ra,8(sp)
   15180:	2821883a 	mov	r16,r5
   15184:	2023883a 	mov	r17,r4
   15188:	28004b26 	beq	r5,zero,152b8 <_free_r+0x148>
   1518c:	0016d740 	call	16d74 <__malloc_lock>
   15190:	823fff17 	ldw	r8,-4(r16)
   15194:	00bfff84 	movi	r2,-2
   15198:	81bffe04 	addi	r6,r16,-8
   1519c:	4084703a 	and	r2,r8,r2
   151a0:	3087883a 	add	r3,r6,r2
   151a4:	014000b4 	movhi	r5,2
   151a8:	2962cd04 	addi	r5,r5,-29900
   151ac:	1a400117 	ldw	r9,4(r3)
   151b0:	29000217 	ldw	r4,8(r5)
   151b4:	01ffff04 	movi	r7,-4
   151b8:	49ce703a 	and	r7,r9,r7
   151bc:	20c06526 	beq	r4,r3,15354 <_free_r+0x1e4>
   151c0:	19c00115 	stw	r7,4(r3)
   151c4:	4200004c 	andi	r8,r8,1
   151c8:	40003026 	beq	r8,zero,1528c <_free_r+0x11c>
   151cc:	0009883a 	mov	r4,zero
   151d0:	19d1883a 	add	r8,r3,r7
   151d4:	42000117 	ldw	r8,4(r8)
   151d8:	4200004c 	andi	r8,r8,1
   151dc:	4000061e 	bne	r8,zero,151f8 <_free_r+0x88>
   151e0:	11c5883a 	add	r2,r2,r7
   151e4:	19c00217 	ldw	r7,8(r3)
   151e8:	20004e26 	beq	r4,zero,15324 <_free_r+0x1b4>
   151ec:	18c00317 	ldw	r3,12(r3)
   151f0:	38c00315 	stw	r3,12(r7)
   151f4:	19c00215 	stw	r7,8(r3)
   151f8:	11c00054 	ori	r7,r2,1
   151fc:	3087883a 	add	r3,r6,r2
   15200:	31c00115 	stw	r7,4(r6)
   15204:	18800015 	stw	r2,0(r3)
   15208:	20001a1e 	bne	r4,zero,15274 <_free_r+0x104>
   1520c:	00c07fc4 	movi	r3,511
   15210:	18802e2e 	bgeu	r3,r2,152cc <_free_r+0x15c>
   15214:	1006d27a 	srli	r3,r2,9
   15218:	01000104 	movi	r4,4
   1521c:	20c06636 	bltu	r4,r3,153b8 <_free_r+0x248>
   15220:	1008d1ba 	srli	r4,r2,6
   15224:	21000e04 	addi	r4,r4,56
   15228:	210f883a 	add	r7,r4,r4
   1522c:	39cf883a 	add	r7,r7,r7
   15230:	39cf883a 	add	r7,r7,r7
   15234:	29cf883a 	add	r7,r5,r7
   15238:	38c00217 	ldw	r3,8(r7)
   1523c:	014000b4 	movhi	r5,2
   15240:	2962cd04 	addi	r5,r5,-29900
   15244:	19c06126 	beq	r3,r7,153cc <_free_r+0x25c>
   15248:	013fff04 	movi	r4,-4
   1524c:	19400117 	ldw	r5,4(r3)
   15250:	290a703a 	and	r5,r5,r4
   15254:	1140022e 	bgeu	r2,r5,15260 <_free_r+0xf0>
   15258:	18c00217 	ldw	r3,8(r3)
   1525c:	38fffb1e 	bne	r7,r3,1524c <_free_r+0xdc>
   15260:	18800317 	ldw	r2,12(r3)
   15264:	30800315 	stw	r2,12(r6)
   15268:	30c00215 	stw	r3,8(r6)
   1526c:	11800215 	stw	r6,8(r2)
   15270:	19800315 	stw	r6,12(r3)
   15274:	8809883a 	mov	r4,r17
   15278:	dfc00217 	ldw	ra,8(sp)
   1527c:	dc400117 	ldw	r17,4(sp)
   15280:	dc000017 	ldw	r16,0(sp)
   15284:	dec00304 	addi	sp,sp,12
   15288:	0016d941 	jmpi	16d94 <__malloc_unlock>
   1528c:	813ffe17 	ldw	r4,-8(r16)
   15290:	2a400204 	addi	r9,r5,8
   15294:	310dc83a 	sub	r6,r6,r4
   15298:	32000217 	ldw	r8,8(r6)
   1529c:	1105883a 	add	r2,r2,r4
   152a0:	42404326 	beq	r8,r9,153b0 <_free_r+0x240>
   152a4:	32400317 	ldw	r9,12(r6)
   152a8:	0009883a 	mov	r4,zero
   152ac:	42400315 	stw	r9,12(r8)
   152b0:	4a000215 	stw	r8,8(r9)
   152b4:	003fc606 	br	151d0 <_free_r+0x60>
   152b8:	dfc00217 	ldw	ra,8(sp)
   152bc:	dc400117 	ldw	r17,4(sp)
   152c0:	dc000017 	ldw	r16,0(sp)
   152c4:	dec00304 	addi	sp,sp,12
   152c8:	f800283a 	ret
   152cc:	1004d0fa 	srli	r2,r2,3
   152d0:	02000044 	movi	r8,1
   152d4:	29c00117 	ldw	r7,4(r5)
   152d8:	1087883a 	add	r3,r2,r2
   152dc:	18c7883a 	add	r3,r3,r3
   152e0:	1005d0ba 	srai	r2,r2,2
   152e4:	18c7883a 	add	r3,r3,r3
   152e8:	28c7883a 	add	r3,r5,r3
   152ec:	19000217 	ldw	r4,8(r3)
   152f0:	4084983a 	sll	r2,r8,r2
   152f4:	30c00315 	stw	r3,12(r6)
   152f8:	31000215 	stw	r4,8(r6)
   152fc:	11c4b03a 	or	r2,r2,r7
   15300:	21800315 	stw	r6,12(r4)
   15304:	8809883a 	mov	r4,r17
   15308:	28800115 	stw	r2,4(r5)
   1530c:	19800215 	stw	r6,8(r3)
   15310:	dfc00217 	ldw	ra,8(sp)
   15314:	dc400117 	ldw	r17,4(sp)
   15318:	dc000017 	ldw	r16,0(sp)
   1531c:	dec00304 	addi	sp,sp,12
   15320:	0016d941 	jmpi	16d94 <__malloc_unlock>
   15324:	020000b4 	movhi	r8,2
   15328:	4222cf04 	addi	r8,r8,-29892
   1532c:	3a3faf1e 	bne	r7,r8,151ec <_free_r+0x7c>
   15330:	29800515 	stw	r6,20(r5)
   15334:	29800415 	stw	r6,16(r5)
   15338:	11000054 	ori	r4,r2,1
   1533c:	3087883a 	add	r3,r6,r2
   15340:	31c00315 	stw	r7,12(r6)
   15344:	31c00215 	stw	r7,8(r6)
   15348:	31000115 	stw	r4,4(r6)
   1534c:	18800015 	stw	r2,0(r3)
   15350:	003fc806 	br	15274 <_free_r+0x104>
   15354:	4200004c 	andi	r8,r8,1
   15358:	3885883a 	add	r2,r7,r2
   1535c:	4000071e 	bne	r8,zero,1537c <_free_r+0x20c>
   15360:	81fffe17 	ldw	r7,-8(r16)
   15364:	31cdc83a 	sub	r6,r6,r7
   15368:	30c00317 	ldw	r3,12(r6)
   1536c:	31000217 	ldw	r4,8(r6)
   15370:	11c5883a 	add	r2,r2,r7
   15374:	20c00315 	stw	r3,12(r4)
   15378:	19000215 	stw	r4,8(r3)
   1537c:	00c000b4 	movhi	r3,2
   15380:	18e44704 	addi	r3,r3,-28388
   15384:	18c00017 	ldw	r3,0(r3)
   15388:	11000054 	ori	r4,r2,1
   1538c:	31000115 	stw	r4,4(r6)
   15390:	29800215 	stw	r6,8(r5)
   15394:	10ffb736 	bltu	r2,r3,15274 <_free_r+0x104>
   15398:	008000b4 	movhi	r2,2
   1539c:	10a61104 	addi	r2,r2,-26556
   153a0:	11400017 	ldw	r5,0(r2)
   153a4:	8809883a 	mov	r4,r17
   153a8:	00150340 	call	15034 <_malloc_trim_r>
   153ac:	003fb106 	br	15274 <_free_r+0x104>
   153b0:	01000044 	movi	r4,1
   153b4:	003f8606 	br	151d0 <_free_r+0x60>
   153b8:	01000504 	movi	r4,20
   153bc:	20c00b36 	bltu	r4,r3,153ec <_free_r+0x27c>
   153c0:	190016c4 	addi	r4,r3,91
   153c4:	210f883a 	add	r7,r4,r4
   153c8:	003f9806 	br	1522c <_free_r+0xbc>
   153cc:	2009d0ba 	srai	r4,r4,2
   153d0:	00800044 	movi	r2,1
   153d4:	29c00117 	ldw	r7,4(r5)
   153d8:	1108983a 	sll	r4,r2,r4
   153dc:	1805883a 	mov	r2,r3
   153e0:	21c8b03a 	or	r4,r4,r7
   153e4:	29000115 	stw	r4,4(r5)
   153e8:	003f9e06 	br	15264 <_free_r+0xf4>
   153ec:	01001504 	movi	r4,84
   153f0:	20c00436 	bltu	r4,r3,15404 <_free_r+0x294>
   153f4:	1008d33a 	srli	r4,r2,12
   153f8:	21001b84 	addi	r4,r4,110
   153fc:	210f883a 	add	r7,r4,r4
   15400:	003f8a06 	br	1522c <_free_r+0xbc>
   15404:	01005504 	movi	r4,340
   15408:	20c00436 	bltu	r4,r3,1541c <_free_r+0x2ac>
   1540c:	1008d3fa 	srli	r4,r2,15
   15410:	21001dc4 	addi	r4,r4,119
   15414:	210f883a 	add	r7,r4,r4
   15418:	003f8406 	br	1522c <_free_r+0xbc>
   1541c:	01015504 	movi	r4,1364
   15420:	20c00436 	bltu	r4,r3,15434 <_free_r+0x2c4>
   15424:	1008d4ba 	srli	r4,r2,18
   15428:	21001f04 	addi	r4,r4,124
   1542c:	210f883a 	add	r7,r4,r4
   15430:	003f7e06 	br	1522c <_free_r+0xbc>
   15434:	01c03f04 	movi	r7,252
   15438:	01001f84 	movi	r4,126
   1543c:	003f7b06 	br	1522c <_free_r+0xbc>

00015440 <malloc>:
   15440:	008000b4 	movhi	r2,2
   15444:	10a44504 	addi	r2,r2,-28396
   15448:	200b883a 	mov	r5,r4
   1544c:	11000017 	ldw	r4,0(r2)
   15450:	00154681 	jmpi	15468 <_malloc_r>

00015454 <free>:
   15454:	008000b4 	movhi	r2,2
   15458:	10a44504 	addi	r2,r2,-28396
   1545c:	200b883a 	mov	r5,r4
   15460:	11000017 	ldw	r4,0(r2)
   15464:	00151701 	jmpi	15170 <_free_r>

00015468 <_malloc_r>:
   15468:	defff604 	addi	sp,sp,-40
   1546c:	dc800215 	stw	r18,8(sp)
   15470:	dfc00915 	stw	ra,36(sp)
   15474:	df000815 	stw	fp,32(sp)
   15478:	ddc00715 	stw	r23,28(sp)
   1547c:	dd800615 	stw	r22,24(sp)
   15480:	dd400515 	stw	r21,20(sp)
   15484:	dd000415 	stw	r20,16(sp)
   15488:	dcc00315 	stw	r19,12(sp)
   1548c:	dc400115 	stw	r17,4(sp)
   15490:	dc000015 	stw	r16,0(sp)
   15494:	288002c4 	addi	r2,r5,11
   15498:	00c00584 	movi	r3,22
   1549c:	2025883a 	mov	r18,r4
   154a0:	18802b2e 	bgeu	r3,r2,15550 <_malloc_r+0xe8>
   154a4:	047ffe04 	movi	r17,-8
   154a8:	1462703a 	and	r17,r2,r17
   154ac:	88002a16 	blt	r17,zero,15558 <_malloc_r+0xf0>
   154b0:	89402936 	bltu	r17,r5,15558 <_malloc_r+0xf0>
   154b4:	9009883a 	mov	r4,r18
   154b8:	0016d740 	call	16d74 <__malloc_lock>
   154bc:	00807dc4 	movi	r2,503
   154c0:	14402936 	bltu	r2,r17,15568 <_malloc_r+0x100>
   154c4:	8808d0fa 	srli	r4,r17,3
   154c8:	04c000b4 	movhi	r19,2
   154cc:	9ce2cd04 	addi	r19,r19,-29900
   154d0:	2105883a 	add	r2,r4,r4
   154d4:	1085883a 	add	r2,r2,r2
   154d8:	1085883a 	add	r2,r2,r2
   154dc:	9885883a 	add	r2,r19,r2
   154e0:	14000317 	ldw	r16,12(r2)
   154e4:	80815526 	beq	r16,r2,15a3c <_malloc_r+0x5d4>
   154e8:	81000117 	ldw	r4,4(r16)
   154ec:	00bfff04 	movi	r2,-4
   154f0:	80c00317 	ldw	r3,12(r16)
   154f4:	2084703a 	and	r2,r4,r2
   154f8:	8085883a 	add	r2,r16,r2
   154fc:	11800117 	ldw	r6,4(r2)
   15500:	81400217 	ldw	r5,8(r16)
   15504:	9009883a 	mov	r4,r18
   15508:	31800054 	ori	r6,r6,1
   1550c:	11800115 	stw	r6,4(r2)
   15510:	28c00315 	stw	r3,12(r5)
   15514:	19400215 	stw	r5,8(r3)
   15518:	0016d940 	call	16d94 <__malloc_unlock>
   1551c:	80800204 	addi	r2,r16,8
   15520:	dfc00917 	ldw	ra,36(sp)
   15524:	df000817 	ldw	fp,32(sp)
   15528:	ddc00717 	ldw	r23,28(sp)
   1552c:	dd800617 	ldw	r22,24(sp)
   15530:	dd400517 	ldw	r21,20(sp)
   15534:	dd000417 	ldw	r20,16(sp)
   15538:	dcc00317 	ldw	r19,12(sp)
   1553c:	dc800217 	ldw	r18,8(sp)
   15540:	dc400117 	ldw	r17,4(sp)
   15544:	dc000017 	ldw	r16,0(sp)
   15548:	dec00a04 	addi	sp,sp,40
   1554c:	f800283a 	ret
   15550:	04400404 	movi	r17,16
   15554:	897fd72e 	bgeu	r17,r5,154b4 <_malloc_r+0x4c>
   15558:	00800304 	movi	r2,12
   1555c:	90800015 	stw	r2,0(r18)
   15560:	0005883a 	mov	r2,zero
   15564:	003fee06 	br	15520 <_malloc_r+0xb8>
   15568:	8808d27a 	srli	r4,r17,9
   1556c:	20007126 	beq	r4,zero,15734 <_malloc_r+0x2cc>
   15570:	00800104 	movi	r2,4
   15574:	1100eb36 	bltu	r2,r4,15924 <_malloc_r+0x4bc>
   15578:	8808d1ba 	srli	r4,r17,6
   1557c:	21000e04 	addi	r4,r4,56
   15580:	210b883a 	add	r5,r4,r4
   15584:	294b883a 	add	r5,r5,r5
   15588:	294b883a 	add	r5,r5,r5
   1558c:	04c000b4 	movhi	r19,2
   15590:	9ce2cd04 	addi	r19,r19,-29900
   15594:	994b883a 	add	r5,r19,r5
   15598:	2c000317 	ldw	r16,12(r5)
   1559c:	2c000e26 	beq	r5,r16,155d8 <_malloc_r+0x170>
   155a0:	80c00117 	ldw	r3,4(r16)
   155a4:	01ffff04 	movi	r7,-4
   155a8:	018003c4 	movi	r6,15
   155ac:	19c6703a 	and	r3,r3,r7
   155b0:	1c45c83a 	sub	r2,r3,r17
   155b4:	30800716 	blt	r6,r2,155d4 <_malloc_r+0x16c>
   155b8:	1000610e 	bge	r2,zero,15740 <_malloc_r+0x2d8>
   155bc:	84000317 	ldw	r16,12(r16)
   155c0:	2c000526 	beq	r5,r16,155d8 <_malloc_r+0x170>
   155c4:	80c00117 	ldw	r3,4(r16)
   155c8:	19c6703a 	and	r3,r3,r7
   155cc:	1c45c83a 	sub	r2,r3,r17
   155d0:	30bff90e 	bge	r6,r2,155b8 <_malloc_r+0x150>
   155d4:	213fffc4 	addi	r4,r4,-1
   155d8:	21000044 	addi	r4,r4,1
   155dc:	9c000417 	ldw	r16,16(r19)
   155e0:	00c000b4 	movhi	r3,2
   155e4:	18e2cd04 	addi	r3,r3,-29900
   155e8:	1a400204 	addi	r9,r3,8
   155ec:	8240ff26 	beq	r16,r9,159ec <_malloc_r+0x584>
   155f0:	81400117 	ldw	r5,4(r16)
   155f4:	00bfff04 	movi	r2,-4
   155f8:	018003c4 	movi	r6,15
   155fc:	2884703a 	and	r2,r5,r2
   15600:	144bc83a 	sub	r5,r2,r17
   15604:	3140ea16 	blt	r6,r5,159b0 <_malloc_r+0x548>
   15608:	1a400515 	stw	r9,20(r3)
   1560c:	1a400415 	stw	r9,16(r3)
   15610:	2800570e 	bge	r5,zero,15770 <_malloc_r+0x308>
   15614:	01407fc4 	movi	r5,511
   15618:	2880ca36 	bltu	r5,r2,15944 <_malloc_r+0x4dc>
   1561c:	1004d0fa 	srli	r2,r2,3
   15620:	02000044 	movi	r8,1
   15624:	19c00117 	ldw	r7,4(r3)
   15628:	108b883a 	add	r5,r2,r2
   1562c:	294b883a 	add	r5,r5,r5
   15630:	1005d0ba 	srai	r2,r2,2
   15634:	294b883a 	add	r5,r5,r5
   15638:	28cb883a 	add	r5,r5,r3
   1563c:	29800217 	ldw	r6,8(r5)
   15640:	4084983a 	sll	r2,r8,r2
   15644:	81400315 	stw	r5,12(r16)
   15648:	81800215 	stw	r6,8(r16)
   1564c:	11c4b03a 	or	r2,r2,r7
   15650:	18800115 	stw	r2,4(r3)
   15654:	2c000215 	stw	r16,8(r5)
   15658:	34000315 	stw	r16,12(r6)
   1565c:	200bd0ba 	srai	r5,r4,2
   15660:	00c00044 	movi	r3,1
   15664:	194a983a 	sll	r5,r3,r5
   15668:	11404936 	bltu	r2,r5,15790 <_malloc_r+0x328>
   1566c:	1146703a 	and	r3,r2,r5
   15670:	18000a1e 	bne	r3,zero,1569c <_malloc_r+0x234>
   15674:	00ffff04 	movi	r3,-4
   15678:	294b883a 	add	r5,r5,r5
   1567c:	20c8703a 	and	r4,r4,r3
   15680:	1146703a 	and	r3,r2,r5
   15684:	21000104 	addi	r4,r4,4
   15688:	1800041e 	bne	r3,zero,1569c <_malloc_r+0x234>
   1568c:	294b883a 	add	r5,r5,r5
   15690:	1146703a 	and	r3,r2,r5
   15694:	21000104 	addi	r4,r4,4
   15698:	183ffc26 	beq	r3,zero,1568c <_malloc_r+0x224>
   1569c:	023fff04 	movi	r8,-4
   156a0:	01c003c4 	movi	r7,15
   156a4:	2105883a 	add	r2,r4,r4
   156a8:	1085883a 	add	r2,r2,r2
   156ac:	1085883a 	add	r2,r2,r2
   156b0:	9899883a 	add	r12,r19,r2
   156b4:	62800304 	addi	r10,r12,12
   156b8:	2017883a 	mov	r11,r4
   156bc:	54000017 	ldw	r16,0(r10)
   156c0:	51bffd04 	addi	r6,r10,-12
   156c4:	8180041e 	bne	r16,r6,156d8 <_malloc_r+0x270>
   156c8:	0000ca06 	br	159f4 <_malloc_r+0x58c>
   156cc:	10001c0e 	bge	r2,zero,15740 <_malloc_r+0x2d8>
   156d0:	84000317 	ldw	r16,12(r16)
   156d4:	8180c726 	beq	r16,r6,159f4 <_malloc_r+0x58c>
   156d8:	80c00117 	ldw	r3,4(r16)
   156dc:	1a06703a 	and	r3,r3,r8
   156e0:	1c45c83a 	sub	r2,r3,r17
   156e4:	38bff90e 	bge	r7,r2,156cc <_malloc_r+0x264>
   156e8:	81000317 	ldw	r4,12(r16)
   156ec:	81400217 	ldw	r5,8(r16)
   156f0:	8447883a 	add	r3,r16,r17
   156f4:	8c400054 	ori	r17,r17,1
   156f8:	29000315 	stw	r4,12(r5)
   156fc:	21400215 	stw	r5,8(r4)
   15700:	84400115 	stw	r17,4(r16)
   15704:	1889883a 	add	r4,r3,r2
   15708:	11400054 	ori	r5,r2,1
   1570c:	98c00515 	stw	r3,20(r19)
   15710:	98c00415 	stw	r3,16(r19)
   15714:	20800015 	stw	r2,0(r4)
   15718:	1a400315 	stw	r9,12(r3)
   1571c:	1a400215 	stw	r9,8(r3)
   15720:	19400115 	stw	r5,4(r3)
   15724:	9009883a 	mov	r4,r18
   15728:	0016d940 	call	16d94 <__malloc_unlock>
   1572c:	80800204 	addi	r2,r16,8
   15730:	003f7b06 	br	15520 <_malloc_r+0xb8>
   15734:	8808d0fa 	srli	r4,r17,3
   15738:	210b883a 	add	r5,r4,r4
   1573c:	003f9106 	br	15584 <_malloc_r+0x11c>
   15740:	80c7883a 	add	r3,r16,r3
   15744:	19400117 	ldw	r5,4(r3)
   15748:	80800317 	ldw	r2,12(r16)
   1574c:	81000217 	ldw	r4,8(r16)
   15750:	29400054 	ori	r5,r5,1
   15754:	19400115 	stw	r5,4(r3)
   15758:	20800315 	stw	r2,12(r4)
   1575c:	11000215 	stw	r4,8(r2)
   15760:	9009883a 	mov	r4,r18
   15764:	0016d940 	call	16d94 <__malloc_unlock>
   15768:	80800204 	addi	r2,r16,8
   1576c:	003f6c06 	br	15520 <_malloc_r+0xb8>
   15770:	8085883a 	add	r2,r16,r2
   15774:	10c00117 	ldw	r3,4(r2)
   15778:	9009883a 	mov	r4,r18
   1577c:	18c00054 	ori	r3,r3,1
   15780:	10c00115 	stw	r3,4(r2)
   15784:	0016d940 	call	16d94 <__malloc_unlock>
   15788:	80800204 	addi	r2,r16,8
   1578c:	003f6406 	br	15520 <_malloc_r+0xb8>
   15790:	9c000217 	ldw	r16,8(r19)
   15794:	00bfff04 	movi	r2,-4
   15798:	85400117 	ldw	r21,4(r16)
   1579c:	a8aa703a 	and	r21,r21,r2
   157a0:	ac400336 	bltu	r21,r17,157b0 <_malloc_r+0x348>
   157a4:	ac45c83a 	sub	r2,r21,r17
   157a8:	00c003c4 	movi	r3,15
   157ac:	18805316 	blt	r3,r2,158fc <_malloc_r+0x494>
   157b0:	d5e1cd17 	ldw	r23,-30924(gp)
   157b4:	d0e00217 	ldw	r3,-32760(gp)
   157b8:	00bfffc4 	movi	r2,-1
   157bc:	8579883a 	add	fp,r16,r21
   157c0:	8def883a 	add	r23,r17,r23
   157c4:	1880d226 	beq	r3,r2,15b10 <_malloc_r+0x6a8>
   157c8:	bdc023c4 	addi	r23,r23,143
   157cc:	00bfe004 	movi	r2,-128
   157d0:	b8ae703a 	and	r23,r23,r2
   157d4:	9009883a 	mov	r4,r18
   157d8:	b80b883a 	mov	r5,r23
   157dc:	0015c900 	call	15c90 <_sbrk_r>
   157e0:	1029883a 	mov	r20,r2
   157e4:	00bfffc4 	movi	r2,-1
   157e8:	a080d126 	beq	r20,r2,15b30 <_malloc_r+0x6c8>
   157ec:	a7009f36 	bltu	r20,fp,15a6c <_malloc_r+0x604>
   157f0:	058000b4 	movhi	r22,2
   157f4:	b5a61904 	addi	r22,r22,-26524
   157f8:	b0800017 	ldw	r2,0(r22)
   157fc:	b885883a 	add	r2,r23,r2
   15800:	b0800015 	stw	r2,0(r22)
   15804:	e500cf26 	beq	fp,r20,15b44 <_malloc_r+0x6dc>
   15808:	d1200217 	ldw	r4,-32760(gp)
   1580c:	00ffffc4 	movi	r3,-1
   15810:	20c0e026 	beq	r4,r3,15b94 <_malloc_r+0x72c>
   15814:	a739c83a 	sub	fp,r20,fp
   15818:	1705883a 	add	r2,r2,fp
   1581c:	b0800015 	stw	r2,0(r22)
   15820:	a08001cc 	andi	r2,r20,7
   15824:	1000a526 	beq	r2,zero,15abc <_malloc_r+0x654>
   15828:	a0a9c83a 	sub	r20,r20,r2
   1582c:	00c02204 	movi	r3,136
   15830:	a5000204 	addi	r20,r20,8
   15834:	1885c83a 	sub	r2,r3,r2
   15838:	a5c7883a 	add	r3,r20,r23
   1583c:	18c01fcc 	andi	r3,r3,127
   15840:	10efc83a 	sub	r23,r2,r3
   15844:	9009883a 	mov	r4,r18
   15848:	b80b883a 	mov	r5,r23
   1584c:	0015c900 	call	15c90 <_sbrk_r>
   15850:	00ffffc4 	movi	r3,-1
   15854:	10c0cc26 	beq	r2,r3,15b88 <_malloc_r+0x720>
   15858:	1505c83a 	sub	r2,r2,r20
   1585c:	b887883a 	add	r3,r23,r2
   15860:	18c00054 	ori	r3,r3,1
   15864:	b0800017 	ldw	r2,0(r22)
   15868:	9d000215 	stw	r20,8(r19)
   1586c:	a0c00115 	stw	r3,4(r20)
   15870:	b885883a 	add	r2,r23,r2
   15874:	b0800015 	stw	r2,0(r22)
   15878:	84c00e26 	beq	r16,r19,158b4 <_malloc_r+0x44c>
   1587c:	00c003c4 	movi	r3,15
   15880:	1d40902e 	bgeu	r3,r21,15ac4 <_malloc_r+0x65c>
   15884:	ad7ffd04 	addi	r21,r21,-12
   15888:	013ffe04 	movi	r4,-8
   1588c:	a908703a 	and	r4,r21,r4
   15890:	810b883a 	add	r5,r16,r4
   15894:	01800144 	movi	r6,5
   15898:	29800115 	stw	r6,4(r5)
   1589c:	29800215 	stw	r6,8(r5)
   158a0:	81400117 	ldw	r5,4(r16)
   158a4:	2940004c 	andi	r5,r5,1
   158a8:	214ab03a 	or	r5,r4,r5
   158ac:	81400115 	stw	r5,4(r16)
   158b0:	1900ae36 	bltu	r3,r4,15b6c <_malloc_r+0x704>
   158b4:	d0e1cc17 	ldw	r3,-30928(gp)
   158b8:	1880012e 	bgeu	r3,r2,158c0 <_malloc_r+0x458>
   158bc:	d0a1cc15 	stw	r2,-30928(gp)
   158c0:	d0e1cb17 	ldw	r3,-30932(gp)
   158c4:	9c000217 	ldw	r16,8(r19)
   158c8:	1880012e 	bgeu	r3,r2,158d0 <_malloc_r+0x468>
   158cc:	d0a1cb15 	stw	r2,-30932(gp)
   158d0:	80c00117 	ldw	r3,4(r16)
   158d4:	00bfff04 	movi	r2,-4
   158d8:	1886703a 	and	r3,r3,r2
   158dc:	1c45c83a 	sub	r2,r3,r17
   158e0:	1c400236 	bltu	r3,r17,158ec <_malloc_r+0x484>
   158e4:	00c003c4 	movi	r3,15
   158e8:	18800416 	blt	r3,r2,158fc <_malloc_r+0x494>
   158ec:	9009883a 	mov	r4,r18
   158f0:	0016d940 	call	16d94 <__malloc_unlock>
   158f4:	0005883a 	mov	r2,zero
   158f8:	003f0906 	br	15520 <_malloc_r+0xb8>
   158fc:	88c00054 	ori	r3,r17,1
   15900:	10800054 	ori	r2,r2,1
   15904:	80c00115 	stw	r3,4(r16)
   15908:	8463883a 	add	r17,r16,r17
   1590c:	88800115 	stw	r2,4(r17)
   15910:	9009883a 	mov	r4,r18
   15914:	9c400215 	stw	r17,8(r19)
   15918:	0016d940 	call	16d94 <__malloc_unlock>
   1591c:	80800204 	addi	r2,r16,8
   15920:	003eff06 	br	15520 <_malloc_r+0xb8>
   15924:	00800504 	movi	r2,20
   15928:	1100492e 	bgeu	r2,r4,15a50 <_malloc_r+0x5e8>
   1592c:	00801504 	movi	r2,84
   15930:	11005c36 	bltu	r2,r4,15aa4 <_malloc_r+0x63c>
   15934:	8808d33a 	srli	r4,r17,12
   15938:	21001b84 	addi	r4,r4,110
   1593c:	210b883a 	add	r5,r4,r4
   15940:	003f1006 	br	15584 <_malloc_r+0x11c>
   15944:	1006d27a 	srli	r3,r2,9
   15948:	01400104 	movi	r5,4
   1594c:	28c0432e 	bgeu	r5,r3,15a5c <_malloc_r+0x5f4>
   15950:	01400504 	movi	r5,20
   15954:	28c07036 	bltu	r5,r3,15b18 <_malloc_r+0x6b0>
   15958:	194016c4 	addi	r5,r3,91
   1595c:	294d883a 	add	r6,r5,r5
   15960:	318d883a 	add	r6,r6,r6
   15964:	318d883a 	add	r6,r6,r6
   15968:	998d883a 	add	r6,r19,r6
   1596c:	30c00217 	ldw	r3,8(r6)
   15970:	01c000b4 	movhi	r7,2
   15974:	39e2cd04 	addi	r7,r7,-29900
   15978:	19805726 	beq	r3,r6,15ad8 <_malloc_r+0x670>
   1597c:	01ffff04 	movi	r7,-4
   15980:	19400117 	ldw	r5,4(r3)
   15984:	29ca703a 	and	r5,r5,r7
   15988:	1140022e 	bgeu	r2,r5,15994 <_malloc_r+0x52c>
   1598c:	18c00217 	ldw	r3,8(r3)
   15990:	30fffb1e 	bne	r6,r3,15980 <_malloc_r+0x518>
   15994:	19400317 	ldw	r5,12(r3)
   15998:	98800117 	ldw	r2,4(r19)
   1599c:	81400315 	stw	r5,12(r16)
   159a0:	80c00215 	stw	r3,8(r16)
   159a4:	2c000215 	stw	r16,8(r5)
   159a8:	1c000315 	stw	r16,12(r3)
   159ac:	003f2b06 	br	1565c <_malloc_r+0x1f4>
   159b0:	8445883a 	add	r2,r16,r17
   159b4:	8c400054 	ori	r17,r17,1
   159b8:	18800515 	stw	r2,20(r3)
   159bc:	18800415 	stw	r2,16(r3)
   159c0:	29000054 	ori	r4,r5,1
   159c4:	1147883a 	add	r3,r2,r5
   159c8:	84400115 	stw	r17,4(r16)
   159cc:	11000115 	stw	r4,4(r2)
   159d0:	12400315 	stw	r9,12(r2)
   159d4:	12400215 	stw	r9,8(r2)
   159d8:	19400015 	stw	r5,0(r3)
   159dc:	9009883a 	mov	r4,r18
   159e0:	0016d940 	call	16d94 <__malloc_unlock>
   159e4:	80800204 	addi	r2,r16,8
   159e8:	003ecd06 	br	15520 <_malloc_r+0xb8>
   159ec:	18800117 	ldw	r2,4(r3)
   159f0:	003f1a06 	br	1565c <_malloc_r+0x1f4>
   159f4:	5ac00044 	addi	r11,r11,1
   159f8:	588000cc 	andi	r2,r11,3
   159fc:	52800204 	addi	r10,r10,8
   15a00:	103f2e1e 	bne	r2,zero,156bc <_malloc_r+0x254>
   15a04:	20c000cc 	andi	r3,r4,3
   15a08:	60bffe04 	addi	r2,r12,-8
   15a0c:	18006f26 	beq	r3,zero,15bcc <_malloc_r+0x764>
   15a10:	63000017 	ldw	r12,0(r12)
   15a14:	213fffc4 	addi	r4,r4,-1
   15a18:	60bffa26 	beq	r12,r2,15a04 <_malloc_r+0x59c>
   15a1c:	98800117 	ldw	r2,4(r19)
   15a20:	294b883a 	add	r5,r5,r5
   15a24:	117f5a36 	bltu	r2,r5,15790 <_malloc_r+0x328>
   15a28:	283f5926 	beq	r5,zero,15790 <_malloc_r+0x328>
   15a2c:	1146703a 	and	r3,r2,r5
   15a30:	18001626 	beq	r3,zero,15a8c <_malloc_r+0x624>
   15a34:	5809883a 	mov	r4,r11
   15a38:	003f1a06 	br	156a4 <_malloc_r+0x23c>
   15a3c:	80800204 	addi	r2,r16,8
   15a40:	84000517 	ldw	r16,20(r16)
   15a44:	143ea81e 	bne	r2,r16,154e8 <_malloc_r+0x80>
   15a48:	21000084 	addi	r4,r4,2
   15a4c:	003ee306 	br	155dc <_malloc_r+0x174>
   15a50:	210016c4 	addi	r4,r4,91
   15a54:	210b883a 	add	r5,r4,r4
   15a58:	003eca06 	br	15584 <_malloc_r+0x11c>
   15a5c:	100ad1ba 	srli	r5,r2,6
   15a60:	29400e04 	addi	r5,r5,56
   15a64:	294d883a 	add	r6,r5,r5
   15a68:	003fbd06 	br	15960 <_malloc_r+0x4f8>
   15a6c:	84ff6026 	beq	r16,r19,157f0 <_malloc_r+0x388>
   15a70:	008000b4 	movhi	r2,2
   15a74:	10a2cd04 	addi	r2,r2,-29900
   15a78:	14000217 	ldw	r16,8(r2)
   15a7c:	00bfff04 	movi	r2,-4
   15a80:	80c00117 	ldw	r3,4(r16)
   15a84:	1886703a 	and	r3,r3,r2
   15a88:	003f9406 	br	158dc <_malloc_r+0x474>
   15a8c:	294b883a 	add	r5,r5,r5
   15a90:	1146703a 	and	r3,r2,r5
   15a94:	5ac00104 	addi	r11,r11,4
   15a98:	183ffc26 	beq	r3,zero,15a8c <_malloc_r+0x624>
   15a9c:	5809883a 	mov	r4,r11
   15aa0:	003f0006 	br	156a4 <_malloc_r+0x23c>
   15aa4:	00805504 	movi	r2,340
   15aa8:	11001336 	bltu	r2,r4,15af8 <_malloc_r+0x690>
   15aac:	8808d3fa 	srli	r4,r17,15
   15ab0:	21001dc4 	addi	r4,r4,119
   15ab4:	210b883a 	add	r5,r4,r4
   15ab8:	003eb206 	br	15584 <_malloc_r+0x11c>
   15abc:	00802004 	movi	r2,128
   15ac0:	003f5d06 	br	15838 <_malloc_r+0x3d0>
   15ac4:	00800044 	movi	r2,1
   15ac8:	a0800115 	stw	r2,4(r20)
   15acc:	a021883a 	mov	r16,r20
   15ad0:	0007883a 	mov	r3,zero
   15ad4:	003f8106 	br	158dc <_malloc_r+0x474>
   15ad8:	280bd0ba 	srai	r5,r5,2
   15adc:	01800044 	movi	r6,1
   15ae0:	38800117 	ldw	r2,4(r7)
   15ae4:	314c983a 	sll	r6,r6,r5
   15ae8:	180b883a 	mov	r5,r3
   15aec:	3084b03a 	or	r2,r6,r2
   15af0:	38800115 	stw	r2,4(r7)
   15af4:	003fa906 	br	1599c <_malloc_r+0x534>
   15af8:	00815504 	movi	r2,1364
   15afc:	11001836 	bltu	r2,r4,15b60 <_malloc_r+0x6f8>
   15b00:	8808d4ba 	srli	r4,r17,18
   15b04:	21001f04 	addi	r4,r4,124
   15b08:	210b883a 	add	r5,r4,r4
   15b0c:	003e9d06 	br	15584 <_malloc_r+0x11c>
   15b10:	bdc00404 	addi	r23,r23,16
   15b14:	003f2f06 	br	157d4 <_malloc_r+0x36c>
   15b18:	01401504 	movi	r5,84
   15b1c:	28c01f36 	bltu	r5,r3,15b9c <_malloc_r+0x734>
   15b20:	100ad33a 	srli	r5,r2,12
   15b24:	29401b84 	addi	r5,r5,110
   15b28:	294d883a 	add	r6,r5,r5
   15b2c:	003f8c06 	br	15960 <_malloc_r+0x4f8>
   15b30:	9c000217 	ldw	r16,8(r19)
   15b34:	00bfff04 	movi	r2,-4
   15b38:	80c00117 	ldw	r3,4(r16)
   15b3c:	1886703a 	and	r3,r3,r2
   15b40:	003f6606 	br	158dc <_malloc_r+0x474>
   15b44:	e0c01fcc 	andi	r3,fp,127
   15b48:	183f2f1e 	bne	r3,zero,15808 <_malloc_r+0x3a0>
   15b4c:	98c00217 	ldw	r3,8(r19)
   15b50:	bd49883a 	add	r4,r23,r21
   15b54:	21000054 	ori	r4,r4,1
   15b58:	19000115 	stw	r4,4(r3)
   15b5c:	003f5506 	br	158b4 <_malloc_r+0x44c>
   15b60:	01403f04 	movi	r5,252
   15b64:	01001f84 	movi	r4,126
   15b68:	003e8606 	br	15584 <_malloc_r+0x11c>
   15b6c:	9009883a 	mov	r4,r18
   15b70:	81400204 	addi	r5,r16,8
   15b74:	00151700 	call	15170 <_free_r>
   15b78:	008000b4 	movhi	r2,2
   15b7c:	10a61904 	addi	r2,r2,-26524
   15b80:	10800017 	ldw	r2,0(r2)
   15b84:	003f4b06 	br	158b4 <_malloc_r+0x44c>
   15b88:	00c00044 	movi	r3,1
   15b8c:	002f883a 	mov	r23,zero
   15b90:	003f3406 	br	15864 <_malloc_r+0x3fc>
   15b94:	d5200215 	stw	r20,-32760(gp)
   15b98:	003f2106 	br	15820 <_malloc_r+0x3b8>
   15b9c:	01405504 	movi	r5,340
   15ba0:	28c00436 	bltu	r5,r3,15bb4 <_malloc_r+0x74c>
   15ba4:	100ad3fa 	srli	r5,r2,15
   15ba8:	29401dc4 	addi	r5,r5,119
   15bac:	294d883a 	add	r6,r5,r5
   15bb0:	003f6b06 	br	15960 <_malloc_r+0x4f8>
   15bb4:	01415504 	movi	r5,1364
   15bb8:	28c00936 	bltu	r5,r3,15be0 <_malloc_r+0x778>
   15bbc:	100ad4ba 	srli	r5,r2,18
   15bc0:	29401f04 	addi	r5,r5,124
   15bc4:	294d883a 	add	r6,r5,r5
   15bc8:	003f6506 	br	15960 <_malloc_r+0x4f8>
   15bcc:	98800117 	ldw	r2,4(r19)
   15bd0:	0146303a 	nor	r3,zero,r5
   15bd4:	1884703a 	and	r2,r3,r2
   15bd8:	98800115 	stw	r2,4(r19)
   15bdc:	003f9006 	br	15a20 <_malloc_r+0x5b8>
   15be0:	01803f04 	movi	r6,252
   15be4:	01401f84 	movi	r5,126
   15be8:	003f5d06 	br	15960 <_malloc_r+0x4f8>

00015bec <memcpy>:
   15bec:	2005883a 	mov	r2,r4
   15bf0:	30000726 	beq	r6,zero,15c10 <memcpy+0x24>
   15bf4:	218d883a 	add	r6,r4,r6
   15bf8:	2007883a 	mov	r3,r4
   15bfc:	29c00003 	ldbu	r7,0(r5)
   15c00:	18c00044 	addi	r3,r3,1
   15c04:	29400044 	addi	r5,r5,1
   15c08:	19ffffc5 	stb	r7,-1(r3)
   15c0c:	19bffb1e 	bne	r3,r6,15bfc <memcpy+0x10>
   15c10:	f800283a 	ret

00015c14 <memmove>:
   15c14:	2005883a 	mov	r2,r4
   15c18:	29000b2e 	bgeu	r5,r4,15c48 <memmove+0x34>
   15c1c:	2987883a 	add	r3,r5,r6
   15c20:	20c0092e 	bgeu	r4,r3,15c48 <memmove+0x34>
   15c24:	218b883a 	add	r5,r4,r6
   15c28:	30000f26 	beq	r6,zero,15c68 <memmove+0x54>
   15c2c:	198dc83a 	sub	r6,r3,r6
   15c30:	18ffffc4 	addi	r3,r3,-1
   15c34:	19000003 	ldbu	r4,0(r3)
   15c38:	297fffc4 	addi	r5,r5,-1
   15c3c:	29000005 	stb	r4,0(r5)
   15c40:	19bffb1e 	bne	r3,r6,15c30 <memmove+0x1c>
   15c44:	f800283a 	ret
   15c48:	30000826 	beq	r6,zero,15c6c <memmove+0x58>
   15c4c:	118d883a 	add	r6,r2,r6
   15c50:	1007883a 	mov	r3,r2
   15c54:	29c00003 	ldbu	r7,0(r5)
   15c58:	18c00044 	addi	r3,r3,1
   15c5c:	29400044 	addi	r5,r5,1
   15c60:	19ffffc5 	stb	r7,-1(r3)
   15c64:	19bffb1e 	bne	r3,r6,15c54 <memmove+0x40>
   15c68:	f800283a 	ret
   15c6c:	f800283a 	ret

00015c70 <memset>:
   15c70:	2005883a 	mov	r2,r4
   15c74:	30000526 	beq	r6,zero,15c8c <memset+0x1c>
   15c78:	218d883a 	add	r6,r4,r6
   15c7c:	2007883a 	mov	r3,r4
   15c80:	19400005 	stb	r5,0(r3)
   15c84:	18c00044 	addi	r3,r3,1
   15c88:	19bffd1e 	bne	r3,r6,15c80 <memset+0x10>
   15c8c:	f800283a 	ret

00015c90 <_sbrk_r>:
   15c90:	defffd04 	addi	sp,sp,-12
   15c94:	dc400115 	stw	r17,4(sp)
   15c98:	dc000015 	stw	r16,0(sp)
   15c9c:	2023883a 	mov	r17,r4
   15ca0:	040000b4 	movhi	r16,2
   15ca4:	84261204 	addi	r16,r16,-26552
   15ca8:	2809883a 	mov	r4,r5
   15cac:	dfc00215 	stw	ra,8(sp)
   15cb0:	80000015 	stw	zero,0(r16)
   15cb4:	0016df80 	call	16df8 <sbrk>
   15cb8:	00ffffc4 	movi	r3,-1
   15cbc:	10c00526 	beq	r2,r3,15cd4 <_sbrk_r+0x44>
   15cc0:	dfc00217 	ldw	ra,8(sp)
   15cc4:	dc400117 	ldw	r17,4(sp)
   15cc8:	dc000017 	ldw	r16,0(sp)
   15ccc:	dec00304 	addi	sp,sp,12
   15cd0:	f800283a 	ret
   15cd4:	80c00017 	ldw	r3,0(r16)
   15cd8:	183ff926 	beq	r3,zero,15cc0 <_sbrk_r+0x30>
   15cdc:	88c00015 	stw	r3,0(r17)
   15ce0:	dfc00217 	ldw	ra,8(sp)
   15ce4:	dc400117 	ldw	r17,4(sp)
   15ce8:	dc000017 	ldw	r16,0(sp)
   15cec:	dec00304 	addi	sp,sp,12
   15cf0:	f800283a 	ret

00015cf4 <__extendsfdf2>:
   15cf4:	defff904 	addi	sp,sp,-28
   15cf8:	d9000515 	stw	r4,20(sp)
   15cfc:	d9400104 	addi	r5,sp,4
   15d00:	d9000504 	addi	r4,sp,20
   15d04:	dfc00615 	stw	ra,24(sp)
   15d08:	0010f680 	call	10f68 <__unpack_f>
   15d0c:	d9c00417 	ldw	r7,16(sp)
   15d10:	d9000117 	ldw	r4,4(sp)
   15d14:	d9400217 	ldw	r5,8(sp)
   15d18:	3804d0ba 	srli	r2,r7,2
   15d1c:	d9800317 	ldw	r6,12(sp)
   15d20:	380e97ba 	slli	r7,r7,30
   15d24:	d8800015 	stw	r2,0(sp)
   15d28:	00168e40 	call	168e4 <__make_dp>
   15d2c:	dfc00617 	ldw	ra,24(sp)
   15d30:	dec00704 	addi	sp,sp,28
   15d34:	f800283a 	ret

00015d38 <_fpadd_parts>:
   15d38:	2005883a 	mov	r2,r4
   15d3c:	21000017 	ldw	r4,0(r4)
   15d40:	01c00044 	movi	r7,1
   15d44:	3900622e 	bgeu	r7,r4,15ed0 <_fpadd_parts+0x198>
   15d48:	28c00017 	ldw	r3,0(r5)
   15d4c:	38c05f2e 	bgeu	r7,r3,15ecc <_fpadd_parts+0x194>
   15d50:	01c00104 	movi	r7,4
   15d54:	21c0c626 	beq	r4,r7,16070 <_fpadd_parts+0x338>
   15d58:	19c05c26 	beq	r3,r7,15ecc <_fpadd_parts+0x194>
   15d5c:	01c00084 	movi	r7,2
   15d60:	19c06b26 	beq	r3,r7,15f10 <_fpadd_parts+0x1d8>
   15d64:	21c05926 	beq	r4,r7,15ecc <_fpadd_parts+0x194>
   15d68:	11c00217 	ldw	r7,8(r2)
   15d6c:	2ac00217 	ldw	r11,8(r5)
   15d70:	13000317 	ldw	r12,12(r2)
   15d74:	13400417 	ldw	r13,16(r2)
   15d78:	3ac9c83a 	sub	r4,r7,r11
   15d7c:	2a000317 	ldw	r8,12(r5)
   15d80:	2a400417 	ldw	r9,16(r5)
   15d84:	2015883a 	mov	r10,r4
   15d88:	20007516 	blt	r4,zero,15f60 <_fpadd_parts+0x228>
   15d8c:	00c00fc4 	movi	r3,63
   15d90:	1a805016 	blt	r3,r10,15ed4 <_fpadd_parts+0x19c>
   15d94:	0100870e 	bge	zero,r4,15fb4 <_fpadd_parts+0x27c>
   15d98:	50fff804 	addi	r3,r10,-32
   15d9c:	18009916 	blt	r3,zero,16004 <_fpadd_parts+0x2cc>
   15da0:	48d6d83a 	srl	r11,r9,r3
   15da4:	001d883a 	mov	r14,zero
   15da8:	18009e16 	blt	r3,zero,16024 <_fpadd_parts+0x2ec>
   15dac:	01000044 	movi	r4,1
   15db0:	20c6983a 	sll	r3,r4,r3
   15db4:	0015883a 	mov	r10,zero
   15db8:	513fffc4 	addi	r4,r10,-1
   15dbc:	2295403a 	cmpgeu	r10,r4,r10
   15dc0:	1a87c83a 	sub	r3,r3,r10
   15dc4:	1a52703a 	and	r9,r3,r9
   15dc8:	2210703a 	and	r8,r4,r8
   15dcc:	4250b03a 	or	r8,r8,r9
   15dd0:	4010c03a 	cmpne	r8,r8,zero
   15dd4:	42d0b03a 	or	r8,r8,r11
   15dd8:	7013883a 	mov	r9,r14
   15ddc:	11000117 	ldw	r4,4(r2)
   15de0:	28800117 	ldw	r2,4(r5)
   15de4:	20804126 	beq	r4,r2,15eec <_fpadd_parts+0x1b4>
   15de8:	20006326 	beq	r4,zero,15f78 <_fpadd_parts+0x240>
   15dec:	4305c83a 	sub	r2,r8,r12
   15df0:	4091803a 	cmpltu	r8,r8,r2
   15df4:	4b47c83a 	sub	r3,r9,r13
   15df8:	1a07c83a 	sub	r3,r3,r8
   15dfc:	18006316 	blt	r3,zero,15f8c <_fpadd_parts+0x254>
   15e00:	30000115 	stw	zero,4(r6)
   15e04:	31c00215 	stw	r7,8(r6)
   15e08:	30800315 	stw	r2,12(r6)
   15e0c:	30c00415 	stw	r3,16(r6)
   15e10:	11ffffc4 	addi	r7,r2,-1
   15e14:	388b403a 	cmpgeu	r5,r7,r2
   15e18:	194bc83a 	sub	r5,r3,r5
   15e1c:	01040034 	movhi	r4,4096
   15e20:	213fffc4 	addi	r4,r4,-1
   15e24:	21401736 	bltu	r4,r5,15e84 <_fpadd_parts+0x14c>
   15e28:	29008226 	beq	r5,r4,16034 <_fpadd_parts+0x2fc>
   15e2c:	31400217 	ldw	r5,8(r6)
   15e30:	02840034 	movhi	r10,4096
   15e34:	52bfffc4 	addi	r10,r10,-1
   15e38:	033fff84 	movi	r12,-2
   15e3c:	297fffc4 	addi	r5,r5,-1
   15e40:	00000106 	br	15e48 <_fpadd_parts+0x110>
   15e44:	3a804a26 	beq	r7,r10,15f70 <_fpadd_parts+0x238>
   15e48:	1089883a 	add	r4,r2,r2
   15e4c:	2091803a 	cmpltu	r8,r4,r2
   15e50:	18c7883a 	add	r3,r3,r3
   15e54:	227fffc4 	addi	r9,r4,-1
   15e58:	40d1883a 	add	r8,r8,r3
   15e5c:	490f403a 	cmpgeu	r7,r9,r4
   15e60:	41cfc83a 	sub	r7,r8,r7
   15e64:	2817883a 	mov	r11,r5
   15e68:	2005883a 	mov	r2,r4
   15e6c:	4007883a 	mov	r3,r8
   15e70:	297fffc4 	addi	r5,r5,-1
   15e74:	51fff32e 	bgeu	r10,r7,15e44 <_fpadd_parts+0x10c>
   15e78:	31000315 	stw	r4,12(r6)
   15e7c:	32000415 	stw	r8,16(r6)
   15e80:	32c00215 	stw	r11,8(r6)
   15e84:	010000c4 	movi	r4,3
   15e88:	31000015 	stw	r4,0(r6)
   15e8c:	01080034 	movhi	r4,8192
   15e90:	213fffc4 	addi	r4,r4,-1
   15e94:	20c00b2e 	bgeu	r4,r3,15ec4 <_fpadd_parts+0x18c>
   15e98:	180e97fa 	slli	r7,r3,31
   15e9c:	1008d07a 	srli	r4,r2,1
   15ea0:	31400217 	ldw	r5,8(r6)
   15ea4:	1806d07a 	srli	r3,r3,1
   15ea8:	1080004c 	andi	r2,r2,1
   15eac:	3908b03a 	or	r4,r7,r4
   15eb0:	1108b03a 	or	r4,r2,r4
   15eb4:	29400044 	addi	r5,r5,1
   15eb8:	31000315 	stw	r4,12(r6)
   15ebc:	30c00415 	stw	r3,16(r6)
   15ec0:	31400215 	stw	r5,8(r6)
   15ec4:	3005883a 	mov	r2,r6
   15ec8:	f800283a 	ret
   15ecc:	2805883a 	mov	r2,r5
   15ed0:	f800283a 	ret
   15ed4:	59c01e0e 	bge	r11,r7,15f50 <_fpadd_parts+0x218>
   15ed8:	11000117 	ldw	r4,4(r2)
   15edc:	28800117 	ldw	r2,4(r5)
   15ee0:	0011883a 	mov	r8,zero
   15ee4:	0013883a 	mov	r9,zero
   15ee8:	20bfbf1e 	bne	r4,r2,15de8 <_fpadd_parts+0xb0>
   15eec:	4305883a 	add	r2,r8,r12
   15ef0:	1207803a 	cmpltu	r3,r2,r8
   15ef4:	4b53883a 	add	r9,r9,r13
   15ef8:	1a47883a 	add	r3,r3,r9
   15efc:	31000115 	stw	r4,4(r6)
   15f00:	31c00215 	stw	r7,8(r6)
   15f04:	30800315 	stw	r2,12(r6)
   15f08:	30c00415 	stw	r3,16(r6)
   15f0c:	003fdd06 	br	15e84 <_fpadd_parts+0x14c>
   15f10:	20ffef1e 	bne	r4,r3,15ed0 <_fpadd_parts+0x198>
   15f14:	31000015 	stw	r4,0(r6)
   15f18:	10c00117 	ldw	r3,4(r2)
   15f1c:	30c00115 	stw	r3,4(r6)
   15f20:	10c00217 	ldw	r3,8(r2)
   15f24:	11000117 	ldw	r4,4(r2)
   15f28:	29400117 	ldw	r5,4(r5)
   15f2c:	30c00215 	stw	r3,8(r6)
   15f30:	10c00317 	ldw	r3,12(r2)
   15f34:	2908703a 	and	r4,r5,r4
   15f38:	30c00315 	stw	r3,12(r6)
   15f3c:	10c00417 	ldw	r3,16(r2)
   15f40:	31000115 	stw	r4,4(r6)
   15f44:	3005883a 	mov	r2,r6
   15f48:	30c00415 	stw	r3,16(r6)
   15f4c:	f800283a 	ret
   15f50:	580f883a 	mov	r7,r11
   15f54:	0019883a 	mov	r12,zero
   15f58:	001b883a 	mov	r13,zero
   15f5c:	003f9f06 	br	15ddc <_fpadd_parts+0xa4>
   15f60:	0115c83a 	sub	r10,zero,r4
   15f64:	00c00fc4 	movi	r3,63
   15f68:	1abfda16 	blt	r3,r10,15ed4 <_fpadd_parts+0x19c>
   15f6c:	003f8906 	br	15d94 <_fpadd_parts+0x5c>
   15f70:	627fb52e 	bgeu	r12,r9,15e48 <_fpadd_parts+0x110>
   15f74:	003fc006 	br	15e78 <_fpadd_parts+0x140>
   15f78:	6205c83a 	sub	r2,r12,r8
   15f7c:	6099803a 	cmpltu	r12,r12,r2
   15f80:	6a47c83a 	sub	r3,r13,r9
   15f84:	1b07c83a 	sub	r3,r3,r12
   15f88:	183f9d0e 	bge	r3,zero,15e00 <_fpadd_parts+0xc8>
   15f8c:	0085c83a 	sub	r2,zero,r2
   15f90:	1008c03a 	cmpne	r4,r2,zero
   15f94:	00c7c83a 	sub	r3,zero,r3
   15f98:	1907c83a 	sub	r3,r3,r4
   15f9c:	01000044 	movi	r4,1
   15fa0:	31000115 	stw	r4,4(r6)
   15fa4:	31c00215 	stw	r7,8(r6)
   15fa8:	30800315 	stw	r2,12(r6)
   15fac:	30c00415 	stw	r3,16(r6)
   15fb0:	003f9706 	br	15e10 <_fpadd_parts+0xd8>
   15fb4:	203f8926 	beq	r4,zero,15ddc <_fpadd_parts+0xa4>
   15fb8:	50fff804 	addi	r3,r10,-32
   15fbc:	3a8f883a 	add	r7,r7,r10
   15fc0:	18002316 	blt	r3,zero,16050 <_fpadd_parts+0x318>
   15fc4:	68d6d83a 	srl	r11,r13,r3
   15fc8:	001d883a 	mov	r14,zero
   15fcc:	18001c16 	blt	r3,zero,16040 <_fpadd_parts+0x308>
   15fd0:	01000044 	movi	r4,1
   15fd4:	20c6983a 	sll	r3,r4,r3
   15fd8:	0015883a 	mov	r10,zero
   15fdc:	513fffc4 	addi	r4,r10,-1
   15fe0:	2295403a 	cmpgeu	r10,r4,r10
   15fe4:	1a87c83a 	sub	r3,r3,r10
   15fe8:	1b5a703a 	and	r13,r3,r13
   15fec:	2318703a 	and	r12,r4,r12
   15ff0:	6358b03a 	or	r12,r12,r13
   15ff4:	6018c03a 	cmpne	r12,r12,zero
   15ff8:	62d8b03a 	or	r12,r12,r11
   15ffc:	701b883a 	mov	r13,r14
   16000:	003f7606 	br	15ddc <_fpadd_parts+0xa4>
   16004:	4808907a 	slli	r4,r9,1
   16008:	02c007c4 	movi	r11,31
   1600c:	5a97c83a 	sub	r11,r11,r10
   16010:	22c8983a 	sll	r4,r4,r11
   16014:	4296d83a 	srl	r11,r8,r10
   16018:	4a9cd83a 	srl	r14,r9,r10
   1601c:	22d6b03a 	or	r11,r4,r11
   16020:	003f6106 	br	15da8 <_fpadd_parts+0x70>
   16024:	00c00044 	movi	r3,1
   16028:	1a94983a 	sll	r10,r3,r10
   1602c:	0007883a 	mov	r3,zero
   16030:	003f6106 	br	15db8 <_fpadd_parts+0x80>
   16034:	013fff84 	movi	r4,-2
   16038:	21ff7c2e 	bgeu	r4,r7,15e2c <_fpadd_parts+0xf4>
   1603c:	003f9106 	br	15e84 <_fpadd_parts+0x14c>
   16040:	00c00044 	movi	r3,1
   16044:	1a94983a 	sll	r10,r3,r10
   16048:	0007883a 	mov	r3,zero
   1604c:	003fe306 	br	15fdc <_fpadd_parts+0x2a4>
   16050:	6816907a 	slli	r11,r13,1
   16054:	010007c4 	movi	r4,31
   16058:	2289c83a 	sub	r4,r4,r10
   1605c:	5908983a 	sll	r4,r11,r4
   16060:	6296d83a 	srl	r11,r12,r10
   16064:	6a9cd83a 	srl	r14,r13,r10
   16068:	22d6b03a 	or	r11,r4,r11
   1606c:	003fd706 	br	15fcc <_fpadd_parts+0x294>
   16070:	193f971e 	bne	r3,r4,15ed0 <_fpadd_parts+0x198>
   16074:	11000117 	ldw	r4,4(r2)
   16078:	28c00117 	ldw	r3,4(r5)
   1607c:	20ff9426 	beq	r4,r3,15ed0 <_fpadd_parts+0x198>
   16080:	008000b4 	movhi	r2,2
   16084:	10a28504 	addi	r2,r2,-30188
   16088:	f800283a 	ret

0001608c <__adddf3>:
   1608c:	deffec04 	addi	sp,sp,-80
   16090:	d9001115 	stw	r4,68(sp)
   16094:	d9401215 	stw	r5,72(sp)
   16098:	d9001104 	addi	r4,sp,68
   1609c:	d9400a04 	addi	r5,sp,40
   160a0:	dfc01315 	stw	ra,76(sp)
   160a4:	d9c01015 	stw	r7,64(sp)
   160a8:	d9800f15 	stw	r6,60(sp)
   160ac:	0016a4c0 	call	16a4c <__unpack_d>
   160b0:	d9000f04 	addi	r4,sp,60
   160b4:	d9400504 	addi	r5,sp,20
   160b8:	0016a4c0 	call	16a4c <__unpack_d>
   160bc:	d9000a04 	addi	r4,sp,40
   160c0:	d9400504 	addi	r5,sp,20
   160c4:	d80d883a 	mov	r6,sp
   160c8:	0015d380 	call	15d38 <_fpadd_parts>
   160cc:	1009883a 	mov	r4,r2
   160d0:	00110300 	call	11030 <__pack_d>
   160d4:	dfc01317 	ldw	ra,76(sp)
   160d8:	dec01404 	addi	sp,sp,80
   160dc:	f800283a 	ret

000160e0 <__subdf3>:
   160e0:	deffec04 	addi	sp,sp,-80
   160e4:	d9001115 	stw	r4,68(sp)
   160e8:	d9401215 	stw	r5,72(sp)
   160ec:	d9001104 	addi	r4,sp,68
   160f0:	d9400a04 	addi	r5,sp,40
   160f4:	dfc01315 	stw	ra,76(sp)
   160f8:	d9c01015 	stw	r7,64(sp)
   160fc:	d9800f15 	stw	r6,60(sp)
   16100:	0016a4c0 	call	16a4c <__unpack_d>
   16104:	d9000f04 	addi	r4,sp,60
   16108:	d9400504 	addi	r5,sp,20
   1610c:	0016a4c0 	call	16a4c <__unpack_d>
   16110:	d8800617 	ldw	r2,24(sp)
   16114:	d9000a04 	addi	r4,sp,40
   16118:	d9400504 	addi	r5,sp,20
   1611c:	d80d883a 	mov	r6,sp
   16120:	1080005c 	xori	r2,r2,1
   16124:	d8800615 	stw	r2,24(sp)
   16128:	0015d380 	call	15d38 <_fpadd_parts>
   1612c:	1009883a 	mov	r4,r2
   16130:	00110300 	call	11030 <__pack_d>
   16134:	dfc01317 	ldw	ra,76(sp)
   16138:	dec01404 	addi	sp,sp,80
   1613c:	f800283a 	ret

00016140 <__muldf3>:
   16140:	deffe404 	addi	sp,sp,-112
   16144:	d9001115 	stw	r4,68(sp)
   16148:	d9401215 	stw	r5,72(sp)
   1614c:	d9001104 	addi	r4,sp,68
   16150:	d9400a04 	addi	r5,sp,40
   16154:	dfc01b15 	stw	ra,108(sp)
   16158:	d9800f15 	stw	r6,60(sp)
   1615c:	d9c01015 	stw	r7,64(sp)
   16160:	ddc01a15 	stw	r23,104(sp)
   16164:	dd801915 	stw	r22,100(sp)
   16168:	dd401815 	stw	r21,96(sp)
   1616c:	dd001715 	stw	r20,92(sp)
   16170:	dcc01615 	stw	r19,88(sp)
   16174:	dc801515 	stw	r18,84(sp)
   16178:	dc401415 	stw	r17,80(sp)
   1617c:	dc001315 	stw	r16,76(sp)
   16180:	0016a4c0 	call	16a4c <__unpack_d>
   16184:	d9000f04 	addi	r4,sp,60
   16188:	d9400504 	addi	r5,sp,20
   1618c:	0016a4c0 	call	16a4c <__unpack_d>
   16190:	d8c00a17 	ldw	r3,40(sp)
   16194:	00800044 	movi	r2,1
   16198:	10c01136 	bltu	r2,r3,161e0 <__muldf3+0xa0>
   1619c:	d8c00b17 	ldw	r3,44(sp)
   161a0:	d8800617 	ldw	r2,24(sp)
   161a4:	d9000a04 	addi	r4,sp,40
   161a8:	1884c03a 	cmpne	r2,r3,r2
   161ac:	d8800b15 	stw	r2,44(sp)
   161b0:	00110300 	call	11030 <__pack_d>
   161b4:	dfc01b17 	ldw	ra,108(sp)
   161b8:	ddc01a17 	ldw	r23,104(sp)
   161bc:	dd801917 	ldw	r22,100(sp)
   161c0:	dd401817 	ldw	r21,96(sp)
   161c4:	dd001717 	ldw	r20,92(sp)
   161c8:	dcc01617 	ldw	r19,88(sp)
   161cc:	dc801517 	ldw	r18,84(sp)
   161d0:	dc401417 	ldw	r17,80(sp)
   161d4:	dc001317 	ldw	r16,76(sp)
   161d8:	dec01c04 	addi	sp,sp,112
   161dc:	f800283a 	ret
   161e0:	d9000517 	ldw	r4,20(sp)
   161e4:	11000636 	bltu	r2,r4,16200 <__muldf3+0xc0>
   161e8:	d8800617 	ldw	r2,24(sp)
   161ec:	d8c00b17 	ldw	r3,44(sp)
   161f0:	d9000504 	addi	r4,sp,20
   161f4:	1884c03a 	cmpne	r2,r3,r2
   161f8:	d8800615 	stw	r2,24(sp)
   161fc:	003fec06 	br	161b0 <__muldf3+0x70>
   16200:	00800104 	movi	r2,4
   16204:	1880051e 	bne	r3,r2,1621c <__muldf3+0xdc>
   16208:	00800084 	movi	r2,2
   1620c:	20bfe31e 	bne	r4,r2,1619c <__muldf3+0x5c>
   16210:	010000b4 	movhi	r4,2
   16214:	21228504 	addi	r4,r4,-30188
   16218:	003fe506 	br	161b0 <__muldf3+0x70>
   1621c:	2080031e 	bne	r4,r2,1622c <__muldf3+0xec>
   16220:	00800084 	movi	r2,2
   16224:	18bffa26 	beq	r3,r2,16210 <__muldf3+0xd0>
   16228:	003fef06 	br	161e8 <__muldf3+0xa8>
   1622c:	00800084 	movi	r2,2
   16230:	18bfda26 	beq	r3,r2,1619c <__muldf3+0x5c>
   16234:	20bfec26 	beq	r4,r2,161e8 <__muldf3+0xa8>
   16238:	dc000d17 	ldw	r16,52(sp)
   1623c:	dd000817 	ldw	r20,32(sp)
   16240:	dc800917 	ldw	r18,36(sp)
   16244:	8009883a 	mov	r4,r16
   16248:	000b883a 	mov	r5,zero
   1624c:	a00d883a 	mov	r6,r20
   16250:	000f883a 	mov	r7,zero
   16254:	0010c800 	call	10c80 <__muldi3>
   16258:	dc400e17 	ldw	r17,56(sp)
   1625c:	9009883a 	mov	r4,r18
   16260:	800d883a 	mov	r6,r16
   16264:	000b883a 	mov	r5,zero
   16268:	000f883a 	mov	r7,zero
   1626c:	102f883a 	mov	r23,r2
   16270:	1827883a 	mov	r19,r3
   16274:	0010c800 	call	10c80 <__muldi3>
   16278:	900d883a 	mov	r6,r18
   1627c:	8809883a 	mov	r4,r17
   16280:	000b883a 	mov	r5,zero
   16284:	000f883a 	mov	r7,zero
   16288:	102b883a 	mov	r21,r2
   1628c:	1821883a 	mov	r16,r3
   16290:	0010c800 	call	10c80 <__muldi3>
   16294:	8809883a 	mov	r4,r17
   16298:	000b883a 	mov	r5,zero
   1629c:	a00d883a 	mov	r6,r20
   162a0:	000f883a 	mov	r7,zero
   162a4:	102d883a 	mov	r22,r2
   162a8:	1825883a 	mov	r18,r3
   162ac:	0010c800 	call	10c80 <__muldi3>
   162b0:	154b883a 	add	r5,r2,r21
   162b4:	2889803a 	cmpltu	r4,r5,r2
   162b8:	1c07883a 	add	r3,r3,r16
   162bc:	20c9883a 	add	r4,r4,r3
   162c0:	24004b36 	bltu	r4,r16,163f0 <__muldf3+0x2b0>
   162c4:	8100011e 	bne	r16,r4,162cc <__muldf3+0x18c>
   162c8:	2d404936 	bltu	r5,r21,163f0 <__muldf3+0x2b0>
   162cc:	0011883a 	mov	r8,zero
   162d0:	0007883a 	mov	r3,zero
   162d4:	2ccb883a 	add	r5,r5,r19
   162d8:	b80d883a 	mov	r6,r23
   162dc:	2cc0012e 	bgeu	r5,r19,162e4 <__muldf3+0x1a4>
   162e0:	02000044 	movi	r8,1
   162e4:	258f883a 	add	r7,r4,r22
   162e8:	3909803a 	cmpltu	r4,r7,r4
   162ec:	da400c17 	ldw	r9,48(sp)
   162f0:	2489883a 	add	r4,r4,r18
   162f4:	d8800717 	ldw	r2,28(sp)
   162f8:	20c9883a 	add	r4,r4,r3
   162fc:	da800b17 	ldw	r10,44(sp)
   16300:	d8c00617 	ldw	r3,24(sp)
   16304:	3a11883a 	add	r8,r7,r8
   16308:	4885883a 	add	r2,r9,r2
   1630c:	50c6c03a 	cmpne	r3,r10,r3
   16310:	41cf803a 	cmpltu	r7,r8,r7
   16314:	12400104 	addi	r9,r2,4
   16318:	d8c00115 	stw	r3,4(sp)
   1631c:	3909883a 	add	r4,r7,r4
   16320:	da400215 	stw	r9,8(sp)
   16324:	03480034 	movhi	r13,8192
   16328:	6b7fffc4 	addi	r13,r13,-1
   1632c:	4007883a 	mov	r3,r8
   16330:	6900102e 	bgeu	r13,r4,16374 <__muldf3+0x234>
   16334:	10800144 	addi	r2,r2,5
   16338:	180ed07a 	srli	r7,r3,1
   1633c:	18c0004c 	andi	r3,r3,1
   16340:	201097fa 	slli	r8,r4,31
   16344:	281697fa 	slli	r11,r5,31
   16348:	2008d07a 	srli	r4,r4,1
   1634c:	3014d07a 	srli	r10,r6,1
   16350:	2812d07a 	srli	r9,r5,1
   16354:	1019883a 	mov	r12,r2
   16358:	18000226 	beq	r3,zero,16364 <__muldf3+0x224>
   1635c:	5a8cb03a 	or	r6,r11,r10
   16360:	49600034 	orhi	r5,r9,32768
   16364:	41c6b03a 	or	r3,r8,r7
   16368:	10800044 	addi	r2,r2,1
   1636c:	693ff236 	bltu	r13,r4,16338 <__muldf3+0x1f8>
   16370:	db000215 	stw	r12,8(sp)
   16374:	03440034 	movhi	r13,4096
   16378:	6b7fffc4 	addi	r13,r13,-1
   1637c:	69001336 	bltu	r13,r4,163cc <__muldf3+0x28c>
   16380:	d8800217 	ldw	r2,8(sp)
   16384:	10bfffc4 	addi	r2,r2,-1
   16388:	18d3883a 	add	r9,r3,r3
   1638c:	48c7803a 	cmpltu	r3,r9,r3
   16390:	2109883a 	add	r4,r4,r4
   16394:	190f883a 	add	r7,r3,r4
   16398:	3191883a 	add	r8,r6,r6
   1639c:	4197803a 	cmpltu	r11,r8,r6
   163a0:	2955883a 	add	r10,r5,r5
   163a4:	1019883a 	mov	r12,r2
   163a8:	4807883a 	mov	r3,r9
   163ac:	3809883a 	mov	r4,r7
   163b0:	2800010e 	bge	r5,zero,163b8 <__muldf3+0x278>
   163b4:	48c00054 	ori	r3,r9,1
   163b8:	400d883a 	mov	r6,r8
   163bc:	5a8b883a 	add	r5,r11,r10
   163c0:	10bfffc4 	addi	r2,r2,-1
   163c4:	69fff02e 	bgeu	r13,r7,16388 <__muldf3+0x248>
   163c8:	db000215 	stw	r12,8(sp)
   163cc:	18803fcc 	andi	r2,r3,255
   163d0:	01c02004 	movi	r7,128
   163d4:	11c00926 	beq	r2,r7,163fc <__muldf3+0x2bc>
   163d8:	008000c4 	movi	r2,3
   163dc:	d9000415 	stw	r4,16(sp)
   163e0:	d8c00315 	stw	r3,12(sp)
   163e4:	d8800015 	stw	r2,0(sp)
   163e8:	d809883a 	mov	r4,sp
   163ec:	003f7006 	br	161b0 <__muldf3+0x70>
   163f0:	0011883a 	mov	r8,zero
   163f4:	00c00044 	movi	r3,1
   163f8:	003fb606 	br	162d4 <__muldf3+0x194>
   163fc:	19c0400c 	andi	r7,r3,256
   16400:	383ff51e 	bne	r7,zero,163d8 <__muldf3+0x298>
   16404:	314ab03a 	or	r5,r6,r5
   16408:	283ff326 	beq	r5,zero,163d8 <__muldf3+0x298>
   1640c:	1885883a 	add	r2,r3,r2
   16410:	10cb803a 	cmpltu	r5,r2,r3
   16414:	00ffc004 	movi	r3,-256
   16418:	10c6703a 	and	r3,r2,r3
   1641c:	2909883a 	add	r4,r5,r4
   16420:	003fed06 	br	163d8 <__muldf3+0x298>

00016424 <__divdf3>:
   16424:	defff104 	addi	sp,sp,-60
   16428:	d9000c15 	stw	r4,48(sp)
   1642c:	d9400d15 	stw	r5,52(sp)
   16430:	d9000c04 	addi	r4,sp,48
   16434:	d9400504 	addi	r5,sp,20
   16438:	dfc00e15 	stw	ra,56(sp)
   1643c:	d9800a15 	stw	r6,40(sp)
   16440:	d9c00b15 	stw	r7,44(sp)
   16444:	0016a4c0 	call	16a4c <__unpack_d>
   16448:	d9000a04 	addi	r4,sp,40
   1644c:	d80b883a 	mov	r5,sp
   16450:	0016a4c0 	call	16a4c <__unpack_d>
   16454:	d8c00517 	ldw	r3,20(sp)
   16458:	00800044 	movi	r2,1
   1645c:	10c00536 	bltu	r2,r3,16474 <__divdf3+0x50>
   16460:	d9000504 	addi	r4,sp,20
   16464:	00110300 	call	11030 <__pack_d>
   16468:	dfc00e17 	ldw	ra,56(sp)
   1646c:	dec00f04 	addi	sp,sp,60
   16470:	f800283a 	ret
   16474:	d9000017 	ldw	r4,0(sp)
   16478:	11000536 	bltu	r2,r4,16490 <__divdf3+0x6c>
   1647c:	d809883a 	mov	r4,sp
   16480:	00110300 	call	11030 <__pack_d>
   16484:	dfc00e17 	ldw	ra,56(sp)
   16488:	dec00f04 	addi	sp,sp,60
   1648c:	f800283a 	ret
   16490:	d9800617 	ldw	r6,24(sp)
   16494:	d9400117 	ldw	r5,4(sp)
   16498:	00800104 	movi	r2,4
   1649c:	314af03a 	xor	r5,r6,r5
   164a0:	d9400615 	stw	r5,24(sp)
   164a4:	18800226 	beq	r3,r2,164b0 <__divdf3+0x8c>
   164a8:	01400084 	movi	r5,2
   164ac:	1940041e 	bne	r3,r5,164c0 <__divdf3+0x9c>
   164b0:	193feb1e 	bne	r3,r4,16460 <__divdf3+0x3c>
   164b4:	010000b4 	movhi	r4,2
   164b8:	21228504 	addi	r4,r4,-30188
   164bc:	003fe906 	br	16464 <__divdf3+0x40>
   164c0:	20803326 	beq	r4,r2,16590 <__divdf3+0x16c>
   164c4:	21403726 	beq	r4,r5,165a4 <__divdf3+0x180>
   164c8:	d8800217 	ldw	r2,8(sp)
   164cc:	d9000717 	ldw	r4,28(sp)
   164d0:	d8c00917 	ldw	r3,36(sp)
   164d4:	da000417 	ldw	r8,16(sp)
   164d8:	2089c83a 	sub	r4,r4,r2
   164dc:	d9000715 	stw	r4,28(sp)
   164e0:	d8800817 	ldw	r2,32(sp)
   164e4:	dbc00317 	ldw	r15,12(sp)
   164e8:	1a000236 	bltu	r3,r8,164f4 <__divdf3+0xd0>
   164ec:	40c0081e 	bne	r8,r3,16510 <__divdf3+0xec>
   164f0:	13c0072e 	bgeu	r2,r15,16510 <__divdf3+0xec>
   164f4:	108b883a 	add	r5,r2,r2
   164f8:	288d803a 	cmpltu	r6,r5,r2
   164fc:	18c7883a 	add	r3,r3,r3
   16500:	213fffc4 	addi	r4,r4,-1
   16504:	2805883a 	mov	r2,r5
   16508:	30c7883a 	add	r3,r6,r3
   1650c:	d9000715 	stw	r4,28(sp)
   16510:	01400f44 	movi	r5,61
   16514:	000f883a 	mov	r7,zero
   16518:	01040034 	movhi	r4,4096
   1651c:	0019883a 	mov	r12,zero
   16520:	001b883a 	mov	r13,zero
   16524:	201697fa 	slli	r11,r4,31
   16528:	3814d07a 	srli	r10,r7,1
   1652c:	297fffc4 	addi	r5,r5,-1
   16530:	1a000936 	bltu	r3,r8,16558 <__divdf3+0x134>
   16534:	13cdc83a 	sub	r6,r2,r15
   16538:	1193803a 	cmpltu	r9,r2,r6
   1653c:	1a1dc83a 	sub	r14,r3,r8
   16540:	40c0011e 	bne	r8,r3,16548 <__divdf3+0x124>
   16544:	13c00436 	bltu	r2,r15,16558 <__divdf3+0x134>
   16548:	3005883a 	mov	r2,r6
   1654c:	7247c83a 	sub	r3,r14,r9
   16550:	61d8b03a 	or	r12,r12,r7
   16554:	691ab03a 	or	r13,r13,r4
   16558:	108d883a 	add	r6,r2,r2
   1655c:	3093803a 	cmpltu	r9,r6,r2
   16560:	18c7883a 	add	r3,r3,r3
   16564:	5a8eb03a 	or	r7,r11,r10
   16568:	2008d07a 	srli	r4,r4,1
   1656c:	3005883a 	mov	r2,r6
   16570:	48c7883a 	add	r3,r9,r3
   16574:	283feb1e 	bne	r5,zero,16524 <__divdf3+0x100>
   16578:	61003fcc 	andi	r4,r12,255
   1657c:	01402004 	movi	r5,128
   16580:	21400b26 	beq	r4,r5,165b0 <__divdf3+0x18c>
   16584:	db000815 	stw	r12,32(sp)
   16588:	db400915 	stw	r13,36(sp)
   1658c:	003fb406 	br	16460 <__divdf3+0x3c>
   16590:	d8000815 	stw	zero,32(sp)
   16594:	d8000915 	stw	zero,36(sp)
   16598:	d8000715 	stw	zero,28(sp)
   1659c:	d9000504 	addi	r4,sp,20
   165a0:	003fb006 	br	16464 <__divdf3+0x40>
   165a4:	d8800515 	stw	r2,20(sp)
   165a8:	d9000504 	addi	r4,sp,20
   165ac:	003fad06 	br	16464 <__divdf3+0x40>
   165b0:	6140400c 	andi	r5,r12,256
   165b4:	283ff31e 	bne	r5,zero,16584 <__divdf3+0x160>
   165b8:	30c4b03a 	or	r2,r6,r3
   165bc:	103ff126 	beq	r2,zero,16584 <__divdf3+0x160>
   165c0:	6109883a 	add	r4,r12,r4
   165c4:	2305803a 	cmpltu	r2,r4,r12
   165c8:	033fc004 	movi	r12,-256
   165cc:	2318703a 	and	r12,r4,r12
   165d0:	135b883a 	add	r13,r2,r13
   165d4:	003feb06 	br	16584 <__divdf3+0x160>

000165d8 <__eqdf2>:
   165d8:	defff104 	addi	sp,sp,-60
   165dc:	d9000c15 	stw	r4,48(sp)
   165e0:	d9400d15 	stw	r5,52(sp)
   165e4:	d9000c04 	addi	r4,sp,48
   165e8:	d9400504 	addi	r5,sp,20
   165ec:	dfc00e15 	stw	ra,56(sp)
   165f0:	d9800a15 	stw	r6,40(sp)
   165f4:	d9c00b15 	stw	r7,44(sp)
   165f8:	0016a4c0 	call	16a4c <__unpack_d>
   165fc:	d9000a04 	addi	r4,sp,40
   16600:	d80b883a 	mov	r5,sp
   16604:	0016a4c0 	call	16a4c <__unpack_d>
   16608:	d8c00517 	ldw	r3,20(sp)
   1660c:	00800044 	movi	r2,1
   16610:	10c0052e 	bgeu	r2,r3,16628 <__eqdf2+0x50>
   16614:	d8c00017 	ldw	r3,0(sp)
   16618:	10c0032e 	bgeu	r2,r3,16628 <__eqdf2+0x50>
   1661c:	d9000504 	addi	r4,sp,20
   16620:	d80b883a 	mov	r5,sp
   16624:	0016b500 	call	16b50 <__fpcmp_parts_d>
   16628:	dfc00e17 	ldw	ra,56(sp)
   1662c:	dec00f04 	addi	sp,sp,60
   16630:	f800283a 	ret

00016634 <__nedf2>:
   16634:	defff104 	addi	sp,sp,-60
   16638:	d9000c15 	stw	r4,48(sp)
   1663c:	d9400d15 	stw	r5,52(sp)
   16640:	d9000c04 	addi	r4,sp,48
   16644:	d9400504 	addi	r5,sp,20
   16648:	dfc00e15 	stw	ra,56(sp)
   1664c:	d9800a15 	stw	r6,40(sp)
   16650:	d9c00b15 	stw	r7,44(sp)
   16654:	0016a4c0 	call	16a4c <__unpack_d>
   16658:	d9000a04 	addi	r4,sp,40
   1665c:	d80b883a 	mov	r5,sp
   16660:	0016a4c0 	call	16a4c <__unpack_d>
   16664:	d8c00517 	ldw	r3,20(sp)
   16668:	00800044 	movi	r2,1
   1666c:	10c0052e 	bgeu	r2,r3,16684 <__nedf2+0x50>
   16670:	d8c00017 	ldw	r3,0(sp)
   16674:	10c0032e 	bgeu	r2,r3,16684 <__nedf2+0x50>
   16678:	d9000504 	addi	r4,sp,20
   1667c:	d80b883a 	mov	r5,sp
   16680:	0016b500 	call	16b50 <__fpcmp_parts_d>
   16684:	dfc00e17 	ldw	ra,56(sp)
   16688:	dec00f04 	addi	sp,sp,60
   1668c:	f800283a 	ret

00016690 <__gtdf2>:
   16690:	defff104 	addi	sp,sp,-60
   16694:	d9000c15 	stw	r4,48(sp)
   16698:	d9400d15 	stw	r5,52(sp)
   1669c:	d9000c04 	addi	r4,sp,48
   166a0:	d9400504 	addi	r5,sp,20
   166a4:	dfc00e15 	stw	ra,56(sp)
   166a8:	d9800a15 	stw	r6,40(sp)
   166ac:	d9c00b15 	stw	r7,44(sp)
   166b0:	0016a4c0 	call	16a4c <__unpack_d>
   166b4:	d9000a04 	addi	r4,sp,40
   166b8:	d80b883a 	mov	r5,sp
   166bc:	0016a4c0 	call	16a4c <__unpack_d>
   166c0:	d8c00517 	ldw	r3,20(sp)
   166c4:	00800044 	movi	r2,1
   166c8:	10c0082e 	bgeu	r2,r3,166ec <__gtdf2+0x5c>
   166cc:	d8c00017 	ldw	r3,0(sp)
   166d0:	10c0062e 	bgeu	r2,r3,166ec <__gtdf2+0x5c>
   166d4:	d9000504 	addi	r4,sp,20
   166d8:	d80b883a 	mov	r5,sp
   166dc:	0016b500 	call	16b50 <__fpcmp_parts_d>
   166e0:	dfc00e17 	ldw	ra,56(sp)
   166e4:	dec00f04 	addi	sp,sp,60
   166e8:	f800283a 	ret
   166ec:	00bfffc4 	movi	r2,-1
   166f0:	003ffb06 	br	166e0 <__gtdf2+0x50>

000166f4 <__gedf2>:
   166f4:	defff104 	addi	sp,sp,-60
   166f8:	d9000c15 	stw	r4,48(sp)
   166fc:	d9400d15 	stw	r5,52(sp)
   16700:	d9000c04 	addi	r4,sp,48
   16704:	d9400504 	addi	r5,sp,20
   16708:	dfc00e15 	stw	ra,56(sp)
   1670c:	d9800a15 	stw	r6,40(sp)
   16710:	d9c00b15 	stw	r7,44(sp)
   16714:	0016a4c0 	call	16a4c <__unpack_d>
   16718:	d9000a04 	addi	r4,sp,40
   1671c:	d80b883a 	mov	r5,sp
   16720:	0016a4c0 	call	16a4c <__unpack_d>
   16724:	d8c00517 	ldw	r3,20(sp)
   16728:	00800044 	movi	r2,1
   1672c:	10c0082e 	bgeu	r2,r3,16750 <__gedf2+0x5c>
   16730:	d8c00017 	ldw	r3,0(sp)
   16734:	10c0062e 	bgeu	r2,r3,16750 <__gedf2+0x5c>
   16738:	d9000504 	addi	r4,sp,20
   1673c:	d80b883a 	mov	r5,sp
   16740:	0016b500 	call	16b50 <__fpcmp_parts_d>
   16744:	dfc00e17 	ldw	ra,56(sp)
   16748:	dec00f04 	addi	sp,sp,60
   1674c:	f800283a 	ret
   16750:	00bfffc4 	movi	r2,-1
   16754:	003ffb06 	br	16744 <__gedf2+0x50>

00016758 <__ltdf2>:
   16758:	defff104 	addi	sp,sp,-60
   1675c:	d9000c15 	stw	r4,48(sp)
   16760:	d9400d15 	stw	r5,52(sp)
   16764:	d9000c04 	addi	r4,sp,48
   16768:	d9400504 	addi	r5,sp,20
   1676c:	dfc00e15 	stw	ra,56(sp)
   16770:	d9800a15 	stw	r6,40(sp)
   16774:	d9c00b15 	stw	r7,44(sp)
   16778:	0016a4c0 	call	16a4c <__unpack_d>
   1677c:	d9000a04 	addi	r4,sp,40
   16780:	d80b883a 	mov	r5,sp
   16784:	0016a4c0 	call	16a4c <__unpack_d>
   16788:	d8c00517 	ldw	r3,20(sp)
   1678c:	00800044 	movi	r2,1
   16790:	10c0052e 	bgeu	r2,r3,167a8 <__ltdf2+0x50>
   16794:	d8c00017 	ldw	r3,0(sp)
   16798:	10c0032e 	bgeu	r2,r3,167a8 <__ltdf2+0x50>
   1679c:	d9000504 	addi	r4,sp,20
   167a0:	d80b883a 	mov	r5,sp
   167a4:	0016b500 	call	16b50 <__fpcmp_parts_d>
   167a8:	dfc00e17 	ldw	ra,56(sp)
   167ac:	dec00f04 	addi	sp,sp,60
   167b0:	f800283a 	ret

000167b4 <__ledf2>:
   167b4:	defff104 	addi	sp,sp,-60
   167b8:	d9000c15 	stw	r4,48(sp)
   167bc:	d9400d15 	stw	r5,52(sp)
   167c0:	d9000c04 	addi	r4,sp,48
   167c4:	d9400504 	addi	r5,sp,20
   167c8:	dfc00e15 	stw	ra,56(sp)
   167cc:	d9800a15 	stw	r6,40(sp)
   167d0:	d9c00b15 	stw	r7,44(sp)
   167d4:	0016a4c0 	call	16a4c <__unpack_d>
   167d8:	d9000a04 	addi	r4,sp,40
   167dc:	d80b883a 	mov	r5,sp
   167e0:	0016a4c0 	call	16a4c <__unpack_d>
   167e4:	d8c00517 	ldw	r3,20(sp)
   167e8:	00800044 	movi	r2,1
   167ec:	10c0052e 	bgeu	r2,r3,16804 <__ledf2+0x50>
   167f0:	d8c00017 	ldw	r3,0(sp)
   167f4:	10c0032e 	bgeu	r2,r3,16804 <__ledf2+0x50>
   167f8:	d9000504 	addi	r4,sp,20
   167fc:	d80b883a 	mov	r5,sp
   16800:	0016b500 	call	16b50 <__fpcmp_parts_d>
   16804:	dfc00e17 	ldw	ra,56(sp)
   16808:	dec00f04 	addi	sp,sp,60
   1680c:	f800283a 	ret

00016810 <__fixdfsi>:
   16810:	defff804 	addi	sp,sp,-32
   16814:	d9000515 	stw	r4,20(sp)
   16818:	d9400615 	stw	r5,24(sp)
   1681c:	d9000504 	addi	r4,sp,20
   16820:	d80b883a 	mov	r5,sp
   16824:	dfc00715 	stw	ra,28(sp)
   16828:	0016a4c0 	call	16a4c <__unpack_d>
   1682c:	d8800017 	ldw	r2,0(sp)
   16830:	00c00084 	movi	r3,2
   16834:	10c01c26 	beq	r2,r3,168a8 <__fixdfsi+0x98>
   16838:	00c00044 	movi	r3,1
   1683c:	18801a2e 	bgeu	r3,r2,168a8 <__fixdfsi+0x98>
   16840:	00c00104 	movi	r3,4
   16844:	10c01126 	beq	r2,r3,1688c <__fixdfsi+0x7c>
   16848:	d8800217 	ldw	r2,8(sp)
   1684c:	10001616 	blt	r2,zero,168a8 <__fixdfsi+0x98>
   16850:	00c00784 	movi	r3,30
   16854:	18800d16 	blt	r3,r2,1688c <__fixdfsi+0x7c>
   16858:	00c00f04 	movi	r3,60
   1685c:	1885c83a 	sub	r2,r3,r2
   16860:	10fff804 	addi	r3,r2,-32
   16864:	d9400317 	ldw	r5,12(sp)
   16868:	d9000417 	ldw	r4,16(sp)
   1686c:	18001616 	blt	r3,zero,168c8 <__fixdfsi+0xb8>
   16870:	20c4d83a 	srl	r2,r4,r3
   16874:	d8c00117 	ldw	r3,4(sp)
   16878:	18000126 	beq	r3,zero,16880 <__fixdfsi+0x70>
   1687c:	0085c83a 	sub	r2,zero,r2
   16880:	dfc00717 	ldw	ra,28(sp)
   16884:	dec00804 	addi	sp,sp,32
   16888:	f800283a 	ret
   1688c:	d8800117 	ldw	r2,4(sp)
   16890:	1000091e 	bne	r2,zero,168b8 <__fixdfsi+0xa8>
   16894:	00a00034 	movhi	r2,32768
   16898:	10bfffc4 	addi	r2,r2,-1
   1689c:	dfc00717 	ldw	ra,28(sp)
   168a0:	dec00804 	addi	sp,sp,32
   168a4:	f800283a 	ret
   168a8:	0005883a 	mov	r2,zero
   168ac:	dfc00717 	ldw	ra,28(sp)
   168b0:	dec00804 	addi	sp,sp,32
   168b4:	f800283a 	ret
   168b8:	00a00034 	movhi	r2,32768
   168bc:	dfc00717 	ldw	ra,28(sp)
   168c0:	dec00804 	addi	sp,sp,32
   168c4:	f800283a 	ret
   168c8:	2008907a 	slli	r4,r4,1
   168cc:	018007c4 	movi	r6,31
   168d0:	308dc83a 	sub	r6,r6,r2
   168d4:	2188983a 	sll	r4,r4,r6
   168d8:	2884d83a 	srl	r2,r5,r2
   168dc:	2084b03a 	or	r2,r4,r2
   168e0:	003fe406 	br	16874 <__fixdfsi+0x64>

000168e4 <__make_dp>:
   168e4:	defff904 	addi	sp,sp,-28
   168e8:	d8800717 	ldw	r2,28(sp)
   168ec:	d9000015 	stw	r4,0(sp)
   168f0:	d809883a 	mov	r4,sp
   168f4:	dfc00515 	stw	ra,20(sp)
   168f8:	d9c00615 	stw	r7,24(sp)
   168fc:	d9400115 	stw	r5,4(sp)
   16900:	d9800215 	stw	r6,8(sp)
   16904:	d9c00315 	stw	r7,12(sp)
   16908:	d8800415 	stw	r2,16(sp)
   1690c:	00110300 	call	11030 <__pack_d>
   16910:	dfc00517 	ldw	ra,20(sp)
   16914:	dec00704 	addi	sp,sp,28
   16918:	f800283a 	ret

0001691c <udivmodsi4>:
   1691c:	2005883a 	mov	r2,r4
   16920:	2900182e 	bgeu	r5,r4,16984 <udivmodsi4+0x68>
   16924:	28001716 	blt	r5,zero,16984 <udivmodsi4+0x68>
   16928:	01000804 	movi	r4,32
   1692c:	00c00044 	movi	r3,1
   16930:	00000206 	br	1693c <udivmodsi4+0x20>
   16934:	20001126 	beq	r4,zero,1697c <udivmodsi4+0x60>
   16938:	28000516 	blt	r5,zero,16950 <udivmodsi4+0x34>
   1693c:	294b883a 	add	r5,r5,r5
   16940:	213fffc4 	addi	r4,r4,-1
   16944:	18c7883a 	add	r3,r3,r3
   16948:	28bffa36 	bltu	r5,r2,16934 <udivmodsi4+0x18>
   1694c:	18000b26 	beq	r3,zero,1697c <udivmodsi4+0x60>
   16950:	0009883a 	mov	r4,zero
   16954:	11400236 	bltu	r2,r5,16960 <udivmodsi4+0x44>
   16958:	1145c83a 	sub	r2,r2,r5
   1695c:	20c8b03a 	or	r4,r4,r3
   16960:	1806d07a 	srli	r3,r3,1
   16964:	280ad07a 	srli	r5,r5,1
   16968:	183ffa1e 	bne	r3,zero,16954 <udivmodsi4+0x38>
   1696c:	3000021e 	bne	r6,zero,16978 <udivmodsi4+0x5c>
   16970:	2005883a 	mov	r2,r4
   16974:	f800283a 	ret
   16978:	f800283a 	ret
   1697c:	0009883a 	mov	r4,zero
   16980:	003ffa06 	br	1696c <udivmodsi4+0x50>
   16984:	00c00044 	movi	r3,1
   16988:	0009883a 	mov	r4,zero
   1698c:	003ff106 	br	16954 <udivmodsi4+0x38>

00016990 <__divsi3>:
   16990:	defffe04 	addi	sp,sp,-8
   16994:	dfc00115 	stw	ra,4(sp)
   16998:	dc000015 	stw	r16,0(sp)
   1699c:	20000a16 	blt	r4,zero,169c8 <__divsi3+0x38>
   169a0:	0021883a 	mov	r16,zero
   169a4:	28000b16 	blt	r5,zero,169d4 <__divsi3+0x44>
   169a8:	000d883a 	mov	r6,zero
   169ac:	001691c0 	call	1691c <udivmodsi4>
   169b0:	80000126 	beq	r16,zero,169b8 <__divsi3+0x28>
   169b4:	0085c83a 	sub	r2,zero,r2
   169b8:	dfc00117 	ldw	ra,4(sp)
   169bc:	dc000017 	ldw	r16,0(sp)
   169c0:	dec00204 	addi	sp,sp,8
   169c4:	f800283a 	ret
   169c8:	0109c83a 	sub	r4,zero,r4
   169cc:	04000044 	movi	r16,1
   169d0:	283ff50e 	bge	r5,zero,169a8 <__divsi3+0x18>
   169d4:	014bc83a 	sub	r5,zero,r5
   169d8:	8400005c 	xori	r16,r16,1
   169dc:	003ff206 	br	169a8 <__divsi3+0x18>

000169e0 <__modsi3>:
   169e0:	deffff04 	addi	sp,sp,-4
   169e4:	dfc00015 	stw	ra,0(sp)
   169e8:	20000516 	blt	r4,zero,16a00 <__modsi3+0x20>
   169ec:	28000c16 	blt	r5,zero,16a20 <__modsi3+0x40>
   169f0:	01800044 	movi	r6,1
   169f4:	dfc00017 	ldw	ra,0(sp)
   169f8:	dec00104 	addi	sp,sp,4
   169fc:	001691c1 	jmpi	1691c <udivmodsi4>
   16a00:	0109c83a 	sub	r4,zero,r4
   16a04:	28000b16 	blt	r5,zero,16a34 <__modsi3+0x54>
   16a08:	01800044 	movi	r6,1
   16a0c:	001691c0 	call	1691c <udivmodsi4>
   16a10:	0085c83a 	sub	r2,zero,r2
   16a14:	dfc00017 	ldw	ra,0(sp)
   16a18:	dec00104 	addi	sp,sp,4
   16a1c:	f800283a 	ret
   16a20:	014bc83a 	sub	r5,zero,r5
   16a24:	01800044 	movi	r6,1
   16a28:	dfc00017 	ldw	ra,0(sp)
   16a2c:	dec00104 	addi	sp,sp,4
   16a30:	001691c1 	jmpi	1691c <udivmodsi4>
   16a34:	014bc83a 	sub	r5,zero,r5
   16a38:	003ff306 	br	16a08 <__modsi3+0x28>

00016a3c <__udivsi3>:
   16a3c:	000d883a 	mov	r6,zero
   16a40:	001691c1 	jmpi	1691c <udivmodsi4>

00016a44 <__umodsi3>:
   16a44:	01800044 	movi	r6,1
   16a48:	001691c1 	jmpi	1691c <udivmodsi4>

00016a4c <__unpack_d>:
   16a4c:	21800117 	ldw	r6,4(r4)
   16a50:	20c00017 	ldw	r3,0(r4)
   16a54:	3004d7fa 	srli	r2,r6,31
   16a58:	3008d53a 	srli	r4,r6,20
   16a5c:	28800115 	stw	r2,4(r5)
   16a60:	2101ffcc 	andi	r4,r4,2047
   16a64:	00800434 	movhi	r2,16
   16a68:	10bfffc4 	addi	r2,r2,-1
   16a6c:	3084703a 	and	r2,r6,r2
   16a70:	20001a1e 	bne	r4,zero,16adc <__unpack_d+0x90>
   16a74:	1888b03a 	or	r4,r3,r2
   16a78:	20002626 	beq	r4,zero,16b14 <__unpack_d+0xc8>
   16a7c:	1808d63a 	srli	r4,r3,24
   16a80:	1004923a 	slli	r2,r2,8
   16a84:	01bf0084 	movi	r6,-1022
   16a88:	29800215 	stw	r6,8(r5)
   16a8c:	2084b03a 	or	r2,r4,r2
   16a90:	010000c4 	movi	r4,3
   16a94:	29000015 	stw	r4,0(r5)
   16a98:	02040034 	movhi	r8,4096
   16a9c:	423fffc4 	addi	r8,r8,-1
   16aa0:	1806923a 	slli	r3,r3,8
   16aa4:	40801836 	bltu	r8,r2,16b08 <__unpack_d+0xbc>
   16aa8:	013f0044 	movi	r4,-1023
   16aac:	18cd883a 	add	r6,r3,r3
   16ab0:	30c7803a 	cmpltu	r3,r6,r3
   16ab4:	1085883a 	add	r2,r2,r2
   16ab8:	1885883a 	add	r2,r3,r2
   16abc:	200f883a 	mov	r7,r4
   16ac0:	3007883a 	mov	r3,r6
   16ac4:	213fffc4 	addi	r4,r4,-1
   16ac8:	40bff82e 	bgeu	r8,r2,16aac <__unpack_d+0x60>
   16acc:	29c00215 	stw	r7,8(r5)
   16ad0:	28c00315 	stw	r3,12(r5)
   16ad4:	28800415 	stw	r2,16(r5)
   16ad8:	f800283a 	ret
   16adc:	01c1ffc4 	movi	r7,2047
   16ae0:	21c00f26 	beq	r4,r7,16b20 <__unpack_d+0xd4>
   16ae4:	180cd63a 	srli	r6,r3,24
   16ae8:	1004923a 	slli	r2,r2,8
   16aec:	213f0044 	addi	r4,r4,-1023
   16af0:	1806923a 	slli	r3,r3,8
   16af4:	3084b03a 	or	r2,r6,r2
   16af8:	29000215 	stw	r4,8(r5)
   16afc:	010000c4 	movi	r4,3
   16b00:	10840034 	orhi	r2,r2,4096
   16b04:	29000015 	stw	r4,0(r5)
   16b08:	28c00315 	stw	r3,12(r5)
   16b0c:	28800415 	stw	r2,16(r5)
   16b10:	f800283a 	ret
   16b14:	00800084 	movi	r2,2
   16b18:	28800015 	stw	r2,0(r5)
   16b1c:	f800283a 	ret
   16b20:	1888b03a 	or	r4,r3,r2
   16b24:	20000526 	beq	r4,zero,16b3c <__unpack_d+0xf0>
   16b28:	3180022c 	andhi	r6,r6,8
   16b2c:	30000626 	beq	r6,zero,16b48 <__unpack_d+0xfc>
   16b30:	01000044 	movi	r4,1
   16b34:	29000015 	stw	r4,0(r5)
   16b38:	003ff306 	br	16b08 <__unpack_d+0xbc>
   16b3c:	00800104 	movi	r2,4
   16b40:	28800015 	stw	r2,0(r5)
   16b44:	f800283a 	ret
   16b48:	28000015 	stw	zero,0(r5)
   16b4c:	003fee06 	br	16b08 <__unpack_d+0xbc>

00016b50 <__fpcmp_parts_d>:
   16b50:	20c00017 	ldw	r3,0(r4)
   16b54:	00800044 	movi	r2,1
   16b58:	10c0142e 	bgeu	r2,r3,16bac <__fpcmp_parts_d+0x5c>
   16b5c:	29800017 	ldw	r6,0(r5)
   16b60:	1180122e 	bgeu	r2,r6,16bac <__fpcmp_parts_d+0x5c>
   16b64:	01c00104 	movi	r7,4
   16b68:	19c02826 	beq	r3,r7,16c0c <__fpcmp_parts_d+0xbc>
   16b6c:	31c00926 	beq	r6,r7,16b94 <__fpcmp_parts_d+0x44>
   16b70:	01c00084 	movi	r7,2
   16b74:	19c00626 	beq	r3,r7,16b90 <__fpcmp_parts_d+0x40>
   16b78:	31c00a26 	beq	r6,r7,16ba4 <__fpcmp_parts_d+0x54>
   16b7c:	20c00117 	ldw	r3,4(r4)
   16b80:	29800117 	ldw	r6,4(r5)
   16b84:	19800b26 	beq	r3,r6,16bb4 <__fpcmp_parts_d+0x64>
   16b88:	1800041e 	bne	r3,zero,16b9c <__fpcmp_parts_d+0x4c>
   16b8c:	f800283a 	ret
   16b90:	30c01a26 	beq	r6,r3,16bfc <__fpcmp_parts_d+0xac>
   16b94:	28800117 	ldw	r2,4(r5)
   16b98:	1000041e 	bne	r2,zero,16bac <__fpcmp_parts_d+0x5c>
   16b9c:	00bfffc4 	movi	r2,-1
   16ba0:	f800283a 	ret
   16ba4:	20800117 	ldw	r2,4(r4)
   16ba8:	103ffc1e 	bne	r2,zero,16b9c <__fpcmp_parts_d+0x4c>
   16bac:	00800044 	movi	r2,1
   16bb0:	f800283a 	ret
   16bb4:	21c00217 	ldw	r7,8(r4)
   16bb8:	29800217 	ldw	r6,8(r5)
   16bbc:	31c0020e 	bge	r6,r7,16bc8 <__fpcmp_parts_d+0x78>
   16bc0:	183ff61e 	bne	r3,zero,16b9c <__fpcmp_parts_d+0x4c>
   16bc4:	f800283a 	ret
   16bc8:	39800a16 	blt	r7,r6,16bf4 <__fpcmp_parts_d+0xa4>
   16bcc:	20800417 	ldw	r2,16(r4)
   16bd0:	29800417 	ldw	r6,16(r5)
   16bd4:	21c00317 	ldw	r7,12(r4)
   16bd8:	29000317 	ldw	r4,12(r5)
   16bdc:	30800936 	bltu	r6,r2,16c04 <__fpcmp_parts_d+0xb4>
   16be0:	1180011e 	bne	r2,r6,16be8 <__fpcmp_parts_d+0x98>
   16be4:	21c00736 	bltu	r4,r7,16c04 <__fpcmp_parts_d+0xb4>
   16be8:	11800236 	bltu	r2,r6,16bf4 <__fpcmp_parts_d+0xa4>
   16bec:	3080031e 	bne	r6,r2,16bfc <__fpcmp_parts_d+0xac>
   16bf0:	3900022e 	bgeu	r7,r4,16bfc <__fpcmp_parts_d+0xac>
   16bf4:	183fe926 	beq	r3,zero,16b9c <__fpcmp_parts_d+0x4c>
   16bf8:	003fec06 	br	16bac <__fpcmp_parts_d+0x5c>
   16bfc:	0005883a 	mov	r2,zero
   16c00:	f800283a 	ret
   16c04:	183fe926 	beq	r3,zero,16bac <__fpcmp_parts_d+0x5c>
   16c08:	003fe406 	br	16b9c <__fpcmp_parts_d+0x4c>
   16c0c:	30ffe51e 	bne	r6,r3,16ba4 <__fpcmp_parts_d+0x54>
   16c10:	28c00117 	ldw	r3,4(r5)
   16c14:	20800117 	ldw	r2,4(r4)
   16c18:	1885c83a 	sub	r2,r3,r2
   16c1c:	f800283a 	ret

00016c20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   16c20:	defffc04 	addi	sp,sp,-16
   16c24:	df000315 	stw	fp,12(sp)
   16c28:	df000304 	addi	fp,sp,12
   16c2c:	e13ffd15 	stw	r4,-12(fp)
   16c30:	e17ffe15 	stw	r5,-8(fp)
   16c34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   16c38:	e0fffe17 	ldw	r3,-8(fp)
   16c3c:	e0bffd17 	ldw	r2,-12(fp)
   16c40:	18800e26 	beq	r3,r2,16c7c <alt_load_section+0x5c>
  {
    while( to != end )
   16c44:	00000a06 	br	16c70 <alt_load_section+0x50>
    {
      *to++ = *from++;
   16c48:	e0bffd17 	ldw	r2,-12(fp)
   16c4c:	10c00017 	ldw	r3,0(r2)
   16c50:	e0bffe17 	ldw	r2,-8(fp)
   16c54:	10c00015 	stw	r3,0(r2)
   16c58:	e0bffe17 	ldw	r2,-8(fp)
   16c5c:	10800104 	addi	r2,r2,4
   16c60:	e0bffe15 	stw	r2,-8(fp)
   16c64:	e0bffd17 	ldw	r2,-12(fp)
   16c68:	10800104 	addi	r2,r2,4
   16c6c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   16c70:	e0fffe17 	ldw	r3,-8(fp)
   16c74:	e0bfff17 	ldw	r2,-4(fp)
   16c78:	18bff31e 	bne	r3,r2,16c48 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   16c7c:	e037883a 	mov	sp,fp
   16c80:	df000017 	ldw	fp,0(sp)
   16c84:	dec00104 	addi	sp,sp,4
   16c88:	f800283a 	ret

00016c8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   16c8c:	defffe04 	addi	sp,sp,-8
   16c90:	dfc00115 	stw	ra,4(sp)
   16c94:	df000015 	stw	fp,0(sp)
   16c98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   16c9c:	010000b4 	movhi	r4,2
   16ca0:	21245204 	addi	r4,r4,-28344
   16ca4:	014000b4 	movhi	r5,2
   16ca8:	29629504 	addi	r5,r5,-30124
   16cac:	018000b4 	movhi	r6,2
   16cb0:	31a45204 	addi	r6,r6,-28344
   16cb4:	0016c200 	call	16c20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   16cb8:	01000074 	movhi	r4,1
   16cbc:	21000804 	addi	r4,r4,32
   16cc0:	01400074 	movhi	r5,1
   16cc4:	29400804 	addi	r5,r5,32
   16cc8:	01800074 	movhi	r6,1
   16ccc:	31806e04 	addi	r6,r6,440
   16cd0:	0016c200 	call	16c20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   16cd4:	010000b4 	movhi	r4,2
   16cd8:	2121e104 	addi	r4,r4,-30844
   16cdc:	014000b4 	movhi	r5,2
   16ce0:	2961e104 	addi	r5,r5,-30844
   16ce4:	018000b4 	movhi	r6,2
   16ce8:	31a29504 	addi	r6,r6,-30124
   16cec:	0016c200 	call	16c20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   16cf0:	00174980 	call	17498 <alt_dcache_flush_all>
  alt_icache_flush_all();
   16cf4:	00175d00 	call	175d0 <alt_icache_flush_all>
}
   16cf8:	e037883a 	mov	sp,fp
   16cfc:	dfc00117 	ldw	ra,4(sp)
   16d00:	df000017 	ldw	fp,0(sp)
   16d04:	dec00204 	addi	sp,sp,8
   16d08:	f800283a 	ret

00016d0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   16d0c:	defffd04 	addi	sp,sp,-12
   16d10:	dfc00215 	stw	ra,8(sp)
   16d14:	df000115 	stw	fp,4(sp)
   16d18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   16d1c:	0009883a 	mov	r4,zero
   16d20:	0016fb40 	call	16fb4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   16d24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   16d28:	0016fe80 	call	16fe8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   16d2c:	010000b4 	movhi	r4,2
   16d30:	21228a04 	addi	r4,r4,-30168
   16d34:	014000b4 	movhi	r5,2
   16d38:	29628a04 	addi	r5,r5,-30168
   16d3c:	018000b4 	movhi	r6,2
   16d40:	31a28a04 	addi	r6,r6,-30168
   16d44:	00179a80 	call	179a8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   16d48:	d121cf17 	ldw	r4,-30916(gp)
   16d4c:	d0e1d017 	ldw	r3,-30912(gp)
   16d50:	d0a1d117 	ldw	r2,-30908(gp)
   16d54:	180b883a 	mov	r5,r3
   16d58:	100d883a 	mov	r6,r2
   16d5c:	00103480 	call	10348 <main>
   16d60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   16d64:	01000044 	movi	r4,1
   16d68:	00173cc0 	call	173cc <close>
  exit (result);
   16d6c:	e13fff17 	ldw	r4,-4(fp)
   16d70:	00181f80 	call	181f8 <exit>

00016d74 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   16d74:	defffe04 	addi	sp,sp,-8
   16d78:	df000115 	stw	fp,4(sp)
   16d7c:	df000104 	addi	fp,sp,4
   16d80:	e13fff15 	stw	r4,-4(fp)
}
   16d84:	e037883a 	mov	sp,fp
   16d88:	df000017 	ldw	fp,0(sp)
   16d8c:	dec00104 	addi	sp,sp,4
   16d90:	f800283a 	ret

00016d94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   16d94:	defffe04 	addi	sp,sp,-8
   16d98:	df000115 	stw	fp,4(sp)
   16d9c:	df000104 	addi	fp,sp,4
   16da0:	e13fff15 	stw	r4,-4(fp)
}
   16da4:	e037883a 	mov	sp,fp
   16da8:	df000017 	ldw	fp,0(sp)
   16dac:	dec00104 	addi	sp,sp,4
   16db0:	f800283a 	ret

00016db4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   16db4:	defffd04 	addi	sp,sp,-12
   16db8:	dfc00215 	stw	ra,8(sp)
   16dbc:	df000115 	stw	fp,4(sp)
   16dc0:	df000104 	addi	fp,sp,4
   16dc4:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   16dc8:	008000b4 	movhi	r2,2
   16dcc:	10a44504 	addi	r2,r2,-28396
   16dd0:	10800017 	ldw	r2,0(r2)
   16dd4:	10800217 	ldw	r2,8(r2)
   16dd8:	e13fff17 	ldw	r4,-4(fp)
   16ddc:	100b883a 	mov	r5,r2
   16de0:	00182180 	call	18218 <fputs>
#endif
}
   16de4:	e037883a 	mov	sp,fp
   16de8:	dfc00117 	ldw	ra,4(sp)
   16dec:	df000017 	ldw	fp,0(sp)
   16df0:	dec00204 	addi	sp,sp,8
   16df4:	f800283a 	ret

00016df8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   16df8:	defff904 	addi	sp,sp,-28
   16dfc:	df000615 	stw	fp,24(sp)
   16e00:	df000604 	addi	fp,sp,24
   16e04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e08:	0005303a 	rdctl	r2,status
   16e0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e10:	e0fffc17 	ldw	r3,-16(fp)
   16e14:	00bfff84 	movi	r2,-2
   16e18:	1884703a 	and	r2,r3,r2
   16e1c:	1001703a 	wrctl	status,r2
  
  return context;
   16e20:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   16e24:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   16e28:	d0a00417 	ldw	r2,-32752(gp)
   16e2c:	10c000c4 	addi	r3,r2,3
   16e30:	00bfff04 	movi	r2,-4
   16e34:	1884703a 	and	r2,r3,r2
   16e38:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   16e3c:	d0e00417 	ldw	r3,-32752(gp)
   16e40:	e0bfff17 	ldw	r2,-4(fp)
   16e44:	1885883a 	add	r2,r3,r2
   16e48:	00c000b4 	movhi	r3,2
   16e4c:	18e78d04 	addi	r3,r3,-25036
   16e50:	1880062e 	bgeu	r3,r2,16e6c <sbrk+0x74>
   16e54:	e0bffa17 	ldw	r2,-24(fp)
   16e58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e5c:	e0bffd17 	ldw	r2,-12(fp)
   16e60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   16e64:	00bfffc4 	movi	r2,-1
   16e68:	00000b06 	br	16e98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   16e6c:	d0a00417 	ldw	r2,-32752(gp)
   16e70:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   16e74:	d0e00417 	ldw	r3,-32752(gp)
   16e78:	e0bfff17 	ldw	r2,-4(fp)
   16e7c:	1885883a 	add	r2,r3,r2
   16e80:	d0a00415 	stw	r2,-32752(gp)
   16e84:	e0bffa17 	ldw	r2,-24(fp)
   16e88:	e0bffe15 	stw	r2,-8(fp)
   16e8c:	e0bffe17 	ldw	r2,-8(fp)
   16e90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   16e94:	e0bffb17 	ldw	r2,-20(fp)
} 
   16e98:	e037883a 	mov	sp,fp
   16e9c:	df000017 	ldw	fp,0(sp)
   16ea0:	dec00104 	addi	sp,sp,4
   16ea4:	f800283a 	ret

00016ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16ea8:	defffe04 	addi	sp,sp,-8
   16eac:	dfc00115 	stw	ra,4(sp)
   16eb0:	df000015 	stw	fp,0(sp)
   16eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16eb8:	008000b4 	movhi	r2,2
   16ebc:	10a44e04 	addi	r2,r2,-28360
   16ec0:	10800017 	ldw	r2,0(r2)
   16ec4:	10000526 	beq	r2,zero,16edc <alt_get_errno+0x34>
   16ec8:	008000b4 	movhi	r2,2
   16ecc:	10a44e04 	addi	r2,r2,-28360
   16ed0:	10800017 	ldw	r2,0(r2)
   16ed4:	103ee83a 	callr	r2
   16ed8:	00000206 	br	16ee4 <alt_get_errno+0x3c>
   16edc:	008000b4 	movhi	r2,2
   16ee0:	10a61204 	addi	r2,r2,-26552
}
   16ee4:	e037883a 	mov	sp,fp
   16ee8:	dfc00117 	ldw	ra,4(sp)
   16eec:	df000017 	ldw	fp,0(sp)
   16ef0:	dec00204 	addi	sp,sp,8
   16ef4:	f800283a 	ret

00016ef8 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   16ef8:	defffc04 	addi	sp,sp,-16
   16efc:	dfc00315 	stw	ra,12(sp)
   16f00:	df000215 	stw	fp,8(sp)
   16f04:	df000204 	addi	fp,sp,8
   16f08:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16f0c:	008000b4 	movhi	r2,2
   16f10:	10a61804 	addi	r2,r2,-26528
   16f14:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
   16f18:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16f1c:	008000b4 	movhi	r2,2
   16f20:	10a61704 	addi	r2,r2,-26532
   16f24:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   16f28:	1000051e 	bne	r2,zero,16f40 <times+0x48>
  {
    ALT_ERRNO = ENOSYS;
   16f2c:	0016ea80 	call	16ea8 <alt_get_errno>
   16f30:	00c01604 	movi	r3,88
   16f34:	10c00015 	stw	r3,0(r2)
    return 0;
   16f38:	0005883a 	mov	r2,zero
   16f3c:	00000a06 	br	16f68 <times+0x70>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   16f40:	e0bfff17 	ldw	r2,-4(fp)
   16f44:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   16f48:	e0bfff17 	ldw	r2,-4(fp)
   16f4c:	e0fffe17 	ldw	r3,-8(fp)
   16f50:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   16f54:	e0bfff17 	ldw	r2,-4(fp)
   16f58:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   16f5c:	e0bfff17 	ldw	r2,-4(fp)
   16f60:	10000315 	stw	zero,12(r2)

  return ticks;
   16f64:	e0bffe17 	ldw	r2,-8(fp)
}
   16f68:	e037883a 	mov	sp,fp
   16f6c:	dfc00117 	ldw	ra,4(sp)
   16f70:	df000017 	ldw	fp,0(sp)
   16f74:	dec00204 	addi	sp,sp,8
   16f78:	f800283a 	ret

00016f7c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   16f7c:	defffd04 	addi	sp,sp,-12
   16f80:	dfc00215 	stw	ra,8(sp)
   16f84:	df000115 	stw	fp,4(sp)
   16f88:	df000104 	addi	fp,sp,4
   16f8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   16f90:	e13fff17 	ldw	r4,-4(fp)
   16f94:	014000b4 	movhi	r5,2
   16f98:	29644b04 	addi	r5,r5,-28372
   16f9c:	00175300 	call	17530 <alt_dev_llist_insert>
}
   16fa0:	e037883a 	mov	sp,fp
   16fa4:	dfc00117 	ldw	ra,4(sp)
   16fa8:	df000017 	ldw	fp,0(sp)
   16fac:	dec00204 	addi	sp,sp,8
   16fb0:	f800283a 	ret

00016fb4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   16fb4:	defffd04 	addi	sp,sp,-12
   16fb8:	dfc00215 	stw	ra,8(sp)
   16fbc:	df000115 	stw	fp,4(sp)
   16fc0:	df000104 	addi	fp,sp,4
   16fc4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   16fc8:	0017ed40 	call	17ed4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   16fcc:	00800044 	movi	r2,1
   16fd0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   16fd4:	e037883a 	mov	sp,fp
   16fd8:	dfc00117 	ldw	ra,4(sp)
   16fdc:	df000017 	ldw	fp,0(sp)
   16fe0:	dec00204 	addi	sp,sp,8
   16fe4:	f800283a 	ret

00016fe8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   16fe8:	defffe04 	addi	sp,sp,-8
   16fec:	dfc00115 	stw	ra,4(sp)
   16ff0:	df000015 	stw	fp,0(sp)
   16ff4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   16ff8:	010000b4 	movhi	r4,2
   16ffc:	21040004 	addi	r4,r4,4096
   17000:	000b883a 	mov	r5,zero
   17004:	01800044 	movi	r6,1
   17008:	01c0fa04 	movi	r7,1000
   1700c:	00172f40 	call	172f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   17010:	010000b4 	movhi	r4,2
   17014:	2123cf04 	addi	r4,r4,-28868
   17018:	0016f7c0 	call	16f7c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1701c:	0001883a 	nop
}
   17020:	e037883a 	mov	sp,fp
   17024:	dfc00117 	ldw	ra,4(sp)
   17028:	df000017 	ldw	fp,0(sp)
   1702c:	dec00204 	addi	sp,sp,8
   17030:	f800283a 	ret

00017034 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   17034:	defffa04 	addi	sp,sp,-24
   17038:	dfc00515 	stw	ra,20(sp)
   1703c:	df000415 	stw	fp,16(sp)
   17040:	df000404 	addi	fp,sp,16
   17044:	e13ffd15 	stw	r4,-12(fp)
   17048:	e17ffe15 	stw	r5,-8(fp)
   1704c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17050:	e0bffd17 	ldw	r2,-12(fp)
   17054:	10800017 	ldw	r2,0(r2)
   17058:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1705c:	e0bffc17 	ldw	r2,-16(fp)
   17060:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   17064:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   17068:	10800217 	ldw	r2,8(r2)
   1706c:	1809883a 	mov	r4,r3
   17070:	e17ffe17 	ldw	r5,-8(fp)
   17074:	e1bfff17 	ldw	r6,-4(fp)
   17078:	100f883a 	mov	r7,r2
   1707c:	00170f40 	call	170f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   17080:	e037883a 	mov	sp,fp
   17084:	dfc00117 	ldw	ra,4(sp)
   17088:	df000017 	ldw	fp,0(sp)
   1708c:	dec00204 	addi	sp,sp,8
   17090:	f800283a 	ret

00017094 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   17094:	defffa04 	addi	sp,sp,-24
   17098:	dfc00515 	stw	ra,20(sp)
   1709c:	df000415 	stw	fp,16(sp)
   170a0:	df000404 	addi	fp,sp,16
   170a4:	e13ffd15 	stw	r4,-12(fp)
   170a8:	e17ffe15 	stw	r5,-8(fp)
   170ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   170b0:	e0bffd17 	ldw	r2,-12(fp)
   170b4:	10800017 	ldw	r2,0(r2)
   170b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   170bc:	e0bffc17 	ldw	r2,-16(fp)
   170c0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   170c4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   170c8:	10800217 	ldw	r2,8(r2)
   170cc:	1809883a 	mov	r4,r3
   170d0:	e17ffe17 	ldw	r5,-8(fp)
   170d4:	e1bfff17 	ldw	r6,-4(fp)
   170d8:	100f883a 	mov	r7,r2
   170dc:	00171e80 	call	171e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   170e0:	e037883a 	mov	sp,fp
   170e4:	dfc00117 	ldw	ra,4(sp)
   170e8:	df000017 	ldw	fp,0(sp)
   170ec:	dec00204 	addi	sp,sp,8
   170f0:	f800283a 	ret

000170f4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   170f4:	defff704 	addi	sp,sp,-36
   170f8:	df000815 	stw	fp,32(sp)
   170fc:	df000804 	addi	fp,sp,32
   17100:	e13ffc15 	stw	r4,-16(fp)
   17104:	e17ffd15 	stw	r5,-12(fp)
   17108:	e1bffe15 	stw	r6,-8(fp)
   1710c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   17110:	e0bffc17 	ldw	r2,-16(fp)
   17114:	10800017 	ldw	r2,0(r2)
   17118:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   1711c:	e0bffd17 	ldw	r2,-12(fp)
   17120:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   17124:	e0bffe17 	ldw	r2,-8(fp)
   17128:	e0fffd17 	ldw	r3,-12(fp)
   1712c:	1885883a 	add	r2,r3,r2
   17130:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   17134:	00001406 	br	17188 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   17138:	e0bff917 	ldw	r2,-28(fp)
   1713c:	10800037 	ldwio	r2,0(r2)
   17140:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   17144:	e0bffb17 	ldw	r2,-20(fp)
   17148:	10a0000c 	andi	r2,r2,32768
   1714c:	10000826 	beq	r2,zero,17170 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   17150:	e0bffb17 	ldw	r2,-20(fp)
   17154:	1007883a 	mov	r3,r2
   17158:	e0bff817 	ldw	r2,-32(fp)
   1715c:	10c00005 	stb	r3,0(r2)
   17160:	e0bff817 	ldw	r2,-32(fp)
   17164:	10800044 	addi	r2,r2,1
   17168:	e0bff815 	stw	r2,-32(fp)
   1716c:	00000606 	br	17188 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   17170:	e0fff817 	ldw	r3,-32(fp)
   17174:	e0bffd17 	ldw	r2,-12(fp)
   17178:	1880071e 	bne	r3,r2,17198 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
   1717c:	e0bfff17 	ldw	r2,-4(fp)
   17180:	1090000c 	andi	r2,r2,16384
   17184:	1000061e 	bne	r2,zero,171a0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   17188:	e0fff817 	ldw	r3,-32(fp)
   1718c:	e0bffa17 	ldw	r2,-24(fp)
   17190:	18bfe936 	bltu	r3,r2,17138 <altera_avalon_jtag_uart_read+0x44>
   17194:	00000306 	br	171a4 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   17198:	0001883a 	nop
   1719c:	00000106 	br	171a4 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
   171a0:	0001883a 	nop
    
  }

  if (ptr != buffer)
   171a4:	e0fff817 	ldw	r3,-32(fp)
   171a8:	e0bffd17 	ldw	r2,-12(fp)
   171ac:	18800426 	beq	r3,r2,171c0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   171b0:	e0fff817 	ldw	r3,-32(fp)
   171b4:	e0bffd17 	ldw	r2,-12(fp)
   171b8:	1885c83a 	sub	r2,r3,r2
   171bc:	00000606 	br	171d8 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
   171c0:	e0bfff17 	ldw	r2,-4(fp)
   171c4:	1090000c 	andi	r2,r2,16384
   171c8:	10000226 	beq	r2,zero,171d4 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
   171cc:	00bffd44 	movi	r2,-11
   171d0:	00000106 	br	171d8 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
   171d4:	00bffec4 	movi	r2,-5
}
   171d8:	e037883a 	mov	sp,fp
   171dc:	df000017 	ldw	fp,0(sp)
   171e0:	dec00104 	addi	sp,sp,4
   171e4:	f800283a 	ret

000171e8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   171e8:	defff904 	addi	sp,sp,-28
   171ec:	df000615 	stw	fp,24(sp)
   171f0:	df000604 	addi	fp,sp,24
   171f4:	e13ffc15 	stw	r4,-16(fp)
   171f8:	e17ffd15 	stw	r5,-12(fp)
   171fc:	e1bffe15 	stw	r6,-8(fp)
   17200:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   17204:	e0bffc17 	ldw	r2,-16(fp)
   17208:	10800017 	ldw	r2,0(r2)
   1720c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   17210:	e0bffe17 	ldw	r2,-8(fp)
   17214:	e0fffd17 	ldw	r3,-12(fp)
   17218:	1885883a 	add	r2,r3,r2
   1721c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   17220:	00000f06 	br	17260 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   17224:	e0bffa17 	ldw	r2,-24(fp)
   17228:	10800104 	addi	r2,r2,4
   1722c:	10800037 	ldwio	r2,0(r2)
   17230:	10bfffec 	andhi	r2,r2,65535
   17234:	10000a26 	beq	r2,zero,17260 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   17238:	e0bffa17 	ldw	r2,-24(fp)
   1723c:	e0fffd17 	ldw	r3,-12(fp)
   17240:	18c00003 	ldbu	r3,0(r3)
   17244:	18c03fcc 	andi	r3,r3,255
   17248:	18c0201c 	xori	r3,r3,128
   1724c:	18ffe004 	addi	r3,r3,-128
   17250:	e13ffd17 	ldw	r4,-12(fp)
   17254:	21000044 	addi	r4,r4,1
   17258:	e13ffd15 	stw	r4,-12(fp)
   1725c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   17260:	e0fffd17 	ldw	r3,-12(fp)
   17264:	e0bffb17 	ldw	r2,-20(fp)
   17268:	18bfee36 	bltu	r3,r2,17224 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   1726c:	e0bffe17 	ldw	r2,-8(fp)
}
   17270:	e037883a 	mov	sp,fp
   17274:	df000017 	ldw	fp,0(sp)
   17278:	dec00104 	addi	sp,sp,4
   1727c:	f800283a 	ret

00017280 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   17280:	defffa04 	addi	sp,sp,-24
   17284:	dfc00515 	stw	ra,20(sp)
   17288:	df000415 	stw	fp,16(sp)
   1728c:	df000404 	addi	fp,sp,16
   17290:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   17294:	0007883a 	mov	r3,zero
   17298:	e0bfff17 	ldw	r2,-4(fp)
   1729c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   172a0:	e0bfff17 	ldw	r2,-4(fp)
   172a4:	10800104 	addi	r2,r2,4
   172a8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   172ac:	0005303a 	rdctl	r2,status
   172b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172b4:	e0fffd17 	ldw	r3,-12(fp)
   172b8:	00bfff84 	movi	r2,-2
   172bc:	1884703a 	and	r2,r3,r2
   172c0:	1001703a 	wrctl	status,r2
  
  return context;
   172c4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   172c8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   172cc:	0017dd00 	call	17dd0 <alt_tick>
   172d0:	e0bffc17 	ldw	r2,-16(fp)
   172d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172d8:	e0bffe17 	ldw	r2,-8(fp)
   172dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   172e0:	e037883a 	mov	sp,fp
   172e4:	dfc00117 	ldw	ra,4(sp)
   172e8:	df000017 	ldw	fp,0(sp)
   172ec:	dec00204 	addi	sp,sp,8
   172f0:	f800283a 	ret

000172f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   172f4:	defff804 	addi	sp,sp,-32
   172f8:	dfc00715 	stw	ra,28(sp)
   172fc:	df000615 	stw	fp,24(sp)
   17300:	df000604 	addi	fp,sp,24
   17304:	e13ffc15 	stw	r4,-16(fp)
   17308:	e17ffd15 	stw	r5,-12(fp)
   1730c:	e1bffe15 	stw	r6,-8(fp)
   17310:	e1ffff15 	stw	r7,-4(fp)
   17314:	e0bfff17 	ldw	r2,-4(fp)
   17318:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1731c:	008000b4 	movhi	r2,2
   17320:	10a61704 	addi	r2,r2,-26532
   17324:	10800017 	ldw	r2,0(r2)
   17328:	1000041e 	bne	r2,zero,1733c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1732c:	008000b4 	movhi	r2,2
   17330:	10a61704 	addi	r2,r2,-26532
   17334:	e0fffb17 	ldw	r3,-20(fp)
   17338:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1733c:	e0bffc17 	ldw	r2,-16(fp)
   17340:	10800104 	addi	r2,r2,4
   17344:	00c001c4 	movi	r3,7
   17348:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1734c:	d8000015 	stw	zero,0(sp)
   17350:	e13ffd17 	ldw	r4,-12(fp)
   17354:	e17ffe17 	ldw	r5,-8(fp)
   17358:	01800074 	movhi	r6,1
   1735c:	319ca004 	addi	r6,r6,29312
   17360:	e1fffc17 	ldw	r7,-16(fp)
   17364:	00176000 	call	17600 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   17368:	e037883a 	mov	sp,fp
   1736c:	dfc00117 	ldw	ra,4(sp)
   17370:	df000017 	ldw	fp,0(sp)
   17374:	dec00204 	addi	sp,sp,8
   17378:	f800283a 	ret

0001737c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1737c:	defffe04 	addi	sp,sp,-8
   17380:	dfc00115 	stw	ra,4(sp)
   17384:	df000015 	stw	fp,0(sp)
   17388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1738c:	008000b4 	movhi	r2,2
   17390:	10a44e04 	addi	r2,r2,-28360
   17394:	10800017 	ldw	r2,0(r2)
   17398:	10000526 	beq	r2,zero,173b0 <alt_get_errno+0x34>
   1739c:	008000b4 	movhi	r2,2
   173a0:	10a44e04 	addi	r2,r2,-28360
   173a4:	10800017 	ldw	r2,0(r2)
   173a8:	103ee83a 	callr	r2
   173ac:	00000206 	br	173b8 <alt_get_errno+0x3c>
   173b0:	008000b4 	movhi	r2,2
   173b4:	10a61204 	addi	r2,r2,-26552
}
   173b8:	e037883a 	mov	sp,fp
   173bc:	dfc00117 	ldw	ra,4(sp)
   173c0:	df000017 	ldw	fp,0(sp)
   173c4:	dec00204 	addi	sp,sp,8
   173c8:	f800283a 	ret

000173cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   173cc:	defffb04 	addi	sp,sp,-20
   173d0:	dfc00415 	stw	ra,16(sp)
   173d4:	df000315 	stw	fp,12(sp)
   173d8:	df000304 	addi	fp,sp,12
   173dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   173e0:	e0bfff17 	ldw	r2,-4(fp)
   173e4:	10000716 	blt	r2,zero,17404 <close+0x38>
   173e8:	e13fff17 	ldw	r4,-4(fp)
   173ec:	01400304 	movi	r5,12
   173f0:	00112540 	call	11254 <__mulsi3>
   173f4:	00c000b4 	movhi	r3,2
   173f8:	18e3e404 	addi	r3,r3,-28784
   173fc:	10c5883a 	add	r2,r2,r3
   17400:	00000106 	br	17408 <close+0x3c>
   17404:	0005883a 	mov	r2,zero
   17408:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1740c:	e0bffd17 	ldw	r2,-12(fp)
   17410:	10001826 	beq	r2,zero,17474 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   17414:	e0bffd17 	ldw	r2,-12(fp)
   17418:	10800017 	ldw	r2,0(r2)
   1741c:	10800417 	ldw	r2,16(r2)
   17420:	10000626 	beq	r2,zero,1743c <close+0x70>
   17424:	e0bffd17 	ldw	r2,-12(fp)
   17428:	10800017 	ldw	r2,0(r2)
   1742c:	10800417 	ldw	r2,16(r2)
   17430:	e13ffd17 	ldw	r4,-12(fp)
   17434:	103ee83a 	callr	r2
   17438:	00000106 	br	17440 <close+0x74>
   1743c:	0005883a 	mov	r2,zero
   17440:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   17444:	e13fff17 	ldw	r4,-4(fp)
   17448:	0017cb80 	call	17cb8 <alt_release_fd>
    if (rval < 0)
   1744c:	e0bffe17 	ldw	r2,-8(fp)
   17450:	1000060e 	bge	r2,zero,1746c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   17454:	001737c0 	call	1737c <alt_get_errno>
   17458:	e0fffe17 	ldw	r3,-8(fp)
   1745c:	00c7c83a 	sub	r3,zero,r3
   17460:	10c00015 	stw	r3,0(r2)
      return -1;
   17464:	00bfffc4 	movi	r2,-1
   17468:	00000606 	br	17484 <close+0xb8>
    }
    return 0;
   1746c:	0005883a 	mov	r2,zero
   17470:	00000406 	br	17484 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17474:	001737c0 	call	1737c <alt_get_errno>
   17478:	00c01444 	movi	r3,81
   1747c:	10c00015 	stw	r3,0(r2)
    return -1;
   17480:	00bfffc4 	movi	r2,-1
  }
}
   17484:	e037883a 	mov	sp,fp
   17488:	dfc00117 	ldw	ra,4(sp)
   1748c:	df000017 	ldw	fp,0(sp)
   17490:	dec00204 	addi	sp,sp,8
   17494:	f800283a 	ret

00017498 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   17498:	deffff04 	addi	sp,sp,-4
   1749c:	df000015 	stw	fp,0(sp)
   174a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   174a4:	e037883a 	mov	sp,fp
   174a8:	df000017 	ldw	fp,0(sp)
   174ac:	dec00104 	addi	sp,sp,4
   174b0:	f800283a 	ret

000174b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   174b4:	defffc04 	addi	sp,sp,-16
   174b8:	df000315 	stw	fp,12(sp)
   174bc:	df000304 	addi	fp,sp,12
   174c0:	e13ffd15 	stw	r4,-12(fp)
   174c4:	e17ffe15 	stw	r5,-8(fp)
   174c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   174cc:	e0bfff17 	ldw	r2,-4(fp)
}
   174d0:	e037883a 	mov	sp,fp
   174d4:	df000017 	ldw	fp,0(sp)
   174d8:	dec00104 	addi	sp,sp,4
   174dc:	f800283a 	ret

000174e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   174e0:	defffe04 	addi	sp,sp,-8
   174e4:	dfc00115 	stw	ra,4(sp)
   174e8:	df000015 	stw	fp,0(sp)
   174ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   174f0:	008000b4 	movhi	r2,2
   174f4:	10a44e04 	addi	r2,r2,-28360
   174f8:	10800017 	ldw	r2,0(r2)
   174fc:	10000526 	beq	r2,zero,17514 <alt_get_errno+0x34>
   17500:	008000b4 	movhi	r2,2
   17504:	10a44e04 	addi	r2,r2,-28360
   17508:	10800017 	ldw	r2,0(r2)
   1750c:	103ee83a 	callr	r2
   17510:	00000206 	br	1751c <alt_get_errno+0x3c>
   17514:	008000b4 	movhi	r2,2
   17518:	10a61204 	addi	r2,r2,-26552
}
   1751c:	e037883a 	mov	sp,fp
   17520:	dfc00117 	ldw	ra,4(sp)
   17524:	df000017 	ldw	fp,0(sp)
   17528:	dec00204 	addi	sp,sp,8
   1752c:	f800283a 	ret

00017530 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   17530:	defffa04 	addi	sp,sp,-24
   17534:	dfc00515 	stw	ra,20(sp)
   17538:	df000415 	stw	fp,16(sp)
   1753c:	df000404 	addi	fp,sp,16
   17540:	e13ffe15 	stw	r4,-8(fp)
   17544:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   17548:	e0bffe17 	ldw	r2,-8(fp)
   1754c:	10000326 	beq	r2,zero,1755c <alt_dev_llist_insert+0x2c>
   17550:	e0bffe17 	ldw	r2,-8(fp)
   17554:	10800217 	ldw	r2,8(r2)
   17558:	1000051e 	bne	r2,zero,17570 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   1755c:	00174e00 	call	174e0 <alt_get_errno>
   17560:	00c00584 	movi	r3,22
   17564:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   17568:	00bffa84 	movi	r2,-22
   1756c:	00001306 	br	175bc <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   17570:	e0bffe17 	ldw	r2,-8(fp)
   17574:	e0ffff17 	ldw	r3,-4(fp)
   17578:	e0fffc15 	stw	r3,-16(fp)
   1757c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   17580:	e0bffd17 	ldw	r2,-12(fp)
   17584:	e0fffc17 	ldw	r3,-16(fp)
   17588:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1758c:	e0bffc17 	ldw	r2,-16(fp)
   17590:	10c00017 	ldw	r3,0(r2)
   17594:	e0bffd17 	ldw	r2,-12(fp)
   17598:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1759c:	e0bffc17 	ldw	r2,-16(fp)
   175a0:	10800017 	ldw	r2,0(r2)
   175a4:	e0fffd17 	ldw	r3,-12(fp)
   175a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   175ac:	e0bffc17 	ldw	r2,-16(fp)
   175b0:	e0fffd17 	ldw	r3,-12(fp)
   175b4:	10c00015 	stw	r3,0(r2)

  return 0;  
   175b8:	0005883a 	mov	r2,zero
}
   175bc:	e037883a 	mov	sp,fp
   175c0:	dfc00117 	ldw	ra,4(sp)
   175c4:	df000017 	ldw	fp,0(sp)
   175c8:	dec00204 	addi	sp,sp,8
   175cc:	f800283a 	ret

000175d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   175d0:	defffe04 	addi	sp,sp,-8
   175d4:	dfc00115 	stw	ra,4(sp)
   175d8:	df000015 	stw	fp,0(sp)
   175dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   175e0:	0009883a 	mov	r4,zero
   175e4:	01440004 	movi	r5,4096
   175e8:	001816c0 	call	1816c <alt_icache_flush>
#endif
}
   175ec:	e037883a 	mov	sp,fp
   175f0:	dfc00117 	ldw	ra,4(sp)
   175f4:	df000017 	ldw	fp,0(sp)
   175f8:	dec00204 	addi	sp,sp,8
   175fc:	f800283a 	ret

00017600 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   17600:	defff904 	addi	sp,sp,-28
   17604:	dfc00615 	stw	ra,24(sp)
   17608:	df000515 	stw	fp,20(sp)
   1760c:	df000504 	addi	fp,sp,20
   17610:	e13ffc15 	stw	r4,-16(fp)
   17614:	e17ffd15 	stw	r5,-12(fp)
   17618:	e1bffe15 	stw	r6,-8(fp)
   1761c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   17620:	e0800217 	ldw	r2,8(fp)
   17624:	d8800015 	stw	r2,0(sp)
   17628:	e13ffc17 	ldw	r4,-16(fp)
   1762c:	e17ffd17 	ldw	r5,-12(fp)
   17630:	e1bffe17 	ldw	r6,-8(fp)
   17634:	e1ffff17 	ldw	r7,-4(fp)
   17638:	00177d80 	call	177d8 <alt_iic_isr_register>
}  
   1763c:	e037883a 	mov	sp,fp
   17640:	dfc00117 	ldw	ra,4(sp)
   17644:	df000017 	ldw	fp,0(sp)
   17648:	dec00204 	addi	sp,sp,8
   1764c:	f800283a 	ret

00017650 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   17650:	defff904 	addi	sp,sp,-28
   17654:	df000615 	stw	fp,24(sp)
   17658:	df000604 	addi	fp,sp,24
   1765c:	e13ffe15 	stw	r4,-8(fp)
   17660:	e17fff15 	stw	r5,-4(fp)
   17664:	e0bfff17 	ldw	r2,-4(fp)
   17668:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1766c:	0005303a 	rdctl	r2,status
   17670:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17674:	e0fffb17 	ldw	r3,-20(fp)
   17678:	00bfff84 	movi	r2,-2
   1767c:	1884703a 	and	r2,r3,r2
   17680:	1001703a 	wrctl	status,r2
  
  return context;
   17684:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   17688:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1768c:	e0bffa17 	ldw	r2,-24(fp)
   17690:	00c00044 	movi	r3,1
   17694:	1884983a 	sll	r2,r3,r2
   17698:	1007883a 	mov	r3,r2
   1769c:	008000b4 	movhi	r2,2
   176a0:	10a61604 	addi	r2,r2,-26536
   176a4:	10800017 	ldw	r2,0(r2)
   176a8:	1886b03a 	or	r3,r3,r2
   176ac:	008000b4 	movhi	r2,2
   176b0:	10a61604 	addi	r2,r2,-26536
   176b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   176b8:	008000b4 	movhi	r2,2
   176bc:	10a61604 	addi	r2,r2,-26536
   176c0:	10800017 	ldw	r2,0(r2)
   176c4:	100170fa 	wrctl	ienable,r2
   176c8:	e0bffc17 	ldw	r2,-16(fp)
   176cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176d0:	e0bffd17 	ldw	r2,-12(fp)
   176d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   176d8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   176dc:	e037883a 	mov	sp,fp
   176e0:	df000017 	ldw	fp,0(sp)
   176e4:	dec00104 	addi	sp,sp,4
   176e8:	f800283a 	ret

000176ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   176ec:	defff904 	addi	sp,sp,-28
   176f0:	df000615 	stw	fp,24(sp)
   176f4:	df000604 	addi	fp,sp,24
   176f8:	e13ffe15 	stw	r4,-8(fp)
   176fc:	e17fff15 	stw	r5,-4(fp)
   17700:	e0bfff17 	ldw	r2,-4(fp)
   17704:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17708:	0005303a 	rdctl	r2,status
   1770c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17710:	e0fffb17 	ldw	r3,-20(fp)
   17714:	00bfff84 	movi	r2,-2
   17718:	1884703a 	and	r2,r3,r2
   1771c:	1001703a 	wrctl	status,r2
  
  return context;
   17720:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   17724:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   17728:	e0bffa17 	ldw	r2,-24(fp)
   1772c:	00c00044 	movi	r3,1
   17730:	1884983a 	sll	r2,r3,r2
   17734:	0084303a 	nor	r2,zero,r2
   17738:	1007883a 	mov	r3,r2
   1773c:	008000b4 	movhi	r2,2
   17740:	10a61604 	addi	r2,r2,-26536
   17744:	10800017 	ldw	r2,0(r2)
   17748:	1886703a 	and	r3,r3,r2
   1774c:	008000b4 	movhi	r2,2
   17750:	10a61604 	addi	r2,r2,-26536
   17754:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   17758:	008000b4 	movhi	r2,2
   1775c:	10a61604 	addi	r2,r2,-26536
   17760:	10800017 	ldw	r2,0(r2)
   17764:	100170fa 	wrctl	ienable,r2
   17768:	e0bffc17 	ldw	r2,-16(fp)
   1776c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17770:	e0bffd17 	ldw	r2,-12(fp)
   17774:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   17778:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1777c:	e037883a 	mov	sp,fp
   17780:	df000017 	ldw	fp,0(sp)
   17784:	dec00104 	addi	sp,sp,4
   17788:	f800283a 	ret

0001778c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1778c:	defffc04 	addi	sp,sp,-16
   17790:	df000315 	stw	fp,12(sp)
   17794:	df000304 	addi	fp,sp,12
   17798:	e13ffe15 	stw	r4,-8(fp)
   1779c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   177a0:	000530fa 	rdctl	r2,ienable
   177a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   177a8:	e0bfff17 	ldw	r2,-4(fp)
   177ac:	00c00044 	movi	r3,1
   177b0:	1884983a 	sll	r2,r3,r2
   177b4:	1007883a 	mov	r3,r2
   177b8:	e0bffd17 	ldw	r2,-12(fp)
   177bc:	1884703a 	and	r2,r3,r2
   177c0:	1004c03a 	cmpne	r2,r2,zero
   177c4:	10803fcc 	andi	r2,r2,255
}
   177c8:	e037883a 	mov	sp,fp
   177cc:	df000017 	ldw	fp,0(sp)
   177d0:	dec00104 	addi	sp,sp,4
   177d4:	f800283a 	ret

000177d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   177d8:	defff504 	addi	sp,sp,-44
   177dc:	dfc00a15 	stw	ra,40(sp)
   177e0:	df000915 	stw	fp,36(sp)
   177e4:	df000904 	addi	fp,sp,36
   177e8:	e13ffc15 	stw	r4,-16(fp)
   177ec:	e17ffd15 	stw	r5,-12(fp)
   177f0:	e1bffe15 	stw	r6,-8(fp)
   177f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   177f8:	00bffa84 	movi	r2,-22
   177fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   17800:	e0bffd17 	ldw	r2,-12(fp)
   17804:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   17808:	e0bff817 	ldw	r2,-32(fp)
   1780c:	10800808 	cmpgei	r2,r2,32
   17810:	1000271e 	bne	r2,zero,178b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17814:	0005303a 	rdctl	r2,status
   17818:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1781c:	e0fffa17 	ldw	r3,-24(fp)
   17820:	00bfff84 	movi	r2,-2
   17824:	1884703a 	and	r2,r3,r2
   17828:	1001703a 	wrctl	status,r2
  
  return context;
   1782c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   17830:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   17834:	00c000b4 	movhi	r3,2
   17838:	18e62304 	addi	r3,r3,-26484
   1783c:	e0bff817 	ldw	r2,-32(fp)
   17840:	100490fa 	slli	r2,r2,3
   17844:	1885883a 	add	r2,r3,r2
   17848:	e0fffe17 	ldw	r3,-8(fp)
   1784c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   17850:	00c000b4 	movhi	r3,2
   17854:	18e62304 	addi	r3,r3,-26484
   17858:	e0bff817 	ldw	r2,-32(fp)
   1785c:	100490fa 	slli	r2,r2,3
   17860:	1885883a 	add	r2,r3,r2
   17864:	10800104 	addi	r2,r2,4
   17868:	e0ffff17 	ldw	r3,-4(fp)
   1786c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   17870:	e0bffe17 	ldw	r2,-8(fp)
   17874:	10000526 	beq	r2,zero,1788c <alt_iic_isr_register+0xb4>
   17878:	e0bff817 	ldw	r2,-32(fp)
   1787c:	e13ffc17 	ldw	r4,-16(fp)
   17880:	100b883a 	mov	r5,r2
   17884:	00176500 	call	17650 <alt_ic_irq_enable>
   17888:	00000406 	br	1789c <alt_iic_isr_register+0xc4>
   1788c:	e0bff817 	ldw	r2,-32(fp)
   17890:	e13ffc17 	ldw	r4,-16(fp)
   17894:	100b883a 	mov	r5,r2
   17898:	00176ec0 	call	176ec <alt_ic_irq_disable>
   1789c:	e0bff715 	stw	r2,-36(fp)
   178a0:	e0bff917 	ldw	r2,-28(fp)
   178a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178a8:	e0bffb17 	ldw	r2,-20(fp)
   178ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   178b0:	e0bff717 	ldw	r2,-36(fp)
}
   178b4:	e037883a 	mov	sp,fp
   178b8:	dfc00117 	ldw	ra,4(sp)
   178bc:	df000017 	ldw	fp,0(sp)
   178c0:	dec00204 	addi	sp,sp,8
   178c4:	f800283a 	ret

000178c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   178c8:	defff804 	addi	sp,sp,-32
   178cc:	dfc00715 	stw	ra,28(sp)
   178d0:	df000615 	stw	fp,24(sp)
   178d4:	dc000515 	stw	r16,20(sp)
   178d8:	df000504 	addi	fp,sp,20
   178dc:	e13ffc15 	stw	r4,-16(fp)
   178e0:	e17ffd15 	stw	r5,-12(fp)
   178e4:	e1bffe15 	stw	r6,-8(fp)
   178e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   178ec:	e13ffd17 	ldw	r4,-12(fp)
   178f0:	e17ffe17 	ldw	r5,-8(fp)
   178f4:	e1bfff17 	ldw	r6,-4(fp)
   178f8:	0017b600 	call	17b60 <open>
   178fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   17900:	e0bffb17 	ldw	r2,-20(fp)
   17904:	10002216 	blt	r2,zero,17990 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   17908:	040000b4 	movhi	r16,2
   1790c:	8423e404 	addi	r16,r16,-28784
   17910:	e0bffb17 	ldw	r2,-20(fp)
   17914:	1009883a 	mov	r4,r2
   17918:	01400304 	movi	r5,12
   1791c:	00112540 	call	11254 <__mulsi3>
   17920:	8085883a 	add	r2,r16,r2
   17924:	10c00017 	ldw	r3,0(r2)
   17928:	e0bffc17 	ldw	r2,-16(fp)
   1792c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   17930:	040000b4 	movhi	r16,2
   17934:	8423e404 	addi	r16,r16,-28784
   17938:	e0bffb17 	ldw	r2,-20(fp)
   1793c:	1009883a 	mov	r4,r2
   17940:	01400304 	movi	r5,12
   17944:	00112540 	call	11254 <__mulsi3>
   17948:	8085883a 	add	r2,r16,r2
   1794c:	10800104 	addi	r2,r2,4
   17950:	10c00017 	ldw	r3,0(r2)
   17954:	e0bffc17 	ldw	r2,-16(fp)
   17958:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1795c:	040000b4 	movhi	r16,2
   17960:	8423e404 	addi	r16,r16,-28784
   17964:	e0bffb17 	ldw	r2,-20(fp)
   17968:	1009883a 	mov	r4,r2
   1796c:	01400304 	movi	r5,12
   17970:	00112540 	call	11254 <__mulsi3>
   17974:	8085883a 	add	r2,r16,r2
   17978:	10800204 	addi	r2,r2,8
   1797c:	10c00017 	ldw	r3,0(r2)
   17980:	e0bffc17 	ldw	r2,-16(fp)
   17984:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   17988:	e13ffb17 	ldw	r4,-20(fp)
   1798c:	0017cb80 	call	17cb8 <alt_release_fd>
  }
} 
   17990:	e037883a 	mov	sp,fp
   17994:	dfc00217 	ldw	ra,8(sp)
   17998:	df000117 	ldw	fp,4(sp)
   1799c:	dc000017 	ldw	r16,0(sp)
   179a0:	dec00304 	addi	sp,sp,12
   179a4:	f800283a 	ret

000179a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   179a8:	defffb04 	addi	sp,sp,-20
   179ac:	dfc00415 	stw	ra,16(sp)
   179b0:	df000315 	stw	fp,12(sp)
   179b4:	df000304 	addi	fp,sp,12
   179b8:	e13ffd15 	stw	r4,-12(fp)
   179bc:	e17ffe15 	stw	r5,-8(fp)
   179c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   179c4:	010000b4 	movhi	r4,2
   179c8:	2123e704 	addi	r4,r4,-28772
   179cc:	e17ffd17 	ldw	r5,-12(fp)
   179d0:	01800044 	movi	r6,1
   179d4:	01c07fc4 	movi	r7,511
   179d8:	00178c80 	call	178c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   179dc:	010000b4 	movhi	r4,2
   179e0:	2123e404 	addi	r4,r4,-28784
   179e4:	e17ffe17 	ldw	r5,-8(fp)
   179e8:	000d883a 	mov	r6,zero
   179ec:	01c07fc4 	movi	r7,511
   179f0:	00178c80 	call	178c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   179f4:	010000b4 	movhi	r4,2
   179f8:	2123ea04 	addi	r4,r4,-28760
   179fc:	e17fff17 	ldw	r5,-4(fp)
   17a00:	01800044 	movi	r6,1
   17a04:	01c07fc4 	movi	r7,511
   17a08:	00178c80 	call	178c8 <alt_open_fd>
}  
   17a0c:	e037883a 	mov	sp,fp
   17a10:	dfc00117 	ldw	ra,4(sp)
   17a14:	df000017 	ldw	fp,0(sp)
   17a18:	dec00204 	addi	sp,sp,8
   17a1c:	f800283a 	ret

00017a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17a20:	defffe04 	addi	sp,sp,-8
   17a24:	dfc00115 	stw	ra,4(sp)
   17a28:	df000015 	stw	fp,0(sp)
   17a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17a30:	008000b4 	movhi	r2,2
   17a34:	10a44e04 	addi	r2,r2,-28360
   17a38:	10800017 	ldw	r2,0(r2)
   17a3c:	10000526 	beq	r2,zero,17a54 <alt_get_errno+0x34>
   17a40:	008000b4 	movhi	r2,2
   17a44:	10a44e04 	addi	r2,r2,-28360
   17a48:	10800017 	ldw	r2,0(r2)
   17a4c:	103ee83a 	callr	r2
   17a50:	00000206 	br	17a5c <alt_get_errno+0x3c>
   17a54:	008000b4 	movhi	r2,2
   17a58:	10a61204 	addi	r2,r2,-26552
}
   17a5c:	e037883a 	mov	sp,fp
   17a60:	dfc00117 	ldw	ra,4(sp)
   17a64:	df000017 	ldw	fp,0(sp)
   17a68:	dec00204 	addi	sp,sp,8
   17a6c:	f800283a 	ret

00017a70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   17a70:	defffb04 	addi	sp,sp,-20
   17a74:	dfc00415 	stw	ra,16(sp)
   17a78:	df000315 	stw	fp,12(sp)
   17a7c:	dc000215 	stw	r16,8(sp)
   17a80:	df000204 	addi	fp,sp,8
   17a84:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   17a88:	e0bfff17 	ldw	r2,-4(fp)
   17a8c:	10800217 	ldw	r2,8(r2)
   17a90:	10d00034 	orhi	r3,r2,16384
   17a94:	e0bfff17 	ldw	r2,-4(fp)
   17a98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17a9c:	e03ffe15 	stw	zero,-8(fp)
   17aa0:	00002206 	br	17b2c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17aa4:	040000b4 	movhi	r16,2
   17aa8:	8423e404 	addi	r16,r16,-28784
   17aac:	e0bffe17 	ldw	r2,-8(fp)
   17ab0:	1009883a 	mov	r4,r2
   17ab4:	01400304 	movi	r5,12
   17ab8:	00112540 	call	11254 <__mulsi3>
   17abc:	8085883a 	add	r2,r16,r2
   17ac0:	10c00017 	ldw	r3,0(r2)
   17ac4:	e0bfff17 	ldw	r2,-4(fp)
   17ac8:	10800017 	ldw	r2,0(r2)
   17acc:	1880141e 	bne	r3,r2,17b20 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17ad0:	040000b4 	movhi	r16,2
   17ad4:	8423e404 	addi	r16,r16,-28784
   17ad8:	e0bffe17 	ldw	r2,-8(fp)
   17adc:	1009883a 	mov	r4,r2
   17ae0:	01400304 	movi	r5,12
   17ae4:	00112540 	call	11254 <__mulsi3>
   17ae8:	8085883a 	add	r2,r16,r2
   17aec:	10800204 	addi	r2,r2,8
   17af0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17af4:	10000a0e 	bge	r2,zero,17b20 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   17af8:	e13ffe17 	ldw	r4,-8(fp)
   17afc:	01400304 	movi	r5,12
   17b00:	00112540 	call	11254 <__mulsi3>
   17b04:	00c000b4 	movhi	r3,2
   17b08:	18e3e404 	addi	r3,r3,-28784
   17b0c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17b10:	e0bfff17 	ldw	r2,-4(fp)
   17b14:	18800226 	beq	r3,r2,17b20 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   17b18:	00bffcc4 	movi	r2,-13
   17b1c:	00000a06 	br	17b48 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17b20:	e0bffe17 	ldw	r2,-8(fp)
   17b24:	10800044 	addi	r2,r2,1
   17b28:	e0bffe15 	stw	r2,-8(fp)
   17b2c:	008000b4 	movhi	r2,2
   17b30:	10a44d04 	addi	r2,r2,-28364
   17b34:	10800017 	ldw	r2,0(r2)
   17b38:	1007883a 	mov	r3,r2
   17b3c:	e0bffe17 	ldw	r2,-8(fp)
   17b40:	18bfd82e 	bgeu	r3,r2,17aa4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   17b44:	0005883a 	mov	r2,zero
}
   17b48:	e037883a 	mov	sp,fp
   17b4c:	dfc00217 	ldw	ra,8(sp)
   17b50:	df000117 	ldw	fp,4(sp)
   17b54:	dc000017 	ldw	r16,0(sp)
   17b58:	dec00304 	addi	sp,sp,12
   17b5c:	f800283a 	ret

00017b60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   17b60:	defff604 	addi	sp,sp,-40
   17b64:	dfc00915 	stw	ra,36(sp)
   17b68:	df000815 	stw	fp,32(sp)
   17b6c:	df000804 	addi	fp,sp,32
   17b70:	e13ffd15 	stw	r4,-12(fp)
   17b74:	e17ffe15 	stw	r5,-8(fp)
   17b78:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   17b7c:	00bfffc4 	movi	r2,-1
   17b80:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   17b84:	00bffb44 	movi	r2,-19
   17b88:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   17b8c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   17b90:	e13ffd17 	ldw	r4,-12(fp)
   17b94:	014000b4 	movhi	r5,2
   17b98:	29644b04 	addi	r5,r5,-28372
   17b9c:	0017ef40 	call	17ef4 <alt_find_dev>
   17ba0:	e0bff815 	stw	r2,-32(fp)
   17ba4:	e0bff817 	ldw	r2,-32(fp)
   17ba8:	1000051e 	bne	r2,zero,17bc0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   17bac:	e13ffd17 	ldw	r4,-12(fp)
   17bb0:	0017f840 	call	17f84 <alt_find_file>
   17bb4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   17bb8:	00800044 	movi	r2,1
   17bbc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   17bc0:	e0bff817 	ldw	r2,-32(fp)
   17bc4:	10002a26 	beq	r2,zero,17c70 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   17bc8:	e13ff817 	ldw	r4,-32(fp)
   17bcc:	00180980 	call	18098 <alt_get_fd>
   17bd0:	e0bff915 	stw	r2,-28(fp)
   17bd4:	e0bff917 	ldw	r2,-28(fp)
   17bd8:	1000030e 	bge	r2,zero,17be8 <open+0x88>
    {
      status = index;
   17bdc:	e0bff917 	ldw	r2,-28(fp)
   17be0:	e0bffa15 	stw	r2,-24(fp)
   17be4:	00002406 	br	17c78 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   17be8:	e13ff917 	ldw	r4,-28(fp)
   17bec:	01400304 	movi	r5,12
   17bf0:	00112540 	call	11254 <__mulsi3>
   17bf4:	00c000b4 	movhi	r3,2
   17bf8:	18e3e404 	addi	r3,r3,-28784
   17bfc:	10c5883a 	add	r2,r2,r3
   17c00:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   17c04:	e0fffe17 	ldw	r3,-8(fp)
   17c08:	00900034 	movhi	r2,16384
   17c0c:	10bfffc4 	addi	r2,r2,-1
   17c10:	1886703a 	and	r3,r3,r2
   17c14:	e0bffc17 	ldw	r2,-16(fp)
   17c18:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   17c1c:	e0bffb17 	ldw	r2,-20(fp)
   17c20:	1000051e 	bne	r2,zero,17c38 <open+0xd8>
   17c24:	e13ffc17 	ldw	r4,-16(fp)
   17c28:	0017a700 	call	17a70 <alt_file_locked>
   17c2c:	e0bffa15 	stw	r2,-24(fp)
   17c30:	e0bffa17 	ldw	r2,-24(fp)
   17c34:	10001016 	blt	r2,zero,17c78 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   17c38:	e0bff817 	ldw	r2,-32(fp)
   17c3c:	10800317 	ldw	r2,12(r2)
   17c40:	10000826 	beq	r2,zero,17c64 <open+0x104>
   17c44:	e0bff817 	ldw	r2,-32(fp)
   17c48:	10800317 	ldw	r2,12(r2)
   17c4c:	e13ffc17 	ldw	r4,-16(fp)
   17c50:	e17ffd17 	ldw	r5,-12(fp)
   17c54:	e1bffe17 	ldw	r6,-8(fp)
   17c58:	e1ffff17 	ldw	r7,-4(fp)
   17c5c:	103ee83a 	callr	r2
   17c60:	00000106 	br	17c68 <open+0x108>
   17c64:	0005883a 	mov	r2,zero
   17c68:	e0bffa15 	stw	r2,-24(fp)
   17c6c:	00000206 	br	17c78 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   17c70:	00bffb44 	movi	r2,-19
   17c74:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   17c78:	e0bffa17 	ldw	r2,-24(fp)
   17c7c:	1000080e 	bge	r2,zero,17ca0 <open+0x140>
  {
    alt_release_fd (index);  
   17c80:	e13ff917 	ldw	r4,-28(fp)
   17c84:	0017cb80 	call	17cb8 <alt_release_fd>
    ALT_ERRNO = -status;
   17c88:	0017a200 	call	17a20 <alt_get_errno>
   17c8c:	e0fffa17 	ldw	r3,-24(fp)
   17c90:	00c7c83a 	sub	r3,zero,r3
   17c94:	10c00015 	stw	r3,0(r2)
    return -1;
   17c98:	00bfffc4 	movi	r2,-1
   17c9c:	00000106 	br	17ca4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   17ca0:	e0bff917 	ldw	r2,-28(fp)
}
   17ca4:	e037883a 	mov	sp,fp
   17ca8:	dfc00117 	ldw	ra,4(sp)
   17cac:	df000017 	ldw	fp,0(sp)
   17cb0:	dec00204 	addi	sp,sp,8
   17cb4:	f800283a 	ret

00017cb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   17cb8:	defffc04 	addi	sp,sp,-16
   17cbc:	dfc00315 	stw	ra,12(sp)
   17cc0:	df000215 	stw	fp,8(sp)
   17cc4:	dc000115 	stw	r16,4(sp)
   17cc8:	df000104 	addi	fp,sp,4
   17ccc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   17cd0:	e0bfff17 	ldw	r2,-4(fp)
   17cd4:	108000d0 	cmplti	r2,r2,3
   17cd8:	1000111e 	bne	r2,zero,17d20 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   17cdc:	040000b4 	movhi	r16,2
   17ce0:	8423e404 	addi	r16,r16,-28784
   17ce4:	e0bfff17 	ldw	r2,-4(fp)
   17ce8:	1009883a 	mov	r4,r2
   17cec:	01400304 	movi	r5,12
   17cf0:	00112540 	call	11254 <__mulsi3>
   17cf4:	8085883a 	add	r2,r16,r2
   17cf8:	10800204 	addi	r2,r2,8
   17cfc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   17d00:	040000b4 	movhi	r16,2
   17d04:	8423e404 	addi	r16,r16,-28784
   17d08:	e0bfff17 	ldw	r2,-4(fp)
   17d0c:	1009883a 	mov	r4,r2
   17d10:	01400304 	movi	r5,12
   17d14:	00112540 	call	11254 <__mulsi3>
   17d18:	8085883a 	add	r2,r16,r2
   17d1c:	10000015 	stw	zero,0(r2)
  }
}
   17d20:	e037883a 	mov	sp,fp
   17d24:	dfc00217 	ldw	ra,8(sp)
   17d28:	df000117 	ldw	fp,4(sp)
   17d2c:	dc000017 	ldw	r16,0(sp)
   17d30:	dec00304 	addi	sp,sp,12
   17d34:	f800283a 	ret

00017d38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   17d38:	defffa04 	addi	sp,sp,-24
   17d3c:	df000515 	stw	fp,20(sp)
   17d40:	df000504 	addi	fp,sp,20
   17d44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d48:	0005303a 	rdctl	r2,status
   17d4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d50:	e0fffc17 	ldw	r3,-16(fp)
   17d54:	00bfff84 	movi	r2,-2
   17d58:	1884703a 	and	r2,r3,r2
   17d5c:	1001703a 	wrctl	status,r2
  
  return context;
   17d60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   17d64:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   17d68:	e0bfff17 	ldw	r2,-4(fp)
   17d6c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   17d70:	e0bffd17 	ldw	r2,-12(fp)
   17d74:	10800017 	ldw	r2,0(r2)
   17d78:	e0fffd17 	ldw	r3,-12(fp)
   17d7c:	18c00117 	ldw	r3,4(r3)
   17d80:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   17d84:	e0bffd17 	ldw	r2,-12(fp)
   17d88:	10800117 	ldw	r2,4(r2)
   17d8c:	e0fffd17 	ldw	r3,-12(fp)
   17d90:	18c00017 	ldw	r3,0(r3)
   17d94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   17d98:	e0bffd17 	ldw	r2,-12(fp)
   17d9c:	e0fffd17 	ldw	r3,-12(fp)
   17da0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   17da4:	e0bffd17 	ldw	r2,-12(fp)
   17da8:	e0fffd17 	ldw	r3,-12(fp)
   17dac:	10c00015 	stw	r3,0(r2)
   17db0:	e0bffb17 	ldw	r2,-20(fp)
   17db4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17db8:	e0bffe17 	ldw	r2,-8(fp)
   17dbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   17dc0:	e037883a 	mov	sp,fp
   17dc4:	df000017 	ldw	fp,0(sp)
   17dc8:	dec00104 	addi	sp,sp,4
   17dcc:	f800283a 	ret

00017dd0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   17dd0:	defffb04 	addi	sp,sp,-20
   17dd4:	dfc00415 	stw	ra,16(sp)
   17dd8:	df000315 	stw	fp,12(sp)
   17ddc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   17de0:	d0a00c17 	ldw	r2,-32720(gp)
   17de4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   17de8:	d0a1d417 	ldw	r2,-30896(gp)
   17dec:	10800044 	addi	r2,r2,1
   17df0:	d0a1d415 	stw	r2,-30896(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17df4:	00002e06 	br	17eb0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   17df8:	e0bffd17 	ldw	r2,-12(fp)
   17dfc:	10800017 	ldw	r2,0(r2)
   17e00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   17e04:	e0bffd17 	ldw	r2,-12(fp)
   17e08:	10800403 	ldbu	r2,16(r2)
   17e0c:	10803fcc 	andi	r2,r2,255
   17e10:	10000426 	beq	r2,zero,17e24 <alt_tick+0x54>
   17e14:	d0a1d417 	ldw	r2,-30896(gp)
   17e18:	1000021e 	bne	r2,zero,17e24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   17e1c:	e0bffd17 	ldw	r2,-12(fp)
   17e20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   17e24:	e0bffd17 	ldw	r2,-12(fp)
   17e28:	10800217 	ldw	r2,8(r2)
   17e2c:	d0e1d417 	ldw	r3,-30896(gp)
   17e30:	18801d36 	bltu	r3,r2,17ea8 <alt_tick+0xd8>
   17e34:	e0bffd17 	ldw	r2,-12(fp)
   17e38:	10800403 	ldbu	r2,16(r2)
   17e3c:	10803fcc 	andi	r2,r2,255
   17e40:	1000191e 	bne	r2,zero,17ea8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   17e44:	e0bffd17 	ldw	r2,-12(fp)
   17e48:	10c00317 	ldw	r3,12(r2)
   17e4c:	e0bffd17 	ldw	r2,-12(fp)
   17e50:	10800517 	ldw	r2,20(r2)
   17e54:	1009883a 	mov	r4,r2
   17e58:	183ee83a 	callr	r3
   17e5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   17e60:	e0bfff17 	ldw	r2,-4(fp)
   17e64:	1000031e 	bne	r2,zero,17e74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   17e68:	e13ffd17 	ldw	r4,-12(fp)
   17e6c:	0017d380 	call	17d38 <alt_alarm_stop>
   17e70:	00000d06 	br	17ea8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   17e74:	e0bffd17 	ldw	r2,-12(fp)
   17e78:	10c00217 	ldw	r3,8(r2)
   17e7c:	e0bfff17 	ldw	r2,-4(fp)
   17e80:	1887883a 	add	r3,r3,r2
   17e84:	e0bffd17 	ldw	r2,-12(fp)
   17e88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   17e8c:	e0bffd17 	ldw	r2,-12(fp)
   17e90:	10c00217 	ldw	r3,8(r2)
   17e94:	d0a1d417 	ldw	r2,-30896(gp)
   17e98:	1880032e 	bgeu	r3,r2,17ea8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   17e9c:	e0bffd17 	ldw	r2,-12(fp)
   17ea0:	00c00044 	movi	r3,1
   17ea4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   17ea8:	e0bffe17 	ldw	r2,-8(fp)
   17eac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17eb0:	e0fffd17 	ldw	r3,-12(fp)
   17eb4:	d0a00c04 	addi	r2,gp,-32720
   17eb8:	18bfcf1e 	bne	r3,r2,17df8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   17ebc:	0001883a 	nop
}
   17ec0:	e037883a 	mov	sp,fp
   17ec4:	dfc00117 	ldw	ra,4(sp)
   17ec8:	df000017 	ldw	fp,0(sp)
   17ecc:	dec00204 	addi	sp,sp,8
   17ed0:	f800283a 	ret

00017ed4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   17ed4:	deffff04 	addi	sp,sp,-4
   17ed8:	df000015 	stw	fp,0(sp)
   17edc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17ee0:	000170fa 	wrctl	ienable,zero
}
   17ee4:	e037883a 	mov	sp,fp
   17ee8:	df000017 	ldw	fp,0(sp)
   17eec:	dec00104 	addi	sp,sp,4
   17ef0:	f800283a 	ret

00017ef4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   17ef4:	defffa04 	addi	sp,sp,-24
   17ef8:	dfc00515 	stw	ra,20(sp)
   17efc:	df000415 	stw	fp,16(sp)
   17f00:	df000404 	addi	fp,sp,16
   17f04:	e13ffe15 	stw	r4,-8(fp)
   17f08:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   17f0c:	e0bfff17 	ldw	r2,-4(fp)
   17f10:	10800017 	ldw	r2,0(r2)
   17f14:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   17f18:	e13ffe17 	ldw	r4,-8(fp)
   17f1c:	001839c0 	call	1839c <strlen>
   17f20:	10800044 	addi	r2,r2,1
   17f24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17f28:	00000d06 	br	17f60 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   17f2c:	e0bffc17 	ldw	r2,-16(fp)
   17f30:	10c00217 	ldw	r3,8(r2)
   17f34:	e0bffd17 	ldw	r2,-12(fp)
   17f38:	1809883a 	mov	r4,r3
   17f3c:	e17ffe17 	ldw	r5,-8(fp)
   17f40:	100d883a 	mov	r6,r2
   17f44:	00183540 	call	18354 <memcmp>
   17f48:	1000021e 	bne	r2,zero,17f54 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   17f4c:	e0bffc17 	ldw	r2,-16(fp)
   17f50:	00000706 	br	17f70 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   17f54:	e0bffc17 	ldw	r2,-16(fp)
   17f58:	10800017 	ldw	r2,0(r2)
   17f5c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17f60:	e0fffc17 	ldw	r3,-16(fp)
   17f64:	e0bfff17 	ldw	r2,-4(fp)
   17f68:	18bff01e 	bne	r3,r2,17f2c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   17f6c:	0005883a 	mov	r2,zero
}
   17f70:	e037883a 	mov	sp,fp
   17f74:	dfc00117 	ldw	ra,4(sp)
   17f78:	df000017 	ldw	fp,0(sp)
   17f7c:	dec00204 	addi	sp,sp,8
   17f80:	f800283a 	ret

00017f84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17f84:	defffb04 	addi	sp,sp,-20
   17f88:	dfc00415 	stw	ra,16(sp)
   17f8c:	df000315 	stw	fp,12(sp)
   17f90:	df000304 	addi	fp,sp,12
   17f94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17f98:	008000b4 	movhi	r2,2
   17f9c:	10a44904 	addi	r2,r2,-28380
   17fa0:	10800017 	ldw	r2,0(r2)
   17fa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17fa8:	00003106 	br	18070 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   17fac:	e0bffd17 	ldw	r2,-12(fp)
   17fb0:	10800217 	ldw	r2,8(r2)
   17fb4:	1009883a 	mov	r4,r2
   17fb8:	001839c0 	call	1839c <strlen>
   17fbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17fc0:	e0bffd17 	ldw	r2,-12(fp)
   17fc4:	10c00217 	ldw	r3,8(r2)
   17fc8:	e0bffe17 	ldw	r2,-8(fp)
   17fcc:	10bfffc4 	addi	r2,r2,-1
   17fd0:	1885883a 	add	r2,r3,r2
   17fd4:	10800003 	ldbu	r2,0(r2)
   17fd8:	10803fcc 	andi	r2,r2,255
   17fdc:	1080201c 	xori	r2,r2,128
   17fe0:	10bfe004 	addi	r2,r2,-128
   17fe4:	10800bd8 	cmpnei	r2,r2,47
   17fe8:	1000031e 	bne	r2,zero,17ff8 <alt_find_file+0x74>
    {
      len -= 1;
   17fec:	e0bffe17 	ldw	r2,-8(fp)
   17ff0:	10bfffc4 	addi	r2,r2,-1
   17ff4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17ff8:	e0bffe17 	ldw	r2,-8(fp)
   17ffc:	e0ffff17 	ldw	r3,-4(fp)
   18000:	1885883a 	add	r2,r3,r2
   18004:	10800003 	ldbu	r2,0(r2)
   18008:	10803fcc 	andi	r2,r2,255
   1800c:	1080201c 	xori	r2,r2,128
   18010:	10bfe004 	addi	r2,r2,-128
   18014:	10800be0 	cmpeqi	r2,r2,47
   18018:	1000081e 	bne	r2,zero,1803c <alt_find_file+0xb8>
   1801c:	e0bffe17 	ldw	r2,-8(fp)
   18020:	e0ffff17 	ldw	r3,-4(fp)
   18024:	1885883a 	add	r2,r3,r2
   18028:	10800003 	ldbu	r2,0(r2)
   1802c:	10803fcc 	andi	r2,r2,255
   18030:	1080201c 	xori	r2,r2,128
   18034:	10bfe004 	addi	r2,r2,-128
   18038:	10000a1e 	bne	r2,zero,18064 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1803c:	e0bffd17 	ldw	r2,-12(fp)
   18040:	10c00217 	ldw	r3,8(r2)
   18044:	e0bffe17 	ldw	r2,-8(fp)
   18048:	1809883a 	mov	r4,r3
   1804c:	e17fff17 	ldw	r5,-4(fp)
   18050:	100d883a 	mov	r6,r2
   18054:	00183540 	call	18354 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18058:	1000021e 	bne	r2,zero,18064 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1805c:	e0bffd17 	ldw	r2,-12(fp)
   18060:	00000806 	br	18084 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   18064:	e0bffd17 	ldw	r2,-12(fp)
   18068:	10800017 	ldw	r2,0(r2)
   1806c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18070:	e0fffd17 	ldw	r3,-12(fp)
   18074:	008000b4 	movhi	r2,2
   18078:	10a44904 	addi	r2,r2,-28380
   1807c:	18bfcb1e 	bne	r3,r2,17fac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   18080:	0005883a 	mov	r2,zero
}
   18084:	e037883a 	mov	sp,fp
   18088:	dfc00117 	ldw	ra,4(sp)
   1808c:	df000017 	ldw	fp,0(sp)
   18090:	dec00204 	addi	sp,sp,8
   18094:	f800283a 	ret

00018098 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   18098:	defffa04 	addi	sp,sp,-24
   1809c:	dfc00515 	stw	ra,20(sp)
   180a0:	df000415 	stw	fp,16(sp)
   180a4:	dc000315 	stw	r16,12(sp)
   180a8:	df000304 	addi	fp,sp,12
   180ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   180b0:	00bffa04 	movi	r2,-24
   180b4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   180b8:	e03ffd15 	stw	zero,-12(fp)
   180bc:	00002106 	br	18144 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   180c0:	040000b4 	movhi	r16,2
   180c4:	8423e404 	addi	r16,r16,-28784
   180c8:	e0bffd17 	ldw	r2,-12(fp)
   180cc:	1009883a 	mov	r4,r2
   180d0:	01400304 	movi	r5,12
   180d4:	00112540 	call	11254 <__mulsi3>
   180d8:	8085883a 	add	r2,r16,r2
   180dc:	10800017 	ldw	r2,0(r2)
   180e0:	1000151e 	bne	r2,zero,18138 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   180e4:	040000b4 	movhi	r16,2
   180e8:	8423e404 	addi	r16,r16,-28784
   180ec:	e0bffd17 	ldw	r2,-12(fp)
   180f0:	1009883a 	mov	r4,r2
   180f4:	01400304 	movi	r5,12
   180f8:	00112540 	call	11254 <__mulsi3>
   180fc:	8085883a 	add	r2,r16,r2
   18100:	e0ffff17 	ldw	r3,-4(fp)
   18104:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   18108:	008000b4 	movhi	r2,2
   1810c:	10a44d04 	addi	r2,r2,-28364
   18110:	10c00017 	ldw	r3,0(r2)
   18114:	e0bffd17 	ldw	r2,-12(fp)
   18118:	1880040e 	bge	r3,r2,1812c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1811c:	008000b4 	movhi	r2,2
   18120:	10a44d04 	addi	r2,r2,-28364
   18124:	e0fffd17 	ldw	r3,-12(fp)
   18128:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1812c:	e0bffd17 	ldw	r2,-12(fp)
   18130:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   18134:	00000606 	br	18150 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18138:	e0bffd17 	ldw	r2,-12(fp)
   1813c:	10800044 	addi	r2,r2,1
   18140:	e0bffd15 	stw	r2,-12(fp)
   18144:	e0bffd17 	ldw	r2,-12(fp)
   18148:	10800810 	cmplti	r2,r2,32
   1814c:	103fdc1e 	bne	r2,zero,180c0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   18150:	e0bffe17 	ldw	r2,-8(fp)
}
   18154:	e037883a 	mov	sp,fp
   18158:	dfc00217 	ldw	ra,8(sp)
   1815c:	df000117 	ldw	fp,4(sp)
   18160:	dc000017 	ldw	r16,0(sp)
   18164:	dec00304 	addi	sp,sp,12
   18168:	f800283a 	ret

0001816c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1816c:	defffb04 	addi	sp,sp,-20
   18170:	df000415 	stw	fp,16(sp)
   18174:	df000404 	addi	fp,sp,16
   18178:	e13ffe15 	stw	r4,-8(fp)
   1817c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   18180:	e0bfff17 	ldw	r2,-4(fp)
   18184:	10840070 	cmpltui	r2,r2,4097
   18188:	1000021e 	bne	r2,zero,18194 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1818c:	00840004 	movi	r2,4096
   18190:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   18194:	e0fffe17 	ldw	r3,-8(fp)
   18198:	e0bfff17 	ldw	r2,-4(fp)
   1819c:	1885883a 	add	r2,r3,r2
   181a0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   181a4:	e0bffe17 	ldw	r2,-8(fp)
   181a8:	e0bffc15 	stw	r2,-16(fp)
   181ac:	00000506 	br	181c4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   181b0:	e0bffc17 	ldw	r2,-16(fp)
   181b4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   181b8:	e0bffc17 	ldw	r2,-16(fp)
   181bc:	10800804 	addi	r2,r2,32
   181c0:	e0bffc15 	stw	r2,-16(fp)
   181c4:	e0fffc17 	ldw	r3,-16(fp)
   181c8:	e0bffd17 	ldw	r2,-12(fp)
   181cc:	18bff836 	bltu	r3,r2,181b0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   181d0:	e0bffe17 	ldw	r2,-8(fp)
   181d4:	108007cc 	andi	r2,r2,31
   181d8:	10000226 	beq	r2,zero,181e4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   181dc:	e0bffc17 	ldw	r2,-16(fp)
   181e0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   181e4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   181e8:	e037883a 	mov	sp,fp
   181ec:	df000017 	ldw	fp,0(sp)
   181f0:	dec00104 	addi	sp,sp,4
   181f4:	f800283a 	ret

000181f8 <exit>:
   181f8:	defffe04 	addi	sp,sp,-8
   181fc:	000b883a 	mov	r5,zero
   18200:	dc000015 	stw	r16,0(sp)
   18204:	dfc00115 	stw	ra,4(sp)
   18208:	2021883a 	mov	r16,r4
   1820c:	00184300 	call	18430 <__call_exitprocs>
   18210:	8009883a 	mov	r4,r16
   18214:	00186080 	call	18608 <_exit>

00018218 <fputs>:
   18218:	defffd04 	addi	sp,sp,-12
   1821c:	dfc00215 	stw	ra,8(sp)
   18220:	dc000115 	stw	r16,4(sp)
   18224:	d9400015 	stw	r5,0(sp)
   18228:	2021883a 	mov	r16,r4
   1822c:	001839c0 	call	1839c <strlen>
   18230:	00c000b4 	movhi	r3,2
   18234:	18e44504 	addi	r3,r3,-28396
   18238:	d9400017 	ldw	r5,0(sp)
   1823c:	19000017 	ldw	r4,0(r3)
   18240:	00c000b4 	movhi	r3,2
   18244:	18e09d04 	addi	r3,r3,-32140
   18248:	28c00115 	stw	r3,4(r5)
   1824c:	800d883a 	mov	r6,r16
   18250:	100f883a 	mov	r7,r2
   18254:	183ee83a 	callr	r3
   18258:	00ffffc4 	movi	r3,-1
   1825c:	10c00126 	beq	r2,r3,18264 <fputs+0x4c>
   18260:	0005883a 	mov	r2,zero
   18264:	dfc00217 	ldw	ra,8(sp)
   18268:	dc000117 	ldw	r16,4(sp)
   1826c:	dec00304 	addi	sp,sp,12
   18270:	f800283a 	ret

00018274 <__sfvwrite_small_dev>:
   18274:	2880000b 	ldhu	r2,0(r5)
   18278:	defffa04 	addi	sp,sp,-24
   1827c:	dcc00315 	stw	r19,12(sp)
   18280:	10c0020c 	andi	r3,r2,8
   18284:	18ffffcc 	andi	r3,r3,65535
   18288:	18e0001c 	xori	r3,r3,32768
   1828c:	dc800215 	stw	r18,8(sp)
   18290:	dc400115 	stw	r17,4(sp)
   18294:	dfc00515 	stw	ra,20(sp)
   18298:	dd000415 	stw	r20,16(sp)
   1829c:	dc000015 	stw	r16,0(sp)
   182a0:	18e00004 	addi	r3,r3,-32768
   182a4:	2825883a 	mov	r18,r5
   182a8:	2027883a 	mov	r19,r4
   182ac:	3023883a 	mov	r17,r6
   182b0:	18002626 	beq	r3,zero,1834c <__sfvwrite_small_dev+0xd8>
   182b4:	2940008f 	ldh	r5,2(r5)
   182b8:	28001016 	blt	r5,zero,182fc <__sfvwrite_small_dev+0x88>
   182bc:	01c01a0e 	bge	zero,r7,18328 <__sfvwrite_small_dev+0xb4>
   182c0:	3821883a 	mov	r16,r7
   182c4:	05010004 	movi	r20,1024
   182c8:	00000306 	br	182d8 <__sfvwrite_small_dev+0x64>
   182cc:	88a3883a 	add	r17,r17,r2
   182d0:	0400150e 	bge	zero,r16,18328 <__sfvwrite_small_dev+0xb4>
   182d4:	9140008f 	ldh	r5,2(r18)
   182d8:	880d883a 	mov	r6,r17
   182dc:	9809883a 	mov	r4,r19
   182e0:	800f883a 	mov	r7,r16
   182e4:	a400010e 	bge	r20,r16,182ec <__sfvwrite_small_dev+0x78>
   182e8:	01c10004 	movi	r7,1024
   182ec:	00183c40 	call	183c4 <_write_r>
   182f0:	80a1c83a 	sub	r16,r16,r2
   182f4:	00bff516 	blt	zero,r2,182cc <__sfvwrite_small_dev+0x58>
   182f8:	9080000b 	ldhu	r2,0(r18)
   182fc:	10801014 	ori	r2,r2,64
   18300:	9080000d 	sth	r2,0(r18)
   18304:	00bfffc4 	movi	r2,-1
   18308:	dfc00517 	ldw	ra,20(sp)
   1830c:	dd000417 	ldw	r20,16(sp)
   18310:	dcc00317 	ldw	r19,12(sp)
   18314:	dc800217 	ldw	r18,8(sp)
   18318:	dc400117 	ldw	r17,4(sp)
   1831c:	dc000017 	ldw	r16,0(sp)
   18320:	dec00604 	addi	sp,sp,24
   18324:	f800283a 	ret
   18328:	0005883a 	mov	r2,zero
   1832c:	dfc00517 	ldw	ra,20(sp)
   18330:	dd000417 	ldw	r20,16(sp)
   18334:	dcc00317 	ldw	r19,12(sp)
   18338:	dc800217 	ldw	r18,8(sp)
   1833c:	dc400117 	ldw	r17,4(sp)
   18340:	dc000017 	ldw	r16,0(sp)
   18344:	dec00604 	addi	sp,sp,24
   18348:	f800283a 	ret
   1834c:	00bfffc4 	movi	r2,-1
   18350:	003fed06 	br	18308 <__sfvwrite_small_dev+0x94>

00018354 <memcmp>:
   18354:	30000d26 	beq	r6,zero,1838c <memcmp+0x38>
   18358:	20c00003 	ldbu	r3,0(r4)
   1835c:	28800003 	ldbu	r2,0(r5)
   18360:	18800c1e 	bne	r3,r2,18394 <memcmp+0x40>
   18364:	31bfff84 	addi	r6,r6,-2
   18368:	01ffffc4 	movi	r7,-1
   1836c:	00000406 	br	18380 <memcmp+0x2c>
   18370:	20c00003 	ldbu	r3,0(r4)
   18374:	28800003 	ldbu	r2,0(r5)
   18378:	31bfffc4 	addi	r6,r6,-1
   1837c:	1880051e 	bne	r3,r2,18394 <memcmp+0x40>
   18380:	21000044 	addi	r4,r4,1
   18384:	29400044 	addi	r5,r5,1
   18388:	31fff91e 	bne	r6,r7,18370 <memcmp+0x1c>
   1838c:	0005883a 	mov	r2,zero
   18390:	f800283a 	ret
   18394:	1885c83a 	sub	r2,r3,r2
   18398:	f800283a 	ret

0001839c <strlen>:
   1839c:	20800007 	ldb	r2,0(r4)
   183a0:	10000626 	beq	r2,zero,183bc <strlen+0x20>
   183a4:	2005883a 	mov	r2,r4
   183a8:	10800044 	addi	r2,r2,1
   183ac:	10c00007 	ldb	r3,0(r2)
   183b0:	183ffd1e 	bne	r3,zero,183a8 <strlen+0xc>
   183b4:	1105c83a 	sub	r2,r2,r4
   183b8:	f800283a 	ret
   183bc:	0005883a 	mov	r2,zero
   183c0:	f800283a 	ret

000183c4 <_write_r>:
   183c4:	defffd04 	addi	sp,sp,-12
   183c8:	dc400115 	stw	r17,4(sp)
   183cc:	dc000015 	stw	r16,0(sp)
   183d0:	2023883a 	mov	r17,r4
   183d4:	040000b4 	movhi	r16,2
   183d8:	84261204 	addi	r16,r16,-26552
   183dc:	2809883a 	mov	r4,r5
   183e0:	300b883a 	mov	r5,r6
   183e4:	380d883a 	mov	r6,r7
   183e8:	dfc00215 	stw	ra,8(sp)
   183ec:	80000015 	stw	zero,0(r16)
   183f0:	00186940 	call	18694 <write>
   183f4:	00ffffc4 	movi	r3,-1
   183f8:	10c00526 	beq	r2,r3,18410 <_write_r+0x4c>
   183fc:	dfc00217 	ldw	ra,8(sp)
   18400:	dc400117 	ldw	r17,4(sp)
   18404:	dc000017 	ldw	r16,0(sp)
   18408:	dec00304 	addi	sp,sp,12
   1840c:	f800283a 	ret
   18410:	80c00017 	ldw	r3,0(r16)
   18414:	183ff926 	beq	r3,zero,183fc <_write_r+0x38>
   18418:	88c00015 	stw	r3,0(r17)
   1841c:	dfc00217 	ldw	ra,8(sp)
   18420:	dc400117 	ldw	r17,4(sp)
   18424:	dc000017 	ldw	r16,0(sp)
   18428:	dec00304 	addi	sp,sp,12
   1842c:	f800283a 	ret

00018430 <__call_exitprocs>:
   18430:	008000b4 	movhi	r2,2
   18434:	10a44404 	addi	r2,r2,-28400
   18438:	10800017 	ldw	r2,0(r2)
   1843c:	defff204 	addi	sp,sp,-56
   18440:	df000c15 	stw	fp,48(sp)
   18444:	d8800015 	stw	r2,0(sp)
   18448:	10800c04 	addi	r2,r2,48
   1844c:	dd400915 	stw	r21,36(sp)
   18450:	dfc00d15 	stw	ra,52(sp)
   18454:	ddc00b15 	stw	r23,44(sp)
   18458:	dd800a15 	stw	r22,40(sp)
   1845c:	dd000815 	stw	r20,32(sp)
   18460:	dcc00715 	stw	r19,28(sp)
   18464:	dc800615 	stw	r18,24(sp)
   18468:	dc400515 	stw	r17,20(sp)
   1846c:	dc000415 	stw	r16,16(sp)
   18470:	d9000115 	stw	r4,4(sp)
   18474:	2839883a 	mov	fp,r5
   18478:	d8800215 	stw	r2,8(sp)
   1847c:	057fffc4 	movi	r21,-1
   18480:	d8800017 	ldw	r2,0(sp)
   18484:	dd800217 	ldw	r22,8(sp)
   18488:	15c00c17 	ldw	r23,48(r2)
   1848c:	b8001b26 	beq	r23,zero,184fc <__call_exitprocs+0xcc>
   18490:	b9000117 	ldw	r4,4(r23)
   18494:	bd002217 	ldw	r20,136(r23)
   18498:	243fffc4 	addi	r16,r4,-1
   1849c:	80001416 	blt	r16,zero,184f0 <__call_exitprocs+0xc0>
   184a0:	244007c4 	addi	r17,r4,31
   184a4:	21000044 	addi	r4,r4,1
   184a8:	8c63883a 	add	r17,r17,r17
   184ac:	8427883a 	add	r19,r16,r16
   184b0:	2109883a 	add	r4,r4,r4
   184b4:	8c63883a 	add	r17,r17,r17
   184b8:	9ce7883a 	add	r19,r19,r19
   184bc:	2109883a 	add	r4,r4,r4
   184c0:	a463883a 	add	r17,r20,r17
   184c4:	a4e7883a 	add	r19,r20,r19
   184c8:	b925883a 	add	r18,r23,r4
   184cc:	e0001726 	beq	fp,zero,1852c <__call_exitprocs+0xfc>
   184d0:	a0000226 	beq	r20,zero,184dc <__call_exitprocs+0xac>
   184d4:	89400017 	ldw	r5,0(r17)
   184d8:	2f001426 	beq	r5,fp,1852c <__call_exitprocs+0xfc>
   184dc:	843fffc4 	addi	r16,r16,-1
   184e0:	8c7fff04 	addi	r17,r17,-4
   184e4:	9cffff04 	addi	r19,r19,-4
   184e8:	94bfff04 	addi	r18,r18,-4
   184ec:	857ff71e 	bne	r16,r21,184cc <__call_exitprocs+0x9c>
   184f0:	00800074 	movhi	r2,1
   184f4:	10951504 	addi	r2,r2,21588
   184f8:	1000311e 	bne	r2,zero,185c0 <__call_exitprocs+0x190>
   184fc:	dfc00d17 	ldw	ra,52(sp)
   18500:	df000c17 	ldw	fp,48(sp)
   18504:	ddc00b17 	ldw	r23,44(sp)
   18508:	dd800a17 	ldw	r22,40(sp)
   1850c:	dd400917 	ldw	r21,36(sp)
   18510:	dd000817 	ldw	r20,32(sp)
   18514:	dcc00717 	ldw	r19,28(sp)
   18518:	dc800617 	ldw	r18,24(sp)
   1851c:	dc400517 	ldw	r17,20(sp)
   18520:	dc000417 	ldw	r16,16(sp)
   18524:	dec00e04 	addi	sp,sp,56
   18528:	f800283a 	ret
   1852c:	b9000117 	ldw	r4,4(r23)
   18530:	92000017 	ldw	r8,0(r18)
   18534:	213fffc4 	addi	r4,r4,-1
   18538:	24001a26 	beq	r4,r16,185a4 <__call_exitprocs+0x174>
   1853c:	90000015 	stw	zero,0(r18)
   18540:	403fe626 	beq	r8,zero,184dc <__call_exitprocs+0xac>
   18544:	ba400117 	ldw	r9,4(r23)
   18548:	a0001226 	beq	r20,zero,18594 <__call_exitprocs+0x164>
   1854c:	00800044 	movi	r2,1
   18550:	1408983a 	sll	r4,r2,r16
   18554:	a1404017 	ldw	r5,256(r20)
   18558:	214a703a 	and	r5,r4,r5
   1855c:	28000d26 	beq	r5,zero,18594 <__call_exitprocs+0x164>
   18560:	a1404117 	ldw	r5,260(r20)
   18564:	2148703a 	and	r4,r4,r5
   18568:	2000101e 	bne	r4,zero,185ac <__call_exitprocs+0x17c>
   1856c:	99400017 	ldw	r5,0(r19)
   18570:	d9000117 	ldw	r4,4(sp)
   18574:	da400315 	stw	r9,12(sp)
   18578:	403ee83a 	callr	r8
   1857c:	da400317 	ldw	r9,12(sp)
   18580:	b9000117 	ldw	r4,4(r23)
   18584:	227fbe1e 	bne	r4,r9,18480 <__call_exitprocs+0x50>
   18588:	b1000017 	ldw	r4,0(r22)
   1858c:	25ffd326 	beq	r4,r23,184dc <__call_exitprocs+0xac>
   18590:	003fbb06 	br	18480 <__call_exitprocs+0x50>
   18594:	da400315 	stw	r9,12(sp)
   18598:	403ee83a 	callr	r8
   1859c:	da400317 	ldw	r9,12(sp)
   185a0:	003ff706 	br	18580 <__call_exitprocs+0x150>
   185a4:	bc000115 	stw	r16,4(r23)
   185a8:	003fe506 	br	18540 <__call_exitprocs+0x110>
   185ac:	99000017 	ldw	r4,0(r19)
   185b0:	da400315 	stw	r9,12(sp)
   185b4:	403ee83a 	callr	r8
   185b8:	da400317 	ldw	r9,12(sp)
   185bc:	003ff006 	br	18580 <__call_exitprocs+0x150>
   185c0:	b9000117 	ldw	r4,4(r23)
   185c4:	20000e1e 	bne	r4,zero,18600 <__call_exitprocs+0x1d0>
   185c8:	b9000017 	ldw	r4,0(r23)
   185cc:	20000826 	beq	r4,zero,185f0 <__call_exitprocs+0x1c0>
   185d0:	b1000015 	stw	r4,0(r22)
   185d4:	a0000226 	beq	r20,zero,185e0 <__call_exitprocs+0x1b0>
   185d8:	a009883a 	mov	r4,r20
   185dc:	00154540 	call	15454 <free>
   185e0:	b809883a 	mov	r4,r23
   185e4:	00154540 	call	15454 <free>
   185e8:	b5c00017 	ldw	r23,0(r22)
   185ec:	003fa706 	br	1848c <__call_exitprocs+0x5c>
   185f0:	0007883a 	mov	r3,zero
   185f4:	b82d883a 	mov	r22,r23
   185f8:	182f883a 	mov	r23,r3
   185fc:	003fa306 	br	1848c <__call_exitprocs+0x5c>
   18600:	b8c00017 	ldw	r3,0(r23)
   18604:	003ffb06 	br	185f4 <__call_exitprocs+0x1c4>

00018608 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   18608:	defffc04 	addi	sp,sp,-16
   1860c:	df000315 	stw	fp,12(sp)
   18610:	df000304 	addi	fp,sp,12
   18614:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   18618:	0001883a 	nop
   1861c:	e0bfff17 	ldw	r2,-4(fp)
   18620:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   18624:	e0bffd17 	ldw	r2,-12(fp)
   18628:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1862c:	e0bffe17 	ldw	r2,-8(fp)
   18630:	10000226 	beq	r2,zero,1863c <_exit+0x34>
    ALT_SIM_FAIL();
   18634:	002af070 	cmpltui	zero,zero,43969
   18638:	00000106 	br	18640 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1863c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   18640:	003fff06 	br	18640 <_exit+0x38>

00018644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18644:	defffe04 	addi	sp,sp,-8
   18648:	dfc00115 	stw	ra,4(sp)
   1864c:	df000015 	stw	fp,0(sp)
   18650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18654:	008000b4 	movhi	r2,2
   18658:	10a44e04 	addi	r2,r2,-28360
   1865c:	10800017 	ldw	r2,0(r2)
   18660:	10000526 	beq	r2,zero,18678 <alt_get_errno+0x34>
   18664:	008000b4 	movhi	r2,2
   18668:	10a44e04 	addi	r2,r2,-28360
   1866c:	10800017 	ldw	r2,0(r2)
   18670:	103ee83a 	callr	r2
   18674:	00000206 	br	18680 <alt_get_errno+0x3c>
   18678:	008000b4 	movhi	r2,2
   1867c:	10a61204 	addi	r2,r2,-26552
}
   18680:	e037883a 	mov	sp,fp
   18684:	dfc00117 	ldw	ra,4(sp)
   18688:	df000017 	ldw	fp,0(sp)
   1868c:	dec00204 	addi	sp,sp,8
   18690:	f800283a 	ret

00018694 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   18694:	defff904 	addi	sp,sp,-28
   18698:	dfc00615 	stw	ra,24(sp)
   1869c:	df000515 	stw	fp,20(sp)
   186a0:	df000504 	addi	fp,sp,20
   186a4:	e13ffd15 	stw	r4,-12(fp)
   186a8:	e17ffe15 	stw	r5,-8(fp)
   186ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   186b0:	e0bffd17 	ldw	r2,-12(fp)
   186b4:	10000716 	blt	r2,zero,186d4 <write+0x40>
   186b8:	e13ffd17 	ldw	r4,-12(fp)
   186bc:	01400304 	movi	r5,12
   186c0:	00112540 	call	11254 <__mulsi3>
   186c4:	00c000b4 	movhi	r3,2
   186c8:	18e3e404 	addi	r3,r3,-28784
   186cc:	10c5883a 	add	r2,r2,r3
   186d0:	00000106 	br	186d8 <write+0x44>
   186d4:	0005883a 	mov	r2,zero
   186d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   186dc:	e0bffb17 	ldw	r2,-20(fp)
   186e0:	10001f26 	beq	r2,zero,18760 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   186e4:	e0bffb17 	ldw	r2,-20(fp)
   186e8:	10800217 	ldw	r2,8(r2)
   186ec:	108000cc 	andi	r2,r2,3
   186f0:	10001726 	beq	r2,zero,18750 <write+0xbc>
   186f4:	e0bffb17 	ldw	r2,-20(fp)
   186f8:	10800017 	ldw	r2,0(r2)
   186fc:	10800617 	ldw	r2,24(r2)
   18700:	10001326 	beq	r2,zero,18750 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   18704:	e0bffb17 	ldw	r2,-20(fp)
   18708:	10800017 	ldw	r2,0(r2)
   1870c:	10c00617 	ldw	r3,24(r2)
   18710:	e0bfff17 	ldw	r2,-4(fp)
   18714:	e13ffb17 	ldw	r4,-20(fp)
   18718:	e17ffe17 	ldw	r5,-8(fp)
   1871c:	100d883a 	mov	r6,r2
   18720:	183ee83a 	callr	r3
   18724:	e0bffc15 	stw	r2,-16(fp)
   18728:	e0bffc17 	ldw	r2,-16(fp)
   1872c:	1000060e 	bge	r2,zero,18748 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   18730:	00186440 	call	18644 <alt_get_errno>
   18734:	e0fffc17 	ldw	r3,-16(fp)
   18738:	00c7c83a 	sub	r3,zero,r3
   1873c:	10c00015 	stw	r3,0(r2)
        return -1;
   18740:	00bfffc4 	movi	r2,-1
   18744:	00000a06 	br	18770 <write+0xdc>
      }
      return rval;
   18748:	e0bffc17 	ldw	r2,-16(fp)
   1874c:	00000806 	br	18770 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   18750:	00186440 	call	18644 <alt_get_errno>
   18754:	00c00344 	movi	r3,13
   18758:	10c00015 	stw	r3,0(r2)
   1875c:	00000306 	br	1876c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   18760:	00186440 	call	18644 <alt_get_errno>
   18764:	00c01444 	movi	r3,81
   18768:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1876c:	00bfffc4 	movi	r2,-1
}
   18770:	e037883a 	mov	sp,fp
   18774:	dfc00117 	ldw	ra,4(sp)
   18778:	df000017 	ldw	fp,0(sp)
   1877c:	dec00204 	addi	sp,sp,8
   18780:	f800283a 	ret
